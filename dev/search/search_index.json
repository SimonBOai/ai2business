{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Table of Contents About Getting Started Usage About the AI4Business The idea behind AI4Business is to have a python package that bundles data scientist and project manager's daily routines. For our understanding, the daily routines start with gathering information, which derives from three independent sources: Search trends Research trends (coming soon ...) Market trends and tickers The significant advantage is that AI4Business allows designing databases depending on individual Key Performance Indicators (KPIs). The following established method for data cleaning, data balancing, and data features selections is implemented and merged with automatic machine learning tools for classic and deep learning methods. Finally, the results can be exported to database systems, EXCEL, or PowerPoint for generating a quick summary of a possible Proof of Concept (PoC). Getting Started pip install git+https://github.com/AI2Business/ai2business.git Usage Please see the developer-docs .","title":"Home"},{"location":"#table-of-contents","text":"About Getting Started Usage","title":"Table of Contents"},{"location":"#about-the-ai4business","text":"The idea behind AI4Business is to have a python package that bundles data scientist and project manager's daily routines. For our understanding, the daily routines start with gathering information, which derives from three independent sources: Search trends Research trends (coming soon ...) Market trends and tickers The significant advantage is that AI4Business allows designing databases depending on individual Key Performance Indicators (KPIs). The following established method for data cleaning, data balancing, and data features selections is implemented and merged with automatic machine learning tools for classic and deep learning methods. Finally, the results can be exported to database systems, EXCEL, or PowerPoint for generating a quick summary of a possible Proof of Concept (PoC).","title":"About the AI4Business  "},{"location":"#getting-started","text":"pip install git+https://github.com/AI2Business/ai2business.git","title":"Getting Started  "},{"location":"#usage","text":"Please see the developer-docs .","title":"Usage "},{"location":"AutoML_for_NeuralNetworks/","text":"[source] AutoMLModels ai2business . ai_engines . automl_neural_network . AutoMLModels ( directory = None , loss = None , objective = \"val_loss\" , overwrite = False , project_name = \"AutoML_DeepLearning\" , max_model_size = None , max_trials = None , metrics = None , seed = None , tuner = None , ) The Auto-Machine Learning Models Here is the list of the current implemented auto-machine learning models from AutoKERAS : Image-Classification Image-Regression Text-Classification Text-Regression Structured-Data-Classification Structured-Data-Regression Mulit-Models Time-Series-Forcast","title":"AutoMLRun"},{"location":"AutoML_for_NeuralNetworks/#automlmodels","text":"ai2business . ai_engines . automl_neural_network . AutoMLModels ( directory = None , loss = None , objective = \"val_loss\" , overwrite = False , project_name = \"AutoML_DeepLearning\" , max_model_size = None , max_trials = None , metrics = None , seed = None , tuner = None , ) The Auto-Machine Learning Models Here is the list of the current implemented auto-machine learning models from AutoKERAS : Image-Classification Image-Regression Text-Classification Text-Regression Structured-Data-Classification Structured-Data-Regression Mulit-Models Time-Series-Forcast","title":"AutoMLModels"},{"location":"Key_Performance_Collection/","text":"[source] TrendsCollector ai2business . kpi_collector . trends_collector . TrendsCollector () TrendsCollector is in charge for executing the functions. During the execution, TrendsCollector can construct several product variations using the same building steps. [source] FinanceCollector ai2business . kpi_collector . finance_collector . FinanceCollector () FinanceCollector is in charge for executing the functions. During the execution, FinanceCollector can construct several product variations using the same building steps.","title":"Trend Search"},{"location":"Key_Performance_Collection/#trendscollector","text":"ai2business . kpi_collector . trends_collector . TrendsCollector () TrendsCollector is in charge for executing the functions. During the execution, TrendsCollector can construct several product variations using the same building steps. [source]","title":"TrendsCollector"},{"location":"Key_Performance_Collection/#financecollector","text":"ai2business . kpi_collector . finance_collector . FinanceCollector () FinanceCollector is in charge for executing the functions. During the execution, FinanceCollector can construct several product variations using the same building steps.","title":"FinanceCollector"},{"location":"Oneliner/","text":"[source] TrendSearch ai2business . macros . oneliner . TrendSearch ( * args , ** kwargs ) Here is collection of oneliner for trend search. What is an oneliner ? Oneliner is a function that can be executed in one line and contains all essential parameters. No further introductions are needed. A four step search is searching: 1. Overtime 2. By regions 3. By related topics 4. By related queries","title":"Oneliner"},{"location":"Oneliner/#trendsearch","text":"ai2business . macros . oneliner . TrendSearch ( * args , ** kwargs ) Here is collection of oneliner for trend search. What is an oneliner ? Oneliner is a function that can be executed in one line and contains all essential parameters. No further introductions are needed.","title":"TrendSearch"},{"location":"Oneliner/#a-four-step-search-is-searching","text":"1. Overtime 2. By regions 3. By related topics 4. By related queries","title":"A four step search is searching:"},{"location":"Sample_Generators/","text":"[source] SampleGenerators ai2business . datasets . sample_generator . SampleGenerators ( * args , ** kwargs ) Sample Generators allows to generate key word list. Example The module sample_generator.py contains functions, which allows generating a list of keywords with and without acronym. # Get ticker values of the leading stock markert worldwide. stock_market ( indices : str = \"DOWJONES\" ) -> dict","title":"Sample Generators"},{"location":"Sample_Generators/#samplegenerators","text":"ai2business . datasets . sample_generator . SampleGenerators ( * args , ** kwargs ) Sample Generators allows to generate key word list. Example The module sample_generator.py contains functions, which allows generating a list of keywords with and without acronym. # Get ticker values of the leading stock markert worldwide. stock_market ( indices : str = \"DOWJONES\" ) -> dict","title":"SampleGenerators"},{"location":"data_visualization_api/","text":"API of the Visualization Visualization of Data Data Visualization Module: Visualization of data and its first principal properties. BuilderDataVisualization BuilderDataVisualization contains the abstract properties and methods. BuilderDataVisualization specifies the properties and methods for creating the different parts of the DesignerDataVisualization objects. Parameters: Name Type Description Default ABC class Helper class that provides a standard way to create an ABC using inheritance. required data_figure : None property readonly Abstract property of data_figure. get_boxenplot ( self ) Abstract method of get_boxenplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_boxenplot ( self ) -> None : \"\"\"Abstract method of get_boxenplot.\"\"\" get_boxplot ( self ) Abstract method of get_boxplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_boxplot ( self ) -> None : \"\"\"Abstract method of get_boxplot.\"\"\" get_categoryplot ( self ) Abstract method of get_categoryplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_categoryplot ( self ) -> None : \"\"\"Abstract method of get_categoryplot.\"\"\" get_cluster_mapplot ( self ) Abstract method of get_cluster_mapplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_cluster_mapplot ( self ) -> None : \"\"\"Abstract method of get_cluster_mapplot.\"\"\" get_complex_pairmapplot ( self ) Abstract method of get_complex_pairmapplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_complex_pairmapplot ( self ) -> None : \"\"\"Abstract method of get_complex_pairmapplot.\"\"\" get_correlationpplot ( self ) Abstract method of get_correlationpplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_correlationpplot ( self ) -> None : \"\"\"Abstract method of get_correlationpplot.\"\"\" get_density_mapplot ( self ) Abstract method of get_densitymapplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_density_mapplot ( self ) -> None : \"\"\"Abstract method of get_densitymapplot.\"\"\" get_diagonal_correlationpplot ( self ) Abstract method of get_diagonal_correlationpplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_diagonal_correlationpplot ( self ) -> None : \"\"\"Abstract method of get_diagonal_correlationpplot.\"\"\" get_distributionplot ( self ) Abstract method of get_distributionplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_distributionplot ( self ) -> None : \"\"\"Abstract method of get_distributionplot.\"\"\" get_heatmapplot ( self ) Abstract method of get_heatmapp. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_heatmapplot ( self ) -> None : \"\"\"Abstract method of get_heatmapp.\"\"\" get_hexagonplot ( self ) Abstract method of get_hexagonplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_hexagonplot ( self ) -> None : \"\"\"Abstract method of get_hexagonplot.\"\"\" get_histogramplot ( self ) Abstract method of get_histogramplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_histogramplot ( self ) -> None : \"\"\"Abstract method of get_histogramplot.\"\"\" get_kerneldensity_mapplot ( self ) Abstract method of get_kerneldensity_mapplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_kerneldensity_mapplot ( self ) -> None : \"\"\"Abstract method of get_kerneldensity_mapplot.\"\"\" get_lineplot ( self ) Abstract method of get_lineplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_lineplot ( self ) -> None : \"\"\"Abstract method of get_lineplot.\"\"\" get_nullity_bar ( self ) Abstract method of get_nullity_bar. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_nullity_bar ( self ) -> None : \"\"\"Abstract method of get_nullity_bar.\"\"\" get_nullity_dendrogram ( self ) Abstract method of get_nullity_dendrogram. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_nullity_dendrogram ( self ) -> None : \"\"\"Abstract method of get_nullity_dendrogram.\"\"\" get_nullity_heatmap ( self ) Abstract method of get_nullity_heatmap. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_nullity_heatmap ( self ) -> None : \"\"\"Abstract method of get_nullity_heatmap.\"\"\" get_nullity_matrix ( self ) Abstract method of get_nullity_matrix. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_nullity_matrix ( self ) -> None : \"\"\"Abstract method of get_nullity_matrix.\"\"\" get_pairmapplot ( self ) Abstract method of get_pairmapplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_pairmapplot ( self ) -> None : \"\"\"Abstract method of get_pairmapplot.\"\"\" get_pointplot ( self ) Abstract method of get_pointplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_pointplot ( self ) -> None : \"\"\"Abstract method of get_pointplot.\"\"\" get_regression_mapplot ( self ) Abstract method of get_marginalplot. Source code in ai2business/visualization/data_visualization.py def get_regression_mapplot ( self ) -> None : \"\"\"Abstract method of get_marginalplot.\"\"\" get_regressionplot ( self ) Abstract method of get_regressionplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_regressionplot ( self ) -> None : \"\"\"Abstract method of get_regressionplot.\"\"\" get_relationalplot ( self ) Abstract method of get_relationalplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_relationalplot ( self ) -> None : \"\"\"Abstract method of get_relationalplot.\"\"\" get_residualplot ( self ) Abstract method of get_residualplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_residualplot ( self ) -> None : \"\"\"Abstract method of get_residualplot.\"\"\" get_scatterplot ( self ) Abstract method of get_scatterplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_scatterplot ( self ) -> None : \"\"\"Abstract method of get_scatterplot.\"\"\" get_stripplot ( self ) Abstract method of get_stripplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_stripplot ( self ) -> None : \"\"\"Abstract method of get_stripplot.\"\"\" get_swarmplot ( self ) Abstract method of get_swarmplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_swarmplot ( self ) -> None : \"\"\"Abstract method of get_swarmplot.\"\"\" get_violinplot ( self ) Abstract method of get_violinplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_violinplot ( self ) -> None : \"\"\"Abstract method of get_violinplot.\"\"\" reset ( self ) Abstract method of reset. Source code in ai2business/visualization/data_visualization.py @abstractmethod def reset ( self ) -> None : \"\"\"Abstract method of reset.\"\"\" DataVisualization DataVisualization is in charge of executing the functions. During the execution, DataVisualization can construct several product variations using the same building steps. General introduction into using plot-functions! >>> from ai2business.macros import oneliner as one >>> from ai2business.visualization import data_visualization as dav >>> df_dict_years = one . TrendSearch . four_step_search ( keyword_list = [ \"2017\" , \"2018\" , \"2019\" , \"2020\" , \"2021\" , ]) >>> data = dav . DataVisualization () >>> builder = dav . DesignerDataVisualization ( df_dict_years [ \"get_interest_over_time\" ]) >>> data . builder = builder # Here any kind of plot function can be called >>> data . lineplot () >>> builder . data_figure . save_all_figures ( folder = folder ) Activating hidden functions of the seaborn -module! Due to the seaborn module's complexity, only the significant four variables (x_label, y_label, hue, palette) are defined in DesignerDataVisualization . However, all other seaborn-module options can be individual activated by **kwargs in each function separately. builder : BuilderDataVisualization property writable Builder as a property with value None. Returns: Type Description BuilderDataVisualization BuilderDataVisualization: A builder class, that contains the abstract properties and methods. initialization_figure : None property readonly Initialization of the figure. Reminder It is very important that if figure has to be first deleted, otherwise the figures can be overlapped. __init__ ( self ) special Initialize a fresh and empty builder. Source code in ai2business/visualization/data_visualization.py def __init__ ( self ) -> None : \"\"\"Initialize a fresh and empty builder.\"\"\" self . _builder = None boxplot ( self , multiboxen = False , ** kwargs ) Create a given box plot based on seaborn. Parameters: Name Type Description Default multiboxen bool Allows to draw multi boxen per object. Defaults to False. False Source code in ai2business/visualization/data_visualization.py def boxplot ( self , multiboxen : bool = False , ** kwargs ) -> None : \"\"\"Create a given box plot based on seaborn. Args: multiboxen (bool, optional): Allows to draw multi boxen per object. Defaults to False. \"\"\" self . initialization_figure if multiboxen : self . builder . get_boxenplot ( ** kwargs ) else : self . builder . get_boxplot ( ** kwargs ) categoryplot ( self , ** kwargs ) Create a given category plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def categoryplot ( self , ** kwargs ) -> None : \"\"\"Create a given category plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_categoryplot ( ** kwargs ) clustermap ( self , method = 'pearson' , min_periods = 1 , ** kwargs ) Create a given cluster map based on seaborn. Parameters: Name Type Description Default method str Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". 'pearson' min_periods int Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. 1 Source code in ai2business/visualization/data_visualization.py def clustermap ( self , method : str = \"pearson\" , min_periods : int = 1 , ** kwargs ) -> None : \"\"\"Create a given cluster map based on seaborn. Args: method (str, optional): Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". min_periods (int, optional): Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. \"\"\" self . initialization_figure self . builder . get_cluster_mapplot ( method = method , min_periods = min_periods , ** kwargs ) correlationmap ( self , diagonal = False , method = 'pearson' , min_periods = 1 , ** kwargs ) Create a given correlation map based on seaborn. Parameters: Name Type Description Default diagonal bool Only the lower diagonal elements will be plotted. Defaults to False. False method str Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". 'pearson' min_periods int Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. 1 Source code in ai2business/visualization/data_visualization.py def correlationmap ( self , diagonal : bool = False , method : str = \"pearson\" , min_periods : int = 1 , ** kwargs , ) -> None : \"\"\"Create a given correlation map based on seaborn. Args: diagonal (bool, optional): Only the lower diagonal elements will be plotted. Defaults to False. method (str, optional): Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". min_periods (int, optional): Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. \"\"\" self . initialization_figure if diagonal : self . builder . get_diagonal_correlationpplot ( method = method , min_periods = min_periods , ** kwargs ) else : self . builder . get_correlationpplot ( method = method , min_periods = min_periods , ** kwargs ) densitymap ( self , kde = False , ** kwargs ) Create a given density map based on seaborn. Parameters: Name Type Description Default kde bool Plots the density as kernel density. Defaults to False. False Source code in ai2business/visualization/data_visualization.py def densitymap ( self , kde : bool = False , ** kwargs ) -> None : \"\"\"Create a given density map based on seaborn. Args: kde (bool, optional): Plots the density as kernel density. Defaults to False. \"\"\" self . initialization_figure if kde : self . builder . get_kerneldensity_mapplot ( ** kwargs ) else : self . builder . get_density_mapplot ( ** kwargs ) distributionplot ( self , ** kwargs ) Create a given distribution plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def distributionplot ( self , ** kwargs ) -> None : \"\"\"Create a given distribution plot based on seaborn.\"\"\" self . builder . get_distributionplot ( ** kwargs ) heatmap ( self , ** kwargs ) Create a given heat map based on seaborn. Source code in ai2business/visualization/data_visualization.py def heatmap ( self , ** kwargs ) -> None : \"\"\"Create a given heat map based on seaborn.\"\"\" self . initialization_figure self . builder . get_heatmapplot ( ** kwargs ) hexagonplot ( self , ** kwargs ) Create a given hexagon plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def hexagonplot ( self , ** kwargs ) -> None : \"\"\"Create a given hexagon plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_hexagonplot ( ** kwargs ) histogramplot ( self , ** kwargs ) Create a given histogram plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def histogramplot ( self , ** kwargs ) -> None : \"\"\"Create a given histogram plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_histogramplot ( ** kwargs ) lineplot ( self , ** kwargs ) Create a given line plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def lineplot ( self , ** kwargs ) -> None : \"\"\"Create a given line plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_lineplot ( ** kwargs ) pairmap ( self , complex = False , ** kwargs ) Create a pair map based on seaborn. Parameters: Name Type Description Default complex bool Turn on the get_complex_pairmapplot . Defaults to False. False Source code in ai2business/visualization/data_visualization.py def pairmap ( self , complex : bool = False , ** kwargs ): \"\"\"Create a pair map based on seaborn. Args: complex (bool, optional): Turn on the `get_complex_pairmapplot`. Defaults to False. \"\"\" self . initialization_figure if complex : self . builder . get_complex_pairmapplot ( ** kwargs ) else : self . builder . get_pairmapplot ( ** kwargs ) pointplot ( self , ** kwargs ) Create a given point plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def pointplot ( self , ** kwargs ) -> None : \"\"\"Create a given point plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_pointplot ( ** kwargs ) regressionplot ( self , map = False , ** kwargs ) Create a given regression plot based on seaborn. Parameters: Name Type Description Default map bool Creates the regression plot as map. Defaults to False. False Source code in ai2business/visualization/data_visualization.py def regressionplot ( self , map : bool = False , ** kwargs ) -> None : \"\"\"Create a given regression plot based on seaborn. Args: map (bool, optional): Creates the regression plot as map. Defaults to False. \"\"\" self . initialization_figure if map : self . builder . get_regression_mapplot ( ** kwargs ) else : self . builder . get_regressionplot ( ** kwargs ) relationalplot ( self , ** kwargs ) Create a given relational plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def relationalplot ( self , ** kwargs ) -> None : \"\"\"Create a given relational plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_relationalplot ( ** kwargs ) residualplot ( self , ** kwargs ) Create a given residual plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def residualplot ( self , ** kwargs ) -> None : \"\"\"Create a given residual plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_residualplot ( ** kwargs ) scatterplot ( self , ** kwargs ) Create a given scatter plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def scatterplot ( self , ** kwargs ) -> None : \"\"\"Create a given scatter plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_scatterplot ( ** kwargs ) stripplot ( self , ** kwargs ) Create a given strip plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def stripplot ( self , ** kwargs ) -> None : \"\"\"Create a given strip plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_stripplot ( ** kwargs ) swarmplot ( self , ** kwargs ) Create a given swarm plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def swarmplot ( self , ** kwargs ) -> None : \"\"\"Create a given swarm plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_swarmplot ( ** kwargs ) violinplot ( self , ** kwargs ) Create a given violin plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def violinplot ( self , ** kwargs ) -> None : \"\"\"Create a given violin plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_violinplot ( ** kwargs ) visual_missing_data ( self , n_columns = 0 , per_columns = 0.0 , cmap = 'seismic' , ** kwargs ) Visualizing possible missing data. Parameters: Name Type Description Default n_columns int The cap on the number of columns to include in the filtered DataFrame. Defaults to 0. 0 per_columns float The cap on the percentage fill of the columns in the filtered DataFrame. Defaults to 0.0. 0.0 cmap str The color of the heatmap. Defaults to \"seismic\". 'seismic' Visualization of nullity results, respectively, missing values! Possible missing data will be visualized by: nullity matrix highlights out patterns and structures in data completion. nullity bar shows the available data as a series of single bars. nullity heatmap point out the correlation between the presence and absence data. nullity dendrogram visualize the correlate variable completion. For more information see: ResidentMario/missingno Source code in ai2business/visualization/data_visualization.py def visual_missing_data ( self , n_columns : int = 0 , per_columns : float = 0.0 , cmap : str = \"seismic\" , ** kwargs , ) -> None : \"\"\"Visualizing possible missing data. Args: n_columns (int, optional): The cap on the number of columns to include in the filtered DataFrame. Defaults to 0. per_columns (float, optional): The cap on the percentage fill of the columns in the filtered DataFrame. Defaults to 0.0. cmap (str, optional): The color of the heatmap. Defaults to \"seismic\". !!! note \"Visualization of nullity results, respectively, missing values!\" Possible missing data will be visualized by: 1. nullity matrix highlights out patterns and structures in data completion. ![Placeholder](https://github.com/AI2Business/ai2business/blob/main/docs/images/nullity/get_nullity_matrix_bc6141f519e4eea9e6a0d5fe84115d65.png?raw=true){: loading=lazy } 2. nullity bar shows the available data as a series of single bars. ![Placeholder](https://github.com/AI2Business/ai2business/blob/main/docs/images/nullity/get_nullity_bar_9918e972a769781d322ba1e18fe8f86c.png?raw=true){: loading=lazy } 3. nullity heatmap point out the correlation between the presence and absence data. ![Placeholder](https://github.com/AI2Business/ai2business/blob/main/docs/images/nullity/get_nullity_heatmap_d46e69f559bd7b713b7a6c3ceb0f9968.png?raw=true){: loading=lazy } 4. nullity dendrogram visualize the correlate variable completion. ![Placeholder](https://github.com/AI2Business/ai2business/blob/main/docs/images/nullity/get_nullity_dendrogram_15a148832cd43d6d249d56671a0fab6f.png?raw=true){: loading=lazy } For more information see: [https://github.com/ResidentMario/missingno](https://github.com/ResidentMario/missingno) \"\"\" self . builder . get_nullity_matrix ( n_columns = n_columns , per_columns = per_columns , ** kwargs ) self . builder . get_nullity_bar ( n_columns = n_columns , per_columns = per_columns , ** kwargs ) self . builder . get_nullity_heatmap ( n_columns = n_columns , per_columns = per_columns , cmap = cmap , ** kwargs ) self . builder . get_nullity_dendrogram ( n_columns = n_columns , per_columns = per_columns , ** kwargs ) DataVisualizationProduct DataVisualizationProduct contains the dictionary and the return value of it. list_product_parts : str property readonly List of the product parts in the dictionary. return_product : dict property readonly Returns the product as a dictionary Returns: Type Description dict dict: The product dictionary contains the product and ist function name as key . __init__ ( self ) special Initialization of DataVisualizationProduct. Source code in ai2business/visualization/data_visualization.py def __init__ ( self ) -> None : \"\"\"Initialization of DataVisualizationProduct.\"\"\" self . product_parts = {} add_product ( self , key , value ) Add the components of the data visualization to the dictionary. Parameters: Name Type Description Default key Callable Used data visualization search function required value <function subplot at 0x7f0766509160> Return value as matplotlib -class of subplots. required Source code in ai2business/visualization/data_visualization.py def add_product ( self , key : Callable , value : plt . subplot ) -> None : \"\"\"Add the components of the data visualization to the dictionary. Args: key (Callable): Used data visualization search function value (plt.subplot): Return value as `matplotlib`-class of subplots. \"\"\" self . product_parts [ key . __name__ ] = value save_all_figures ( self , folder = None ) Saving all figures of the product dictionary. All figures will be saved at . or in subfoalder as a combination of the current key and a 16 Bytes hex-token. Parameters: Name Type Description Default folder str Name of the subfolder, which will be created if not exists. Defaults to None. None Source code in ai2business/visualization/data_visualization.py def save_all_figures ( self , folder : str = None ): \"\"\"Saving all figures of the product dictionary. All figures will be saved at `.` or in subfoalder as a combination of the current `key` and a 16 Bytes hex-token. Args: folder (str, optional): Name of the subfolder, which will be created if not exists. Defaults to None. \"\"\" path = Path ( \".\" ) for key , value in self . product_parts . items (): if folder : path = Path ( folder ) path . mkdir ( exist_ok = True ) value . savefig ( path . joinpath ( f \" { key } _ { token_hex ( 16 ) } .png\" )) DesignerDataVisualization DesignerDataVisualization contains the specific implementation of BuilderDataVisualization . DesignerDataVisualization contains the specific implementation of BuilderDataVisualization based on the external libraries: missingno seaborn Parameters: Name Type Description Default BuilderDataVisualization class Abstract class that provides the implementations of the properties and methods. required data_figure : DataVisualizationProduct property readonly Return the results of the figure class of the data visualization. Returns: Type Description DataVisualizationProduct DataVisualizationProduct (class): DataVisualizationProduct contains the dictionary and the return value of it. __init__ ( self , df , dark_mode = False , grid = False , figsize = ( 12 , 8 ), dpi = 300 , x_label = None , y_label = None , hue = None , palette = None ) special Initialization of DesignerDataVisualization. Parameters: Name Type Description Default df DataFrame pandas DataFrame. required dark_mode bool Switch to dark mode. Defaults to False. False grid bool Activate grids in plots. Defaults to False. False figsize tuple Size of the figure. Defaults to (12, 8). (12, 8) dpi int Resolution of the figure. Defaults to 300. 300 x_label str Name of the column name for the x-axis . Defaults to None. None y_label str Name of the column name for the y-axis . Defaults to None. None hue str Name of the column name for the seperating the results to the uniques once. Defaults to None. None palette Union[str, list, dict] The str , list , or dict of colors or continuous colormap, which defines the color palette. Defaults to None. None Appearance-Modes Light-Mode without Grid Light-Mode with Grid Dark-Mode without Grid Dark-Mode with Grid Figuere Size Due to the default settings of missingno , the figure size has to be defined in advance. Source code in ai2business/visualization/data_visualization.py def __init__ ( self , df : pd . DataFrame , dark_mode : bool = False , grid : bool = False , figsize : tuple = ( 12 , 8 ), dpi : int = 300 , x_label : str = None , y_label : str = None , hue : str = None , palette : Union [ str , list , dict ] = None , ) -> None : \"\"\"Initialization of DesignerDataVisualization. Args: df (pd.DataFrame): pandas DataFrame. dark_mode (bool, optional): Switch to dark mode. Defaults to False. grid (bool, optional): Activate grids in plots. Defaults to False. figsize (tuple, optional): Size of the figure. Defaults to (12, 8). dpi (int, optional): Resolution of the figure. Defaults to 300. x_label (str, optional): Name of the column name for the `x-axis`. Defaults to None. y_label (str, optional): Name of the column name for the `y-axis`. Defaults to None. hue (str, optional): Name of the column name for the seperating the results to the uniques once. Defaults to None. palette (Union[str, list, dict], optional): The `str`, `list`, or `dict` of colors or continuous colormap, which defines the color palette. Defaults to None. !!! note \"Appearance-Modes\" 1. Light-Mode without Grid ![Placeholder](https://github.com/AI2Business/ai2business/blob/main/docs/images/appearance/get_lineplot_805fabb7bbea3a9e807d3c2444bbaa4e.png?raw=true){: loading=lazy } 2. Light-Mode with Grid ![Placeholder](https://github.com/AI2Business/ai2business/blob/main/docs/images/appearance/get_lineplot_520cb6360c9fb9c61977a303213f1340.png?raw=true){: loading=lazy } 3. Dark-Mode without Grid ![Placeholder](https://github.com/AI2Business/ai2business/blob/main/docs/images/appearance/get_lineplot_6ef44df80722a1c466d0a4c47b8f2433.png?raw=true){: loading=lazy } 4. Dark-Mode with Grid ![Placeholder](https://github.com/AI2Business/ai2business/blob/main/docs/images/appearance/get_lineplot_65d5fcb713a18d25b1c1f6b504836776.png?raw=true){: loading=lazy } !!! note \"Figuere Size\" Due to the default settings of `missingno`, the figure size has to be defined in advance. \"\"\" self . df = df self . x_label = x_label self . y_label = y_label self . hue = hue self . palette = palette self . figsize = figsize _ = plt . figure ( figsize = self . figsize , dpi = dpi ) if dark_mode : self . style = style . dark_mode ( grid = grid ) else : self . style = style . light_mode ( grid = grid ) self . reset () get_boxenplot ( self , ** kwargs ) Get a multi box plot. Source code in ai2business/visualization/data_visualization.py def get_boxenplot ( self , ** kwargs ) -> None : \"\"\"Get a multi box plot.\"\"\" self . _product . add_product ( key = self . get_boxenplot , value = sns . boxenplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), ) get_boxplot ( self , ** kwargs ) Get a box plot. Source code in ai2business/visualization/data_visualization.py def get_boxplot ( self , ** kwargs ) -> None : \"\"\"Get a box plot.\"\"\" self . _product . add_product ( key = self . get_boxplot , value = sns . boxplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), ) get_categoryplot ( self , ** kwargs ) Get a category plot. Source code in ai2business/visualization/data_visualization.py def get_categoryplot ( self , ** kwargs ) -> None : \"\"\"Get a category plot.\"\"\" self . _product . add_product ( key = self . get_categoryplot , value = sns . catplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ), ) get_cluster_mapplot ( self , method = 'pearson' , min_periods = 1 , ** kwargs ) Get a cluster map plot. Parameters: Name Type Description Default method str Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". 'pearson' min_periods int Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. 1 Source code in ai2business/visualization/data_visualization.py def get_cluster_mapplot ( self , method : str = \"pearson\" , min_periods : int = 1 , ** kwargs ) -> None : \"\"\"Get a cluster map plot. Args: method (str, optional): Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". min_periods (int, optional): Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. \"\"\" self . _product . add_product ( key = self . get_cluster_mapplot , value = sns . clustermap ( data = self . df . corr ( method = method , min_periods = min_periods ), ** kwargs ), ) get_complex_pairmapplot ( self , ** kwargs ) Get a complex pair plot. About Complex Pair Plots The complex pair consits of three different types of subplots: A distribution plot on the diagonal. A kernel distribution map on the lower non-diagonal. A scatter plot in combination with a linear regression on the upper non-diagonal. Source code in ai2business/visualization/data_visualization.py def get_complex_pairmapplot ( self , ** kwargs ) -> None : \"\"\"Get a complex pair plot. !!! note \"About Complex Pair Plots\" The complex pair consits of three different types of subplots: 1. A distribution plot on the diagonal. 2. A kernel distribution map on the lower non-diagonal. 3. A scatter plot in combination with a linear regression on the upper non-diagonal. \"\"\" grid = sns . PairGrid ( self . df , hue = self . hue , palette = self . palette , ** kwargs ) grid . map_upper ( sns . regplot ) grid . map_lower ( sns . kdeplot ) grid . map_diag ( sns . kdeplot ) self . _product . add_product ( key = self . get_pairmapplot , value = grid , ) get_correlationpplot ( self , method = 'pearson' , min_periods = 1 , ** kwargs ) Get a correlation map plot. Parameters: Name Type Description Default method str Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". 'pearson' min_periods int Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. 1 Source code in ai2business/visualization/data_visualization.py def get_correlationpplot ( self , method : str = \"pearson\" , min_periods : int = 1 , ** kwargs ) -> None : \"\"\"Get a correlation map plot. Args: method (str, optional): Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". min_periods (int, optional): Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. \"\"\" self . _product . add_product ( key = self . get_correlationpplot , value = sns . relplot ( data = self . df . corr ( method = method , min_periods = min_periods ), x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ), ) get_density_mapplot ( self , ** kwargs ) Get a density map plot. Source code in ai2business/visualization/data_visualization.py def get_density_mapplot ( self , ** kwargs ) -> None : \"\"\"Get a density map plot.\"\"\" self . _product . add_product ( key = self . get_density_mapplot , value = sns . jointplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , kind = \"kde\" , ), ) get_diagonal_correlationpplot ( self , method = 'pearson' , min_periods = 1 , ** kwargs ) Get a correlation map plot with lower non-diagonal elements. Parameters: Name Type Description Default method str Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". 'pearson' min_periods int Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. 1 Source code in ai2business/visualization/data_visualization.py def get_diagonal_correlationpplot ( self , method : str = \"pearson\" , min_periods : int = 1 , ** kwargs ) -> None : \"\"\"Get a correlation map plot with lower non-diagonal elements. Args: method (str, optional): Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". min_periods (int, optional): Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. \"\"\" _corr = self . df . corr ( method = method , min_periods = min_periods ) _mask = np . triu ( np . ones_like ( _corr , dtype = bool )) self . _product . add_product ( key = self . get_cluster_mapplot , value = sns . heatmap ( data = _corr , mask = _mask , ** kwargs ) . get_figure (), ) get_distributionplot ( self , ** kwargs ) Get a distribution plot. Source code in ai2business/visualization/data_visualization.py def get_distributionplot ( self , ** kwargs ) -> None : \"\"\"Get a distribution plot.\"\"\" self . _product . add_product ( key = self . get_distributionplot , value = sns . displot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ), ) get_heatmapplot ( self , ** kwargs ) Get a heatmap plot. Source code in ai2business/visualization/data_visualization.py def get_heatmapplot ( self , ** kwargs ) -> None : \"\"\"Get a heatmap plot.\"\"\" self . _product . add_product ( key = self . get_cluster_mapplot , value = sns . heatmap ( data = self . df , ** kwargs ) . get_figure (), ) get_hexagonplot ( self , ** kwargs ) Get a hexagon plot. Source code in ai2business/visualization/data_visualization.py def get_hexagonplot ( self , ** kwargs ) -> None : \"\"\"Get a hexagon plot.\"\"\" self . _product . add_product ( key = self . get_hexagonplot , value = sns . jointplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , kind = \"hex\" , ** kwargs , ), ) get_histogramplot ( self , ** kwargs ) Get a histogram plot. Source code in ai2business/visualization/data_visualization.py def get_histogramplot ( self , ** kwargs ) -> None : \"\"\"Get a histogram plot.\"\"\" self . _product . add_product ( key = self . get_histogramplot , value = sns . histplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), ) get_kerneldensity_mapplot ( self , ** kwargs ) Get a kernel density map plot. Source code in ai2business/visualization/data_visualization.py def get_kerneldensity_mapplot ( self , ** kwargs ) -> None : \"\"\"Get a kernel density map plot.\"\"\" self . _product . add_product ( key = self . get_kerneldensity_mapplot , value = sns . jointplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , kind = \"kde\" , ** kwargs , ), ) get_lineplot ( self , ** kwargs ) Get a line plot. Source code in ai2business/visualization/data_visualization.py def get_lineplot ( self , ** kwargs ) -> None : \"\"\"Get a line plot.\"\"\" self . _product . add_product ( key = self . get_lineplot , value = sns . lineplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), ) get_nullity_bar ( self , n_columns = 0 , per_columns = 0.0 , ** kwargs ) A bar chart visualization of the nullity of the given DataFrame. Parameters: Name Type Description Default n_columns int The cap on the number of columns to include in the filtered DataFrame. Defaults to 0. 0 per_columns float The cap on the percentage fill of the columns in the filtered DataFrame. Defaults to 0.0. 0.0 Source code in ai2business/visualization/data_visualization.py def get_nullity_bar ( self , n_columns : int = 0 , per_columns : float = 0.0 , ** kwargs ) -> None : \"\"\"A bar chart visualization of the nullity of the given DataFrame. Args: n_columns (int, optional): The cap on the number of columns to include in the filtered DataFrame. Defaults to 0. per_columns (float, optional): The cap on the percentage fill of the columns in the filtered DataFrame. Defaults to 0.0. \"\"\" self . _product . add_product ( key = self . get_nullity_bar , value = mss . bar ( df = self . df , n = n_columns , p = per_columns , figsize = self . figsize , ** kwargs ) . get_figure (), ) get_nullity_dendrogram ( self , n_columns = 0 , per_columns = 0.0 , ** kwargs ) Generates the nullity dendrogram. Source code in ai2business/visualization/data_visualization.py def get_nullity_dendrogram ( self , n_columns : int = 0 , per_columns : float = 0.0 , ** kwargs ) -> None : \"\"\"Generates the nullity dendrogram.\"\"\" self . _product . add_product ( key = self . get_nullity_dendrogram , value = mss . dendrogram ( df = self . df , n = n_columns , p = per_columns , figsize = self . figsize , ** kwargs ) . get_figure (), ) get_nullity_heatmap ( self , n_columns = 0 , per_columns = 0.0 , cmap = 'seismic' , ** kwargs ) A heatmap chart visualization of the nullity of the given DataFrame. Parameters: Name Type Description Default n_columns int The cap on the number of columns to include in the filtered DataFrame. Defaults to 0. 0 per_columns float The cap on the percentage fill of the columns in the filtered DataFrame. Defaults to 0.0. 0.0 cmap str The color of the heatmap. Defaults to \"seismic\". 'seismic' Source code in ai2business/visualization/data_visualization.py def get_nullity_heatmap ( self , n_columns : int = 0 , per_columns : float = 0.0 , cmap : str = \"seismic\" , ** kwargs , ) -> None : \"\"\"A heatmap chart visualization of the nullity of the given DataFrame. Args: n_columns (int, optional): The cap on the number of columns to include in the filtered DataFrame. Defaults to 0. per_columns (float, optional): The cap on the percentage fill of the columns in the filtered DataFrame. Defaults to 0.0. cmap (str, optional): The color of the heatmap. Defaults to \"seismic\". \"\"\" self . _product . add_product ( key = self . get_nullity_heatmap , value = mss . heatmap ( df = self . df , n = n_columns , p = per_columns , figsize = self . figsize , cmap = cmap , ** kwargs , ) . get_figure (), ) get_nullity_matrix ( self , n_columns = 0 , per_columns = 0.0 , ** kwargs ) A bar matrix visualization of the nullity of the given DataFrame. Parameters: Name Type Description Default n_columns int The cap on the number of columns to include in the filtered DataFrame. Defaults to 0. 0 per_columns float The cap on the percentage fill of the columns in the filtered DataFrame. Defaults to 0.0. 0.0 Source code in ai2business/visualization/data_visualization.py def get_nullity_matrix ( self , n_columns : int = 0 , per_columns : float = 0.0 , ** kwargs ) -> None : \"\"\"A bar matrix visualization of the nullity of the given DataFrame. Args: n_columns (int, optional): The cap on the number of columns to include in the filtered DataFrame. Defaults to 0. per_columns (float, optional): The cap on the percentage fill of the columns in the filtered DataFrame. Defaults to 0.0. \"\"\" self . _product . add_product ( key = self . get_nullity_matrix , value = mss . matrix ( df = self . df , n = n_columns , p = per_columns , figsize = self . figsize , ** kwargs ) . get_figure (), ) get_pairmapplot ( self , ** kwargs ) Get a pair plot. Source code in ai2business/visualization/data_visualization.py def get_pairmapplot ( self , ** kwargs ) -> None : \"\"\"Get a pair plot.\"\"\" self . _product . add_product ( key = self . get_pairmapplot , value = sns . lmplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ), ) get_pointplot ( self , ** kwargs ) Get a point plot. Source code in ai2business/visualization/data_visualization.py def get_pointplot ( self , ** kwargs ) -> None : \"\"\"Get a point plot.\"\"\" self . _product . add_product ( key = self . get_pointplot , value = sns . pointplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), ) get_regression_mapplot ( self , ** kwargs ) Get a regression map plot. Source code in ai2business/visualization/data_visualization.py def get_regression_mapplot ( self , ** kwargs ) -> None : \"\"\"Get a regression map plot.\"\"\" self . _product . add_product ( key = self . get_regression_mapplot , value = sns . jointplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , kind = \"reg\" , ), ) get_regressionplot ( self , ** kwargs ) Get a regression plot. Source code in ai2business/visualization/data_visualization.py def get_regressionplot ( self , ** kwargs ) -> None : \"\"\"Get a regression plot.\"\"\" self . _product . add_product ( key = self . get_regressionplot , value = sns . lmplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ), ) get_relationalplot ( self , ** kwargs ) Get a relational plot. Source code in ai2business/visualization/data_visualization.py def get_relationalplot ( self , ** kwargs ) -> None : \"\"\"Get a relational plot.\"\"\" self . _product . add_product ( key = self . get_relationalplot , value = sns . relplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ), ) get_residualplot ( self , ** kwargs ) Get a residual plot. Source code in ai2business/visualization/data_visualization.py def get_residualplot ( self , ** kwargs ) -> None : \"\"\"Get a residual plot.\"\"\" self . _product . add_product ( key = self . get_residualplot , value = sns . residplot ( data = self . df , x = self . x_label , y = self . y_label , ** kwargs , ) . get_figure (), ) get_scatterplot ( self , ** kwargs ) Get a scatter plot. Source code in ai2business/visualization/data_visualization.py def get_scatterplot ( self , ** kwargs ) -> None : \"\"\"Get a scatter plot.\"\"\" self . _product . add_product ( key = self . get_scatterplot , value = sns . scatterplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), ) get_stripplot ( self , ** kwargs ) Get a strip plot. Source code in ai2business/visualization/data_visualization.py def get_stripplot ( self , ** kwargs ) -> None : \"\"\"Get a strip plot.\"\"\" self . _product . add_product ( key = self . get_stripplot , value = sns . stripplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), ) get_swarmplot ( self , ** kwargs ) Get a swarm plot. Source code in ai2business/visualization/data_visualization.py def get_swarmplot ( self , ** kwargs ) -> None : \"\"\"Get a swarm plot.\"\"\" self . _product . add_product ( key = self . get_swarmplot , value = sns . swarmplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), ) get_violinplot ( self , ** kwargs ) Get a violinplot plot. Source code in ai2business/visualization/data_visualization.py def get_violinplot ( self , ** kwargs ) -> None : \"\"\"Get a violinplot plot.\"\"\" self . _product . add_product ( key = self . get_violinplot , value = sns . violinplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), ) reset ( self ) Reset the product to empty. Source code in ai2business/visualization/data_visualization.py def reset ( self ) -> None : \"\"\"Reset the product to empty.\"\"\" self . _product = DataVisualizationProduct () Kind of Visualization Styles Theme mode for seaborn. dark_mode ( grid = False ) Set the seaborn theme style to dark mode. Parameters: Name Type Description Default grid bool Activate grid mode for plot. Defaults to False. False Returns: Type Description <function set_theme at 0x7f075ce5e4c0> sns.set_theme: Environment setting function of seaborn. Source code in ai2business/visualization/style.py def dark_mode ( grid : bool = False ) -> sns . set_theme : \"\"\"Set the seaborn theme style to dark mode. Args: grid (bool, optional): Activate grid mode for plot. Defaults to False. Returns: sns.set_theme: Environment setting function of seaborn. \"\"\" if grid : return sns . set_theme ( style = \"darkgrid\" ) return sns . set_theme ( style = \"dark\" ) light_mode ( grid = False ) Set the seaborn theme style to light mode. Parameters: Name Type Description Default grid bool Activate grid mode for plot. Defaults to False. False Returns: Type Description <function set_theme at 0x7f075ce5e4c0> sns.set_theme: Environment setting function of seaborn. Source code in ai2business/visualization/style.py def light_mode ( grid : bool = False ) -> sns . set_theme : \"\"\"Set the seaborn theme style to light mode. Args: grid (bool, optional): Activate grid mode for plot. Defaults to False. Returns: sns.set_theme: Environment setting function of seaborn. \"\"\" if grid : return sns . set_theme ( style = \"whitegrid\" ) sns . set_theme ( style = \"white\" )","title":"Data Visualization"},{"location":"data_visualization_api/#api-of-the-visualization","text":"","title":"API of the Visualization"},{"location":"data_visualization_api/#visualization-of-data","text":"","title":"Visualization of Data"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization","text":"Data Visualization Module: Visualization of data and its first principal properties.","title":"ai2business.visualization.data_visualization"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization","text":"BuilderDataVisualization contains the abstract properties and methods. BuilderDataVisualization specifies the properties and methods for creating the different parts of the DesignerDataVisualization objects. Parameters: Name Type Description Default ABC class Helper class that provides a standard way to create an ABC using inheritance. required","title":"BuilderDataVisualization"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.data_figure","text":"Abstract property of data_figure.","title":"data_figure"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_boxenplot","text":"Abstract method of get_boxenplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_boxenplot ( self ) -> None : \"\"\"Abstract method of get_boxenplot.\"\"\"","title":"get_boxenplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_boxplot","text":"Abstract method of get_boxplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_boxplot ( self ) -> None : \"\"\"Abstract method of get_boxplot.\"\"\"","title":"get_boxplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_categoryplot","text":"Abstract method of get_categoryplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_categoryplot ( self ) -> None : \"\"\"Abstract method of get_categoryplot.\"\"\"","title":"get_categoryplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_cluster_mapplot","text":"Abstract method of get_cluster_mapplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_cluster_mapplot ( self ) -> None : \"\"\"Abstract method of get_cluster_mapplot.\"\"\"","title":"get_cluster_mapplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_complex_pairmapplot","text":"Abstract method of get_complex_pairmapplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_complex_pairmapplot ( self ) -> None : \"\"\"Abstract method of get_complex_pairmapplot.\"\"\"","title":"get_complex_pairmapplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_correlationpplot","text":"Abstract method of get_correlationpplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_correlationpplot ( self ) -> None : \"\"\"Abstract method of get_correlationpplot.\"\"\"","title":"get_correlationpplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_density_mapplot","text":"Abstract method of get_densitymapplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_density_mapplot ( self ) -> None : \"\"\"Abstract method of get_densitymapplot.\"\"\"","title":"get_density_mapplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_diagonal_correlationpplot","text":"Abstract method of get_diagonal_correlationpplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_diagonal_correlationpplot ( self ) -> None : \"\"\"Abstract method of get_diagonal_correlationpplot.\"\"\"","title":"get_diagonal_correlationpplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_distributionplot","text":"Abstract method of get_distributionplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_distributionplot ( self ) -> None : \"\"\"Abstract method of get_distributionplot.\"\"\"","title":"get_distributionplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_heatmapplot","text":"Abstract method of get_heatmapp. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_heatmapplot ( self ) -> None : \"\"\"Abstract method of get_heatmapp.\"\"\"","title":"get_heatmapplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_hexagonplot","text":"Abstract method of get_hexagonplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_hexagonplot ( self ) -> None : \"\"\"Abstract method of get_hexagonplot.\"\"\"","title":"get_hexagonplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_histogramplot","text":"Abstract method of get_histogramplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_histogramplot ( self ) -> None : \"\"\"Abstract method of get_histogramplot.\"\"\"","title":"get_histogramplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_kerneldensity_mapplot","text":"Abstract method of get_kerneldensity_mapplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_kerneldensity_mapplot ( self ) -> None : \"\"\"Abstract method of get_kerneldensity_mapplot.\"\"\"","title":"get_kerneldensity_mapplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_lineplot","text":"Abstract method of get_lineplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_lineplot ( self ) -> None : \"\"\"Abstract method of get_lineplot.\"\"\"","title":"get_lineplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_nullity_bar","text":"Abstract method of get_nullity_bar. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_nullity_bar ( self ) -> None : \"\"\"Abstract method of get_nullity_bar.\"\"\"","title":"get_nullity_bar()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_nullity_dendrogram","text":"Abstract method of get_nullity_dendrogram. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_nullity_dendrogram ( self ) -> None : \"\"\"Abstract method of get_nullity_dendrogram.\"\"\"","title":"get_nullity_dendrogram()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_nullity_heatmap","text":"Abstract method of get_nullity_heatmap. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_nullity_heatmap ( self ) -> None : \"\"\"Abstract method of get_nullity_heatmap.\"\"\"","title":"get_nullity_heatmap()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_nullity_matrix","text":"Abstract method of get_nullity_matrix. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_nullity_matrix ( self ) -> None : \"\"\"Abstract method of get_nullity_matrix.\"\"\"","title":"get_nullity_matrix()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_pairmapplot","text":"Abstract method of get_pairmapplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_pairmapplot ( self ) -> None : \"\"\"Abstract method of get_pairmapplot.\"\"\"","title":"get_pairmapplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_pointplot","text":"Abstract method of get_pointplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_pointplot ( self ) -> None : \"\"\"Abstract method of get_pointplot.\"\"\"","title":"get_pointplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_regression_mapplot","text":"Abstract method of get_marginalplot. Source code in ai2business/visualization/data_visualization.py def get_regression_mapplot ( self ) -> None : \"\"\"Abstract method of get_marginalplot.\"\"\"","title":"get_regression_mapplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_regressionplot","text":"Abstract method of get_regressionplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_regressionplot ( self ) -> None : \"\"\"Abstract method of get_regressionplot.\"\"\"","title":"get_regressionplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_relationalplot","text":"Abstract method of get_relationalplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_relationalplot ( self ) -> None : \"\"\"Abstract method of get_relationalplot.\"\"\"","title":"get_relationalplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_residualplot","text":"Abstract method of get_residualplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_residualplot ( self ) -> None : \"\"\"Abstract method of get_residualplot.\"\"\"","title":"get_residualplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_scatterplot","text":"Abstract method of get_scatterplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_scatterplot ( self ) -> None : \"\"\"Abstract method of get_scatterplot.\"\"\"","title":"get_scatterplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_stripplot","text":"Abstract method of get_stripplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_stripplot ( self ) -> None : \"\"\"Abstract method of get_stripplot.\"\"\"","title":"get_stripplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_swarmplot","text":"Abstract method of get_swarmplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_swarmplot ( self ) -> None : \"\"\"Abstract method of get_swarmplot.\"\"\"","title":"get_swarmplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.get_violinplot","text":"Abstract method of get_violinplot. Source code in ai2business/visualization/data_visualization.py @abstractmethod def get_violinplot ( self ) -> None : \"\"\"Abstract method of get_violinplot.\"\"\"","title":"get_violinplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.BuilderDataVisualization.reset","text":"Abstract method of reset. Source code in ai2business/visualization/data_visualization.py @abstractmethod def reset ( self ) -> None : \"\"\"Abstract method of reset.\"\"\"","title":"reset()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization","text":"DataVisualization is in charge of executing the functions. During the execution, DataVisualization can construct several product variations using the same building steps. General introduction into using plot-functions! >>> from ai2business.macros import oneliner as one >>> from ai2business.visualization import data_visualization as dav >>> df_dict_years = one . TrendSearch . four_step_search ( keyword_list = [ \"2017\" , \"2018\" , \"2019\" , \"2020\" , \"2021\" , ]) >>> data = dav . DataVisualization () >>> builder = dav . DesignerDataVisualization ( df_dict_years [ \"get_interest_over_time\" ]) >>> data . builder = builder # Here any kind of plot function can be called >>> data . lineplot () >>> builder . data_figure . save_all_figures ( folder = folder ) Activating hidden functions of the seaborn -module! Due to the seaborn module's complexity, only the significant four variables (x_label, y_label, hue, palette) are defined in DesignerDataVisualization . However, all other seaborn-module options can be individual activated by **kwargs in each function separately.","title":"DataVisualization"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.builder","text":"Builder as a property with value None. Returns: Type Description BuilderDataVisualization BuilderDataVisualization: A builder class, that contains the abstract properties and methods.","title":"builder"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.initialization_figure","text":"Initialization of the figure. Reminder It is very important that if figure has to be first deleted, otherwise the figures can be overlapped.","title":"initialization_figure"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.__init__","text":"Initialize a fresh and empty builder. Source code in ai2business/visualization/data_visualization.py def __init__ ( self ) -> None : \"\"\"Initialize a fresh and empty builder.\"\"\" self . _builder = None","title":"__init__()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.boxplot","text":"Create a given box plot based on seaborn. Parameters: Name Type Description Default multiboxen bool Allows to draw multi boxen per object. Defaults to False. False Source code in ai2business/visualization/data_visualization.py def boxplot ( self , multiboxen : bool = False , ** kwargs ) -> None : \"\"\"Create a given box plot based on seaborn. Args: multiboxen (bool, optional): Allows to draw multi boxen per object. Defaults to False. \"\"\" self . initialization_figure if multiboxen : self . builder . get_boxenplot ( ** kwargs ) else : self . builder . get_boxplot ( ** kwargs )","title":"boxplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.categoryplot","text":"Create a given category plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def categoryplot ( self , ** kwargs ) -> None : \"\"\"Create a given category plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_categoryplot ( ** kwargs )","title":"categoryplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.clustermap","text":"Create a given cluster map based on seaborn. Parameters: Name Type Description Default method str Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". 'pearson' min_periods int Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. 1 Source code in ai2business/visualization/data_visualization.py def clustermap ( self , method : str = \"pearson\" , min_periods : int = 1 , ** kwargs ) -> None : \"\"\"Create a given cluster map based on seaborn. Args: method (str, optional): Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". min_periods (int, optional): Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. \"\"\" self . initialization_figure self . builder . get_cluster_mapplot ( method = method , min_periods = min_periods , ** kwargs )","title":"clustermap()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.correlationmap","text":"Create a given correlation map based on seaborn. Parameters: Name Type Description Default diagonal bool Only the lower diagonal elements will be plotted. Defaults to False. False method str Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". 'pearson' min_periods int Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. 1 Source code in ai2business/visualization/data_visualization.py def correlationmap ( self , diagonal : bool = False , method : str = \"pearson\" , min_periods : int = 1 , ** kwargs , ) -> None : \"\"\"Create a given correlation map based on seaborn. Args: diagonal (bool, optional): Only the lower diagonal elements will be plotted. Defaults to False. method (str, optional): Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". min_periods (int, optional): Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. \"\"\" self . initialization_figure if diagonal : self . builder . get_diagonal_correlationpplot ( method = method , min_periods = min_periods , ** kwargs ) else : self . builder . get_correlationpplot ( method = method , min_periods = min_periods , ** kwargs )","title":"correlationmap()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.densitymap","text":"Create a given density map based on seaborn. Parameters: Name Type Description Default kde bool Plots the density as kernel density. Defaults to False. False Source code in ai2business/visualization/data_visualization.py def densitymap ( self , kde : bool = False , ** kwargs ) -> None : \"\"\"Create a given density map based on seaborn. Args: kde (bool, optional): Plots the density as kernel density. Defaults to False. \"\"\" self . initialization_figure if kde : self . builder . get_kerneldensity_mapplot ( ** kwargs ) else : self . builder . get_density_mapplot ( ** kwargs )","title":"densitymap()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.distributionplot","text":"Create a given distribution plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def distributionplot ( self , ** kwargs ) -> None : \"\"\"Create a given distribution plot based on seaborn.\"\"\" self . builder . get_distributionplot ( ** kwargs )","title":"distributionplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.heatmap","text":"Create a given heat map based on seaborn. Source code in ai2business/visualization/data_visualization.py def heatmap ( self , ** kwargs ) -> None : \"\"\"Create a given heat map based on seaborn.\"\"\" self . initialization_figure self . builder . get_heatmapplot ( ** kwargs )","title":"heatmap()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.hexagonplot","text":"Create a given hexagon plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def hexagonplot ( self , ** kwargs ) -> None : \"\"\"Create a given hexagon plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_hexagonplot ( ** kwargs )","title":"hexagonplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.histogramplot","text":"Create a given histogram plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def histogramplot ( self , ** kwargs ) -> None : \"\"\"Create a given histogram plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_histogramplot ( ** kwargs )","title":"histogramplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.lineplot","text":"Create a given line plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def lineplot ( self , ** kwargs ) -> None : \"\"\"Create a given line plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_lineplot ( ** kwargs )","title":"lineplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.pairmap","text":"Create a pair map based on seaborn. Parameters: Name Type Description Default complex bool Turn on the get_complex_pairmapplot . Defaults to False. False Source code in ai2business/visualization/data_visualization.py def pairmap ( self , complex : bool = False , ** kwargs ): \"\"\"Create a pair map based on seaborn. Args: complex (bool, optional): Turn on the `get_complex_pairmapplot`. Defaults to False. \"\"\" self . initialization_figure if complex : self . builder . get_complex_pairmapplot ( ** kwargs ) else : self . builder . get_pairmapplot ( ** kwargs )","title":"pairmap()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.pointplot","text":"Create a given point plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def pointplot ( self , ** kwargs ) -> None : \"\"\"Create a given point plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_pointplot ( ** kwargs )","title":"pointplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.regressionplot","text":"Create a given regression plot based on seaborn. Parameters: Name Type Description Default map bool Creates the regression plot as map. Defaults to False. False Source code in ai2business/visualization/data_visualization.py def regressionplot ( self , map : bool = False , ** kwargs ) -> None : \"\"\"Create a given regression plot based on seaborn. Args: map (bool, optional): Creates the regression plot as map. Defaults to False. \"\"\" self . initialization_figure if map : self . builder . get_regression_mapplot ( ** kwargs ) else : self . builder . get_regressionplot ( ** kwargs )","title":"regressionplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.relationalplot","text":"Create a given relational plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def relationalplot ( self , ** kwargs ) -> None : \"\"\"Create a given relational plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_relationalplot ( ** kwargs )","title":"relationalplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.residualplot","text":"Create a given residual plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def residualplot ( self , ** kwargs ) -> None : \"\"\"Create a given residual plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_residualplot ( ** kwargs )","title":"residualplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.scatterplot","text":"Create a given scatter plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def scatterplot ( self , ** kwargs ) -> None : \"\"\"Create a given scatter plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_scatterplot ( ** kwargs )","title":"scatterplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.stripplot","text":"Create a given strip plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def stripplot ( self , ** kwargs ) -> None : \"\"\"Create a given strip plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_stripplot ( ** kwargs )","title":"stripplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.swarmplot","text":"Create a given swarm plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def swarmplot ( self , ** kwargs ) -> None : \"\"\"Create a given swarm plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_swarmplot ( ** kwargs )","title":"swarmplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.violinplot","text":"Create a given violin plot based on seaborn. Source code in ai2business/visualization/data_visualization.py def violinplot ( self , ** kwargs ) -> None : \"\"\"Create a given violin plot based on seaborn.\"\"\" self . initialization_figure self . builder . get_violinplot ( ** kwargs )","title":"violinplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualization.visual_missing_data","text":"Visualizing possible missing data. Parameters: Name Type Description Default n_columns int The cap on the number of columns to include in the filtered DataFrame. Defaults to 0. 0 per_columns float The cap on the percentage fill of the columns in the filtered DataFrame. Defaults to 0.0. 0.0 cmap str The color of the heatmap. Defaults to \"seismic\". 'seismic' Visualization of nullity results, respectively, missing values! Possible missing data will be visualized by: nullity matrix highlights out patterns and structures in data completion. nullity bar shows the available data as a series of single bars. nullity heatmap point out the correlation between the presence and absence data. nullity dendrogram visualize the correlate variable completion. For more information see: ResidentMario/missingno Source code in ai2business/visualization/data_visualization.py def visual_missing_data ( self , n_columns : int = 0 , per_columns : float = 0.0 , cmap : str = \"seismic\" , ** kwargs , ) -> None : \"\"\"Visualizing possible missing data. Args: n_columns (int, optional): The cap on the number of columns to include in the filtered DataFrame. Defaults to 0. per_columns (float, optional): The cap on the percentage fill of the columns in the filtered DataFrame. Defaults to 0.0. cmap (str, optional): The color of the heatmap. Defaults to \"seismic\". !!! note \"Visualization of nullity results, respectively, missing values!\" Possible missing data will be visualized by: 1. nullity matrix highlights out patterns and structures in data completion. ![Placeholder](https://github.com/AI2Business/ai2business/blob/main/docs/images/nullity/get_nullity_matrix_bc6141f519e4eea9e6a0d5fe84115d65.png?raw=true){: loading=lazy } 2. nullity bar shows the available data as a series of single bars. ![Placeholder](https://github.com/AI2Business/ai2business/blob/main/docs/images/nullity/get_nullity_bar_9918e972a769781d322ba1e18fe8f86c.png?raw=true){: loading=lazy } 3. nullity heatmap point out the correlation between the presence and absence data. ![Placeholder](https://github.com/AI2Business/ai2business/blob/main/docs/images/nullity/get_nullity_heatmap_d46e69f559bd7b713b7a6c3ceb0f9968.png?raw=true){: loading=lazy } 4. nullity dendrogram visualize the correlate variable completion. ![Placeholder](https://github.com/AI2Business/ai2business/blob/main/docs/images/nullity/get_nullity_dendrogram_15a148832cd43d6d249d56671a0fab6f.png?raw=true){: loading=lazy } For more information see: [https://github.com/ResidentMario/missingno](https://github.com/ResidentMario/missingno) \"\"\" self . builder . get_nullity_matrix ( n_columns = n_columns , per_columns = per_columns , ** kwargs ) self . builder . get_nullity_bar ( n_columns = n_columns , per_columns = per_columns , ** kwargs ) self . builder . get_nullity_heatmap ( n_columns = n_columns , per_columns = per_columns , cmap = cmap , ** kwargs ) self . builder . get_nullity_dendrogram ( n_columns = n_columns , per_columns = per_columns , ** kwargs )","title":"visual_missing_data()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualizationProduct","text":"DataVisualizationProduct contains the dictionary and the return value of it.","title":"DataVisualizationProduct"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualizationProduct.list_product_parts","text":"List of the product parts in the dictionary.","title":"list_product_parts"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualizationProduct.return_product","text":"Returns the product as a dictionary Returns: Type Description dict dict: The product dictionary contains the product and ist function name as key .","title":"return_product"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualizationProduct.__init__","text":"Initialization of DataVisualizationProduct. Source code in ai2business/visualization/data_visualization.py def __init__ ( self ) -> None : \"\"\"Initialization of DataVisualizationProduct.\"\"\" self . product_parts = {}","title":"__init__()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualizationProduct.add_product","text":"Add the components of the data visualization to the dictionary. Parameters: Name Type Description Default key Callable Used data visualization search function required value <function subplot at 0x7f0766509160> Return value as matplotlib -class of subplots. required Source code in ai2business/visualization/data_visualization.py def add_product ( self , key : Callable , value : plt . subplot ) -> None : \"\"\"Add the components of the data visualization to the dictionary. Args: key (Callable): Used data visualization search function value (plt.subplot): Return value as `matplotlib`-class of subplots. \"\"\" self . product_parts [ key . __name__ ] = value","title":"add_product()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DataVisualizationProduct.save_all_figures","text":"Saving all figures of the product dictionary. All figures will be saved at . or in subfoalder as a combination of the current key and a 16 Bytes hex-token. Parameters: Name Type Description Default folder str Name of the subfolder, which will be created if not exists. Defaults to None. None Source code in ai2business/visualization/data_visualization.py def save_all_figures ( self , folder : str = None ): \"\"\"Saving all figures of the product dictionary. All figures will be saved at `.` or in subfoalder as a combination of the current `key` and a 16 Bytes hex-token. Args: folder (str, optional): Name of the subfolder, which will be created if not exists. Defaults to None. \"\"\" path = Path ( \".\" ) for key , value in self . product_parts . items (): if folder : path = Path ( folder ) path . mkdir ( exist_ok = True ) value . savefig ( path . joinpath ( f \" { key } _ { token_hex ( 16 ) } .png\" ))","title":"save_all_figures()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization","text":"DesignerDataVisualization contains the specific implementation of BuilderDataVisualization . DesignerDataVisualization contains the specific implementation of BuilderDataVisualization based on the external libraries: missingno seaborn Parameters: Name Type Description Default BuilderDataVisualization class Abstract class that provides the implementations of the properties and methods. required","title":"DesignerDataVisualization"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.data_figure","text":"Return the results of the figure class of the data visualization. Returns: Type Description DataVisualizationProduct DataVisualizationProduct (class): DataVisualizationProduct contains the dictionary and the return value of it.","title":"data_figure"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.__init__","text":"Initialization of DesignerDataVisualization. Parameters: Name Type Description Default df DataFrame pandas DataFrame. required dark_mode bool Switch to dark mode. Defaults to False. False grid bool Activate grids in plots. Defaults to False. False figsize tuple Size of the figure. Defaults to (12, 8). (12, 8) dpi int Resolution of the figure. Defaults to 300. 300 x_label str Name of the column name for the x-axis . Defaults to None. None y_label str Name of the column name for the y-axis . Defaults to None. None hue str Name of the column name for the seperating the results to the uniques once. Defaults to None. None palette Union[str, list, dict] The str , list , or dict of colors or continuous colormap, which defines the color palette. Defaults to None. None Appearance-Modes Light-Mode without Grid Light-Mode with Grid Dark-Mode without Grid Dark-Mode with Grid Figuere Size Due to the default settings of missingno , the figure size has to be defined in advance. Source code in ai2business/visualization/data_visualization.py def __init__ ( self , df : pd . DataFrame , dark_mode : bool = False , grid : bool = False , figsize : tuple = ( 12 , 8 ), dpi : int = 300 , x_label : str = None , y_label : str = None , hue : str = None , palette : Union [ str , list , dict ] = None , ) -> None : \"\"\"Initialization of DesignerDataVisualization. Args: df (pd.DataFrame): pandas DataFrame. dark_mode (bool, optional): Switch to dark mode. Defaults to False. grid (bool, optional): Activate grids in plots. Defaults to False. figsize (tuple, optional): Size of the figure. Defaults to (12, 8). dpi (int, optional): Resolution of the figure. Defaults to 300. x_label (str, optional): Name of the column name for the `x-axis`. Defaults to None. y_label (str, optional): Name of the column name for the `y-axis`. Defaults to None. hue (str, optional): Name of the column name for the seperating the results to the uniques once. Defaults to None. palette (Union[str, list, dict], optional): The `str`, `list`, or `dict` of colors or continuous colormap, which defines the color palette. Defaults to None. !!! note \"Appearance-Modes\" 1. Light-Mode without Grid ![Placeholder](https://github.com/AI2Business/ai2business/blob/main/docs/images/appearance/get_lineplot_805fabb7bbea3a9e807d3c2444bbaa4e.png?raw=true){: loading=lazy } 2. Light-Mode with Grid ![Placeholder](https://github.com/AI2Business/ai2business/blob/main/docs/images/appearance/get_lineplot_520cb6360c9fb9c61977a303213f1340.png?raw=true){: loading=lazy } 3. Dark-Mode without Grid ![Placeholder](https://github.com/AI2Business/ai2business/blob/main/docs/images/appearance/get_lineplot_6ef44df80722a1c466d0a4c47b8f2433.png?raw=true){: loading=lazy } 4. Dark-Mode with Grid ![Placeholder](https://github.com/AI2Business/ai2business/blob/main/docs/images/appearance/get_lineplot_65d5fcb713a18d25b1c1f6b504836776.png?raw=true){: loading=lazy } !!! note \"Figuere Size\" Due to the default settings of `missingno`, the figure size has to be defined in advance. \"\"\" self . df = df self . x_label = x_label self . y_label = y_label self . hue = hue self . palette = palette self . figsize = figsize _ = plt . figure ( figsize = self . figsize , dpi = dpi ) if dark_mode : self . style = style . dark_mode ( grid = grid ) else : self . style = style . light_mode ( grid = grid ) self . reset ()","title":"__init__()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_boxenplot","text":"Get a multi box plot. Source code in ai2business/visualization/data_visualization.py def get_boxenplot ( self , ** kwargs ) -> None : \"\"\"Get a multi box plot.\"\"\" self . _product . add_product ( key = self . get_boxenplot , value = sns . boxenplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), )","title":"get_boxenplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_boxplot","text":"Get a box plot. Source code in ai2business/visualization/data_visualization.py def get_boxplot ( self , ** kwargs ) -> None : \"\"\"Get a box plot.\"\"\" self . _product . add_product ( key = self . get_boxplot , value = sns . boxplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), )","title":"get_boxplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_categoryplot","text":"Get a category plot. Source code in ai2business/visualization/data_visualization.py def get_categoryplot ( self , ** kwargs ) -> None : \"\"\"Get a category plot.\"\"\" self . _product . add_product ( key = self . get_categoryplot , value = sns . catplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ), )","title":"get_categoryplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_cluster_mapplot","text":"Get a cluster map plot. Parameters: Name Type Description Default method str Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". 'pearson' min_periods int Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. 1 Source code in ai2business/visualization/data_visualization.py def get_cluster_mapplot ( self , method : str = \"pearson\" , min_periods : int = 1 , ** kwargs ) -> None : \"\"\"Get a cluster map plot. Args: method (str, optional): Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". min_periods (int, optional): Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. \"\"\" self . _product . add_product ( key = self . get_cluster_mapplot , value = sns . clustermap ( data = self . df . corr ( method = method , min_periods = min_periods ), ** kwargs ), )","title":"get_cluster_mapplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_complex_pairmapplot","text":"Get a complex pair plot. About Complex Pair Plots The complex pair consits of three different types of subplots: A distribution plot on the diagonal. A kernel distribution map on the lower non-diagonal. A scatter plot in combination with a linear regression on the upper non-diagonal. Source code in ai2business/visualization/data_visualization.py def get_complex_pairmapplot ( self , ** kwargs ) -> None : \"\"\"Get a complex pair plot. !!! note \"About Complex Pair Plots\" The complex pair consits of three different types of subplots: 1. A distribution plot on the diagonal. 2. A kernel distribution map on the lower non-diagonal. 3. A scatter plot in combination with a linear regression on the upper non-diagonal. \"\"\" grid = sns . PairGrid ( self . df , hue = self . hue , palette = self . palette , ** kwargs ) grid . map_upper ( sns . regplot ) grid . map_lower ( sns . kdeplot ) grid . map_diag ( sns . kdeplot ) self . _product . add_product ( key = self . get_pairmapplot , value = grid , )","title":"get_complex_pairmapplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_correlationpplot","text":"Get a correlation map plot. Parameters: Name Type Description Default method str Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". 'pearson' min_periods int Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. 1 Source code in ai2business/visualization/data_visualization.py def get_correlationpplot ( self , method : str = \"pearson\" , min_periods : int = 1 , ** kwargs ) -> None : \"\"\"Get a correlation map plot. Args: method (str, optional): Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". min_periods (int, optional): Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. \"\"\" self . _product . add_product ( key = self . get_correlationpplot , value = sns . relplot ( data = self . df . corr ( method = method , min_periods = min_periods ), x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ), )","title":"get_correlationpplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_density_mapplot","text":"Get a density map plot. Source code in ai2business/visualization/data_visualization.py def get_density_mapplot ( self , ** kwargs ) -> None : \"\"\"Get a density map plot.\"\"\" self . _product . add_product ( key = self . get_density_mapplot , value = sns . jointplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , kind = \"kde\" , ), )","title":"get_density_mapplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_diagonal_correlationpplot","text":"Get a correlation map plot with lower non-diagonal elements. Parameters: Name Type Description Default method str Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". 'pearson' min_periods int Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. 1 Source code in ai2business/visualization/data_visualization.py def get_diagonal_correlationpplot ( self , method : str = \"pearson\" , min_periods : int = 1 , ** kwargs ) -> None : \"\"\"Get a correlation map plot with lower non-diagonal elements. Args: method (str, optional): Method of the correlation type ('pearson', 'kendall', 'spearman' or callable method of correlation). Defaults to \"pearson\". min_periods (int, optional): Minimum number of observations required per pair of columns to have a valid result. Defaults to 1. \"\"\" _corr = self . df . corr ( method = method , min_periods = min_periods ) _mask = np . triu ( np . ones_like ( _corr , dtype = bool )) self . _product . add_product ( key = self . get_cluster_mapplot , value = sns . heatmap ( data = _corr , mask = _mask , ** kwargs ) . get_figure (), )","title":"get_diagonal_correlationpplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_distributionplot","text":"Get a distribution plot. Source code in ai2business/visualization/data_visualization.py def get_distributionplot ( self , ** kwargs ) -> None : \"\"\"Get a distribution plot.\"\"\" self . _product . add_product ( key = self . get_distributionplot , value = sns . displot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ), )","title":"get_distributionplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_heatmapplot","text":"Get a heatmap plot. Source code in ai2business/visualization/data_visualization.py def get_heatmapplot ( self , ** kwargs ) -> None : \"\"\"Get a heatmap plot.\"\"\" self . _product . add_product ( key = self . get_cluster_mapplot , value = sns . heatmap ( data = self . df , ** kwargs ) . get_figure (), )","title":"get_heatmapplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_hexagonplot","text":"Get a hexagon plot. Source code in ai2business/visualization/data_visualization.py def get_hexagonplot ( self , ** kwargs ) -> None : \"\"\"Get a hexagon plot.\"\"\" self . _product . add_product ( key = self . get_hexagonplot , value = sns . jointplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , kind = \"hex\" , ** kwargs , ), )","title":"get_hexagonplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_histogramplot","text":"Get a histogram plot. Source code in ai2business/visualization/data_visualization.py def get_histogramplot ( self , ** kwargs ) -> None : \"\"\"Get a histogram plot.\"\"\" self . _product . add_product ( key = self . get_histogramplot , value = sns . histplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), )","title":"get_histogramplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_kerneldensity_mapplot","text":"Get a kernel density map plot. Source code in ai2business/visualization/data_visualization.py def get_kerneldensity_mapplot ( self , ** kwargs ) -> None : \"\"\"Get a kernel density map plot.\"\"\" self . _product . add_product ( key = self . get_kerneldensity_mapplot , value = sns . jointplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , kind = \"kde\" , ** kwargs , ), )","title":"get_kerneldensity_mapplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_lineplot","text":"Get a line plot. Source code in ai2business/visualization/data_visualization.py def get_lineplot ( self , ** kwargs ) -> None : \"\"\"Get a line plot.\"\"\" self . _product . add_product ( key = self . get_lineplot , value = sns . lineplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), )","title":"get_lineplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_nullity_bar","text":"A bar chart visualization of the nullity of the given DataFrame. Parameters: Name Type Description Default n_columns int The cap on the number of columns to include in the filtered DataFrame. Defaults to 0. 0 per_columns float The cap on the percentage fill of the columns in the filtered DataFrame. Defaults to 0.0. 0.0 Source code in ai2business/visualization/data_visualization.py def get_nullity_bar ( self , n_columns : int = 0 , per_columns : float = 0.0 , ** kwargs ) -> None : \"\"\"A bar chart visualization of the nullity of the given DataFrame. Args: n_columns (int, optional): The cap on the number of columns to include in the filtered DataFrame. Defaults to 0. per_columns (float, optional): The cap on the percentage fill of the columns in the filtered DataFrame. Defaults to 0.0. \"\"\" self . _product . add_product ( key = self . get_nullity_bar , value = mss . bar ( df = self . df , n = n_columns , p = per_columns , figsize = self . figsize , ** kwargs ) . get_figure (), )","title":"get_nullity_bar()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_nullity_dendrogram","text":"Generates the nullity dendrogram. Source code in ai2business/visualization/data_visualization.py def get_nullity_dendrogram ( self , n_columns : int = 0 , per_columns : float = 0.0 , ** kwargs ) -> None : \"\"\"Generates the nullity dendrogram.\"\"\" self . _product . add_product ( key = self . get_nullity_dendrogram , value = mss . dendrogram ( df = self . df , n = n_columns , p = per_columns , figsize = self . figsize , ** kwargs ) . get_figure (), )","title":"get_nullity_dendrogram()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_nullity_heatmap","text":"A heatmap chart visualization of the nullity of the given DataFrame. Parameters: Name Type Description Default n_columns int The cap on the number of columns to include in the filtered DataFrame. Defaults to 0. 0 per_columns float The cap on the percentage fill of the columns in the filtered DataFrame. Defaults to 0.0. 0.0 cmap str The color of the heatmap. Defaults to \"seismic\". 'seismic' Source code in ai2business/visualization/data_visualization.py def get_nullity_heatmap ( self , n_columns : int = 0 , per_columns : float = 0.0 , cmap : str = \"seismic\" , ** kwargs , ) -> None : \"\"\"A heatmap chart visualization of the nullity of the given DataFrame. Args: n_columns (int, optional): The cap on the number of columns to include in the filtered DataFrame. Defaults to 0. per_columns (float, optional): The cap on the percentage fill of the columns in the filtered DataFrame. Defaults to 0.0. cmap (str, optional): The color of the heatmap. Defaults to \"seismic\". \"\"\" self . _product . add_product ( key = self . get_nullity_heatmap , value = mss . heatmap ( df = self . df , n = n_columns , p = per_columns , figsize = self . figsize , cmap = cmap , ** kwargs , ) . get_figure (), )","title":"get_nullity_heatmap()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_nullity_matrix","text":"A bar matrix visualization of the nullity of the given DataFrame. Parameters: Name Type Description Default n_columns int The cap on the number of columns to include in the filtered DataFrame. Defaults to 0. 0 per_columns float The cap on the percentage fill of the columns in the filtered DataFrame. Defaults to 0.0. 0.0 Source code in ai2business/visualization/data_visualization.py def get_nullity_matrix ( self , n_columns : int = 0 , per_columns : float = 0.0 , ** kwargs ) -> None : \"\"\"A bar matrix visualization of the nullity of the given DataFrame. Args: n_columns (int, optional): The cap on the number of columns to include in the filtered DataFrame. Defaults to 0. per_columns (float, optional): The cap on the percentage fill of the columns in the filtered DataFrame. Defaults to 0.0. \"\"\" self . _product . add_product ( key = self . get_nullity_matrix , value = mss . matrix ( df = self . df , n = n_columns , p = per_columns , figsize = self . figsize , ** kwargs ) . get_figure (), )","title":"get_nullity_matrix()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_pairmapplot","text":"Get a pair plot. Source code in ai2business/visualization/data_visualization.py def get_pairmapplot ( self , ** kwargs ) -> None : \"\"\"Get a pair plot.\"\"\" self . _product . add_product ( key = self . get_pairmapplot , value = sns . lmplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ), )","title":"get_pairmapplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_pointplot","text":"Get a point plot. Source code in ai2business/visualization/data_visualization.py def get_pointplot ( self , ** kwargs ) -> None : \"\"\"Get a point plot.\"\"\" self . _product . add_product ( key = self . get_pointplot , value = sns . pointplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), )","title":"get_pointplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_regression_mapplot","text":"Get a regression map plot. Source code in ai2business/visualization/data_visualization.py def get_regression_mapplot ( self , ** kwargs ) -> None : \"\"\"Get a regression map plot.\"\"\" self . _product . add_product ( key = self . get_regression_mapplot , value = sns . jointplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , kind = \"reg\" , ), )","title":"get_regression_mapplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_regressionplot","text":"Get a regression plot. Source code in ai2business/visualization/data_visualization.py def get_regressionplot ( self , ** kwargs ) -> None : \"\"\"Get a regression plot.\"\"\" self . _product . add_product ( key = self . get_regressionplot , value = sns . lmplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ), )","title":"get_regressionplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_relationalplot","text":"Get a relational plot. Source code in ai2business/visualization/data_visualization.py def get_relationalplot ( self , ** kwargs ) -> None : \"\"\"Get a relational plot.\"\"\" self . _product . add_product ( key = self . get_relationalplot , value = sns . relplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ), )","title":"get_relationalplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_residualplot","text":"Get a residual plot. Source code in ai2business/visualization/data_visualization.py def get_residualplot ( self , ** kwargs ) -> None : \"\"\"Get a residual plot.\"\"\" self . _product . add_product ( key = self . get_residualplot , value = sns . residplot ( data = self . df , x = self . x_label , y = self . y_label , ** kwargs , ) . get_figure (), )","title":"get_residualplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_scatterplot","text":"Get a scatter plot. Source code in ai2business/visualization/data_visualization.py def get_scatterplot ( self , ** kwargs ) -> None : \"\"\"Get a scatter plot.\"\"\" self . _product . add_product ( key = self . get_scatterplot , value = sns . scatterplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), )","title":"get_scatterplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_stripplot","text":"Get a strip plot. Source code in ai2business/visualization/data_visualization.py def get_stripplot ( self , ** kwargs ) -> None : \"\"\"Get a strip plot.\"\"\" self . _product . add_product ( key = self . get_stripplot , value = sns . stripplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), )","title":"get_stripplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_swarmplot","text":"Get a swarm plot. Source code in ai2business/visualization/data_visualization.py def get_swarmplot ( self , ** kwargs ) -> None : \"\"\"Get a swarm plot.\"\"\" self . _product . add_product ( key = self . get_swarmplot , value = sns . swarmplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), )","title":"get_swarmplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.get_violinplot","text":"Get a violinplot plot. Source code in ai2business/visualization/data_visualization.py def get_violinplot ( self , ** kwargs ) -> None : \"\"\"Get a violinplot plot.\"\"\" self . _product . add_product ( key = self . get_violinplot , value = sns . violinplot ( data = self . df , x = self . x_label , y = self . y_label , hue = self . hue , palette = self . palette , ** kwargs , ) . get_figure (), )","title":"get_violinplot()"},{"location":"data_visualization_api/#ai2business.visualization.data_visualization.DesignerDataVisualization.reset","text":"Reset the product to empty. Source code in ai2business/visualization/data_visualization.py def reset ( self ) -> None : \"\"\"Reset the product to empty.\"\"\" self . _product = DataVisualizationProduct ()","title":"reset()"},{"location":"data_visualization_api/#kind-of-visualization-styles","text":"","title":"Kind of Visualization Styles"},{"location":"data_visualization_api/#ai2business.visualization.style","text":"Theme mode for seaborn.","title":"ai2business.visualization.style"},{"location":"data_visualization_api/#ai2business.visualization.style.dark_mode","text":"Set the seaborn theme style to dark mode. Parameters: Name Type Description Default grid bool Activate grid mode for plot. Defaults to False. False Returns: Type Description <function set_theme at 0x7f075ce5e4c0> sns.set_theme: Environment setting function of seaborn. Source code in ai2business/visualization/style.py def dark_mode ( grid : bool = False ) -> sns . set_theme : \"\"\"Set the seaborn theme style to dark mode. Args: grid (bool, optional): Activate grid mode for plot. Defaults to False. Returns: sns.set_theme: Environment setting function of seaborn. \"\"\" if grid : return sns . set_theme ( style = \"darkgrid\" ) return sns . set_theme ( style = \"dark\" )","title":"dark_mode()"},{"location":"data_visualization_api/#ai2business.visualization.style.light_mode","text":"Set the seaborn theme style to light mode. Parameters: Name Type Description Default grid bool Activate grid mode for plot. Defaults to False. False Returns: Type Description <function set_theme at 0x7f075ce5e4c0> sns.set_theme: Environment setting function of seaborn. Source code in ai2business/visualization/style.py def light_mode ( grid : bool = False ) -> sns . set_theme : \"\"\"Set the seaborn theme style to light mode. Args: grid (bool, optional): Activate grid mode for plot. Defaults to False. Returns: sns.set_theme: Environment setting function of seaborn. \"\"\" if grid : return sns . set_theme ( style = \"whitegrid\" ) sns . set_theme ( style = \"white\" )","title":"light_mode()"},{"location":"deep_learning_api/","text":"API of the Auto Machine Learning Auto Machine Learning Services based on AutoKERAS for: Images Text Structured Data Time Series Mixture Models like Text + Images AutoMLEvaluate Auto Machine Learning Routine for evaluating. Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required __init__ ( self , x_test , y_test = None , batch_size = 32 , ** kwargs ) special Initialization the Auto Machine Learning Routine for evaluating. Parameters: Name Type Description Default x_test Any Testing data of x as 2d-array required y_test Any Testing data of y as 1d- or 2d-array. Defaults to None. None batch_size int Size of the batch. Defaults to 32. 32 Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , x_test : Any , y_test : Any = None , batch_size : int = 32 , ** kwargs ) -> None : \"\"\"Initialization the Auto Machine Learning Routine for evaluating. Args: x_test (Any): Testing data of `x` as 2d-array y_test (Any, optional): Testing data of `y` as 1d- or 2d-array. Defaults to None. batch_size (int, optional): Size of the batch. Defaults to 32. \"\"\" self . x_test = x_test self . y_test = y_test self . batch_size = batch_size self . kwargs = kwargs perform_job ( self , automl_model ) Perform the of job of class AutoMLEvaluate . Parameters: Name Type Description Default automl_model dict Dictionary with the keys: model (AutoKERAS class), prediction and evaluation . required Returns: Type Description dict dict: Updated dictionary for key evaluation . Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the of job of class `AutoMLEvaluate`. Args: automl_model (dict): Dictionary with the keys: `model` (AutoKERAS class), `prediction` and `evaluation`. Returns: dict: Updated dictionary for key `evaluation`. \"\"\" return { \"model\" : automl_model [ \"model\" ], \"prediction\" : automl_model [ \"prediction\" ], \"evaluation\" : automl_model [ \"model\" ] . evaluate ( x = self . x_test , y = self . y_test , batch_size = self . batch_size , ** self . kwargs , ), } AutoMLFit Auto Machine Learning Routine for fitting. Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required __init__ ( self , x_train , y_train , batch_size = 32 , epochs = None , callbacks = None , validation_split = 0.2 , validation_data = None , ** kwargs ) special Initialization the Auto Machine Learning Routine for fitting. Parameters: Name Type Description Default x_train Any Training data of x as 2d-array required y_train Any Training data of y as 1d- or 2d-array required batch_size int Size of the batch. Defaults to 32. 32 epochs int The number of epochs to train each model during the search. Defaults to None. None callbacks list Applied Keras callbacks. Defaults to None. None validation_split float Fraction of the training data to be used as validation data. Defaults to 0.2. 0.2 validation_data Any Data on which to evaluate the loss and any model metrics at the end of each epoch. Defaults to None. None Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , x_train : Any , y_train : Any , batch_size : int = 32 , epochs : int = None , callbacks : list = None , validation_split : float = 0.2 , validation_data : Any = None , ** kwargs , ) -> None : \"\"\"Initialization the Auto Machine Learning Routine for fitting. Args: x_train (Any): Training data of `x` as 2d-array y_train (Any): Training data of `y` as 1d- or 2d-array batch_size (int, optional): Size of the batch. Defaults to 32. epochs (int, optional): The number of epochs to train each model during the search. Defaults to None. callbacks (list, optional): Applied Keras callbacks. Defaults to None. validation_split (float, optional): Fraction of the training data to be used as validation data. Defaults to 0.2. validation_data (Any, optional): Data on which to evaluate the loss and any model metrics at the end of each epoch. Defaults to None. \"\"\" self . x_train = x_train self . y_train = y_train self . batch_size = batch_size self . epochs = epochs self . callbacks = callbacks self . validation_split = validation_split self . validation_data = validation_data self . kwargs = kwargs perform_job ( self , automl_model ) Perform the of job of class AutoMLPredict . Parameters: Name Type Description Default automl_model dict Dictionary with the keys: model (AutoKERAS class), prediction and evaluation . required Returns: Type Description dict Updated dictionary for key model . Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ): \"\"\"Perform the of job of class `AutoMLPredict`. Args: automl_model (dict): Dictionary with the keys: `model` (AutoKERAS class), `prediction` and `evaluation`. Returns: dict: Updated dictionary for key `model`. \"\"\" return { \"model\" : automl_model [ \"model\" ] . fit_model ( x_train = self . x_train , y_train = self . y_train , epochs = self . epochs , callbacks = self . callbacks , validation_split = self . validation_split , validation_data = self . validation_data , ** self . kwargs , ), \"prediction\" : None , \"evaluation\" : None , } AutoMLModels The Auto-Machine Learning Models Here is the list of the current implemented auto-machine learning models from AutoKERAS : Image-Classification Image-Regression Text-Classification Text-Regression Structured-Data-Classification Structured-Data-Regression Mulit-Models Time-Series-Forcast __init__ ( self , directory = None , loss = None , objective = 'val_loss' , overwrite = False , project_name = 'AutoML_DeepLearning' , max_model_size = None , max_trials = None , metrics = None , seed = None , tuner = None ) special Defining the common parameters for all models. Parameters: Name Type Description Default directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models None Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = None , ) -> None : \"\"\"Defining the common parameters for all models. Args: directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = metrics self . seed = seed self . tuner = tuner data_classification ( self , column_names = None , column_types = None , num_classes = None , multi_label = False , ** kwargs ) Data Classification. Parameters: Name Type Description Default column_names list Name of the columns. Defaults to None. None column_types dict Type of the columns. Defaults to None. None num_classes int Number of classes. Defaults to None. None multi_label bool The target is multi-labeled. Defaults to False. False Returns: Type Description StructuredDataClassifier ak.StructuredDataClassifier: AutoKERAS data classification class. Source code in ai2business/ai_engines/automl_neural_network.py def data_classification ( self , column_names : list = None , column_types : dict = None , num_classes : int = None , multi_label : bool = False , ** kwargs , ) -> ak . StructuredDataClassifier : \"\"\"Data Classification. Args: column_names (list, optional): Name of the columns. Defaults to None. column_types (dict, optional): Type of the columns. Defaults to None. num_classes (int, optional): Number of classes. Defaults to None. multi_label (bool, optional): The target is multi-labeled. Defaults to False. Returns: ak.StructuredDataClassifier: AutoKERAS data classification class. \"\"\" return ak . StructuredDataClassifier ( column_names = column_names , column_types = column_types , num_classes = num_classes , multi_label = multi_label , loss = self . loss , metrics = self . metrics , project_name = self . project_name , max_trials = self . max_trials , directory = self . directory , objective = self . objective , tuner = self . tuner , overwrite = self . overwrite , seed = self . seed , max_model_size = self . max_model_size , ** kwargs , ) data_regression ( self , column_names = None , column_types = None , output_dim = None , ** kwargs ) Data Regression. Parameters: Name Type Description Default column_names list Name of the columns. Defaults to None. None column_types dict Type of the columns. Defaults to None. None output_dim int Number of output dimensions. Defaults to None. None Returns: Type Description StructuredDataRegressor ak.StructuredDataRegressor: AutoKERAS data regression class. Source code in ai2business/ai_engines/automl_neural_network.py def data_regression ( self , column_names : list = None , column_types : dict = None , output_dim : int = None , ** kwargs , ) -> ak . StructuredDataRegressor : \"\"\"Data Regression. Args: column_names (list, optional): Name of the columns. Defaults to None. column_types (dict, optional): Type of the columns. Defaults to None. output_dim (int, optional): Number of output dimensions. Defaults to None. Returns: ak.StructuredDataRegressor: AutoKERAS data regression class. \"\"\" return ak . StructuredDataRegressor ( column_names = column_names , column_types = column_types , output_dim = output_dim , loss = self . loss , metrics = self . metrics , project_name = self . project_name , max_trials = self . max_trials , directory = self . directory , objective = self . objective , tuner = self . tuner , overwrite = self . overwrite , seed = self . seed , max_model_size = self . max_model_size , ** kwargs , ) image_classification ( self , num_classes = None , multi_label = False , ** kwargs ) Image Classification. Parameters: Name Type Description Default num_classes int Number of classes. Defaults to None. None multi_label bool The target is multi-labeled. Defaults to False. False Returns: Type Description ImageClassifier ak.ImageClassifier: AutoKERAS image classification class. Source code in ai2business/ai_engines/automl_neural_network.py def image_classification ( self , num_classes : int = None , multi_label : bool = False , ** kwargs ) -> ak . ImageClassifier : \"\"\"Image Classification. Args: num_classes (int, optional): Number of classes. Defaults to None. multi_label (bool, optional): The target is multi-labeled. Defaults to False. Returns: ak.ImageClassifier: AutoKERAS image classification class. \"\"\" return ak . ImageClassifier ( num_classes = num_classes , multi_label = multi_label , loss = self . loss , metrics = self . metrics , project_name = self . project_name , max_trials = self . max_trials , directory = self . directory , objective = self . objective , tuner = self . tuner , overwrite = self . overwrite , seed = self . seed , max_model_size = self . max_model_size , ** kwargs , ) image_regression ( self , output_dim = None , ** kwargs ) Image Regression. Parameters: Name Type Description Default output_dim int Number of output dimensions. Defaults to None. None Returns: Type Description ImageRegressor ak.ImageRegressor: AutoKERAS image regression class. Source code in ai2business/ai_engines/automl_neural_network.py def image_regression ( self , output_dim : int = None , ** kwargs ) -> ak . ImageRegressor : \"\"\"Image Regression. Args: output_dim (int, optional): Number of output dimensions. Defaults to None. Returns: ak.ImageRegressor: AutoKERAS image regression class. \"\"\" return ak . ImageRegressor ( output_dim = output_dim , loss = self . loss , metrics = self . metrics , project_name = self . project_name , max_trials = self . max_trials , directory = self . directory , objective = self . objective , tuner = self . tuner , overwrite = self . overwrite , seed = self . seed , max_model_size = self . max_model_size , ** kwargs , ) load_model ( model_name = 'model_autokeras' ) staticmethod Loading AutoKERAS project. Parameters: Name Type Description Default model_name str Path of the model to load. Defaults to \"model_autokeras\". 'model_autokeras' Returns: Type Description Callable Callable: Any callable AutoKERAS project Source code in ai2business/ai_engines/automl_neural_network.py @staticmethod def load_model ( model_name : str = \"model_autokeras\" ) -> Callable : \"\"\"Loading AutoKERAS project. Args: model_name (str, optional): Path of the model to load. Defaults to \"model_autokeras\". Returns: Callable: Any callable AutoKERAS project \"\"\" return load_model ( f \" { model_name } \" , custom_objects = ak . CUSTOM_OBJECTS ) multi_model ( self , inputs , outputs , ** kwargs ) Composition of multi-model of different types of networks. Parameters: Name Type Description Default inputs list A list of input node instances of the AutoModel. required outputs list A list of output node instances of the AutoModel. required Returns: Type Description AutoModel ak.AutoModel: AutoKERAS AutoModel class. Source code in ai2business/ai_engines/automl_neural_network.py def multi_model ( self , inputs : list , outputs : list , ** kwargs ) -> ak . AutoModel : \"\"\"Composition of multi-model of different types of networks. Args: inputs (list): A list of `input node instances` of the AutoModel. outputs (list): A list of `output node instances` of the AutoModel. Returns: ak.AutoModel: AutoKERAS AutoModel class. \"\"\" return ak . AutoModel ( inputs = inputs , outputs = outputs , project_name = self . project_name , max_trials = self . max_trials , directory = self . directory , objective = self . objective , tuner = self . tuner , overwrite = self . overwrite , seed = self . seed , max_model_size = self . max_model_size , ** kwargs , ) text_classification ( self , num_classes = None , multi_label = False , ** kwargs ) Text Classification. Parameters: Name Type Description Default num_classes int Number of classes. Defaults to None. None multi_label bool The target is multi-labeled. Defaults to False. False Returns: Type Description TextClassifier ak.TextClassifier: AutoKERAS text classification class. Source code in ai2business/ai_engines/automl_neural_network.py def text_classification ( self , num_classes : int = None , multi_label : bool = False , ** kwargs ) -> ak . TextClassifier : \"\"\"Text Classification. Args: num_classes (int, optional): Number of classes. Defaults to None. multi_label (bool, optional): The target is multi-labeled. Defaults to False. Returns: ak.TextClassifier: AutoKERAS text classification class. \"\"\" return ak . TextClassifier ( num_classes = num_classes , multi_label = multi_label , loss = self . loss , metrics = self . metrics , project_name = self . project_name , max_trials = self . max_trials , directory = self . directory , objective = self . objective , tuner = self . tuner , overwrite = self . overwrite , seed = self . seed , max_model_size = self . max_model_size , ** kwargs , ) text_regression ( self , output_dim = None , ** kwargs ) Text Regression. Parameters: Name Type Description Default output_dim int Number of output dimensions. Defaults to None. None Returns: Type Description TextRegressor ak.TextRegressor: AutoKERAS text regression class. Source code in ai2business/ai_engines/automl_neural_network.py def text_regression ( self , output_dim : int = None , ** kwargs ) -> ak . TextRegressor : \"\"\"Text Regression. Args: output_dim (int, optional): Number of output dimensions. Defaults to None. Returns: ak.TextRegressor: AutoKERAS text regression class. \"\"\" return ak . TextRegressor ( output_dim = output_dim , loss = self . loss , metrics = self . metrics , project_name = self . project_name , max_trials = self . max_trials , directory = self . directory , objective = self . objective , tuner = self . tuner , overwrite = self . overwrite , seed = self . seed , max_model_size = self . max_model_size , ** kwargs , ) timeseries_forecaster ( self , column_names = None , column_types = None , output_dim = None , lookback = None , predict_from = 1 , predict_until = None , ** kwargs ) Forecast of timeseries. Parameters: Name Type Description Default column_names list Name of the columns. Defaults to None. None column_types dict Type of the columns. Defaults to None. None output_dim int Number of output dimensions. Defaults to None. None lookback int History range for each prediction. Defaults to None. None predict_from int Starting point for the time series. Defaults to 1. 1 predict_until int Finishing point for the time series. Defaults to None. None Returns: Type Description TimeseriesForecaster ak.TimeseriesForecaster: AutoKERAS timeseries forecast class. Source code in ai2business/ai_engines/automl_neural_network.py def timeseries_forecaster ( self , column_names : list = None , column_types : dict = None , output_dim : int = None , lookback : int = None , predict_from : int = 1 , predict_until : int = None , ** kwargs , ) -> ak . TimeseriesForecaster : \"\"\"Forecast of timeseries. Args: column_names (list, optional): Name of the columns. Defaults to None. column_types (dict, optional): Type of the columns. Defaults to None. output_dim (int, optional): Number of output dimensions. Defaults to None. lookback (int, optional): History range for each prediction. Defaults to None. predict_from (int, optional): Starting point for the time series. Defaults to 1. predict_until (int, optional): Finishing point for the time series. Defaults to None. Returns: ak.TimeseriesForecaster: AutoKERAS timeseries forecast class. \"\"\" return ak . TimeseriesForecaster ( column_names = column_names , column_types = column_types , output_dim = output_dim , lookback = lookback , predict_from = predict_from , predict_until = predict_until , loss = self . loss , project_name = self . project_name , max_trials = self . max_trials , directory = self . directory , objective = self . objective , tuner = self . tuner , overwrite = self . overwrite , seed = self . seed , max_model_size = self . max_model_size , ** kwargs , ) AutoMLPipeline The Pipeline structure for training and testing of auto machine learning models. return_automl : dict property readonly Return auto machine learning model. Returns: Type Description dict dict: Dictionary with the keys: model (AutoKERAS class), prediction and evaluation . train : Any property writable Return the training results. Returns: Type Description Any Any: Any type of auto machine learning model or its attribute. __init__ ( self , train ) special Initialization of the pipeline. Parameters: Name Type Description Default train Any Any type of auto machine learning model or its attribute. required Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , train : Any ) -> None : \"\"\"Initialization of the pipeline. Args: train (Any): Any type of auto machine learning model or its attribute. \"\"\" self . _train = train self . automl_model = { \"model\" : None , \"prediction\" : None , \"evaluation\" : None } run_automl ( self ) Perform the job and update the auto machine learning model. Source code in ai2business/ai_engines/automl_neural_network.py def run_automl ( self ): \"\"\"Perform the job and update the auto machine learning model.\"\"\" self . automl_model = self . _train . perform_job ( self . automl_model ) AutoMLPredict Auto Machine Learning Routine for predicting. Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required __init__ ( self , x_train , batch_size = 32 , ** kwargs ) special Initialization the Auto Machine Learning Routine for predicting. Parameters: Name Type Description Default x_train Any Training data of x as 2d-array required batch_size int Size of the batch. Defaults to 32. 32 Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , x_train : Any , batch_size : int = 32 , ** kwargs , ) -> None : \"\"\"Initialization the Auto Machine Learning Routine for predicting. Args: x_train (Any): Training data of `x` as 2d-array batch_size (int, optional): Size of the batch. Defaults to 32. \"\"\" self . x_train = x_train self . batch_size = batch_size self . kwargs = kwargs perform_job ( self , automl_model ) Perform the of job of class AutoMLPredict . Parameters: Name Type Description Default automl_model dict Dictionary with the keys: model (AutoKERAS class), prediction and evaluation . required Returns: Type Description dict dict: Updated dictionary for key prediction . Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the of job of class `AutoMLPredict`. Args: automl_model (dict): Dictionary with the keys: `model` (AutoKERAS class), `prediction` and `evaluation`. Returns: dict: Updated dictionary for key `prediction`. \"\"\" return { \"model\" : automl_model [ \"model\" ], \"prediction\" : automl_model [ \"model\" ] . predict ( x = self . x_train , batch_size = self . batch_size , ** self . kwargs ), \"evaluation\" : automl_model [ \"evaluation\" ], } AutoMLRoutines The fitting routine for the different models of AutoMLModels . __init__ ( self , model ) special Defining the initial AutoKERAS model. Parameters: Name Type Description Default model AutoMLModels Current used model like: AutoMLModels()timeseries_forecast() required Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , model : AutoMLModels ) -> None : \"\"\"Defining the initial AutoKERAS model. Args: model (AutoMLModels): Current used model like: AutoMLModels()timeseries_forecast() \"\"\" self . model = model fit_model ( self , x_train , y_train , batch_size = 32 , epochs = None , callbacks = None , validation_split = 0.2 , validation_data = None , ** kwargs ) Fitting of the auto machine learning model. Parameters: Name Type Description Default x_train Any Training data of x as 2d-array required y_train Any Training data of y as 1d- or 2d-array required batch_size int Size of the batch. Defaults to 32. 32 epochs int The number of epochs to train each model during the search. Defaults to None. None callbacks list Applied Keras callbacks. Defaults to None. None validation_split float Fraction of the training data to be used as validation data. Defaults to 0.2. 0.2 validation_data Any Data on which to evaluate the loss and any model metrics at the end of each epoch. Defaults to None. None Source code in ai2business/ai_engines/automl_neural_network.py def fit_model ( self , x_train : Any , y_train : Any , batch_size : int = 32 , epochs : int = None , callbacks : list = None , validation_split : float = 0.2 , validation_data : Any = None , ** kwargs , ) -> None : \"\"\"Fitting of the auto machine learning model. Args: x_train (Any): Training data of `x` as 2d-array y_train (Any): Training data of `y` as 1d- or 2d-array batch_size (int, optional): Size of the batch. Defaults to 32. epochs (int, optional): The number of epochs to train each model during the search. Defaults to None. callbacks (list, optional): Applied Keras callbacks. Defaults to None. validation_split (float, optional): Fraction of the training data to be used as validation data. Defaults to 0.2. validation_data (Any, optional): Data on which to evaluate the loss and any model metrics at the end of each epoch. Defaults to None. \"\"\" self . model . fit ( x = x_train , y = y_train , batch_size = batch_size , epochs = epochs , callbacks = callbacks , validation_split = validation_split , validation_data = validation_data , ** kwargs , ) return self . model AutoMLSave Auto Machine Learning Routine for saving Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required __init__ ( self , model_name ) special Initialization of saving the model. Parameters: Name Type Description Default model_name str Name of the Auto Machine Learning model to save. required Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , model_name : str ) -> None : \"\"\"Initialization of saving the model. Args: model_name (str): Name of the Auto Machine Learning model to save. \"\"\" self . model_name = model_name perform_job ( self , automl_model ) Save the auto machine learning model Parameters: Name Type Description Default automl_model dict [description] required Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ): \"\"\"Save the auto machine learning model Args: automl_model (dict): [description] \"\"\" _model = automl_model [ \"model\" ] . export_model () _model . save ( f \" { self . model_name } \" , save_format = \"tf\" ) DataClassification DataClassification Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required __init__ ( self , directory = None , loss = None , objective = 'val_loss' , overwrite = False , project_name = 'AutoML_DeepLearning' , max_model_size = None , max_trials = None , metrics = None , seed = None , tuner = None , column_names = None , column_types = None , num_classes = None , multi_label = False , ** kwargs ) special Defining the common parameters for structured Data Classification. Parameters: Name Type Description Default directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models None column_names list Name of the columns. Defaults to None. None column_types dict Type of the columns. Defaults to None. None num_classes int Number of classes. Defaults to None. None multi_label bool The target is multi-labeled. Defaults to False. False Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = None , column_names : list = None , column_types : dict = None , num_classes : int = None , multi_label : bool = False , ** kwargs , ) -> None : \"\"\"Defining the common parameters for structured Data Classification. Args: directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models column_names (list, optional): Name of the columns. Defaults to None. column_types (dict, optional): Type of the columns. Defaults to None. num_classes (int, optional): Number of classes. Defaults to None. multi_label (bool, optional): The target is multi-labeled. Defaults to False. \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = metrics self . seed = seed self . tuner = tuner self . column_names = column_names self . column_types = column_types self . num_classes = num_classes self . multi_label = multi_label self . kwargs = kwargs perform_job ( self , automl_model ) Perform the job for Data Classification. Parameters: Name Type Description Default automl_model dict (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. required Returns: Type Description dict dict: Updated the the model -section of the dictionary with a AutoKERAS-class for Data Classification. Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the job for Data Classification. Args: automl_model (dict): (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. Returns: dict: Updated the the `model`-section of the dictionary with a AutoKERAS-class for Data Classification. \"\"\" _ = automl_model model = AutoMLModels ( directory = self . directory , loss = self . loss , objective = self . objective , overwrite = self . overwrite , project_name = self . project_name , max_model_size = self . max_model_size , max_trials = self . max_trials , metrics = self . metrics , seed = self . seed , tuner = self . tuner , ) . data_classification ( column_names = self . column_names , column_types = self . column_types , num_classes = self . num_classes , multi_label = self . multi_label , ** self . kwargs , ) return { \"model\" : AutoMLRoutines ( model ), \"prediction\" : None , \"evaluation\" : None } DataRegression DataRegression Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required __init__ ( self , directory = None , loss = None , objective = 'val_loss' , overwrite = False , project_name = 'AutoML_DeepLearning' , max_model_size = None , max_trials = None , metrics = None , seed = None , tuner = None , column_names = None , column_types = None , output_dim = None , ** kwargs ) special Defining the common parameters for structured Data Regression. Parameters: Name Type Description Default directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models None column_names list Name of the columns. Defaults to None. None column_types dict Type of the columns. Defaults to None. None output_dim int Number of output dimensions. Defaults to None. None Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = None , column_names : list = None , column_types : dict = None , output_dim : int = None , ** kwargs , ) -> None : \"\"\"Defining the common parameters for structured Data Regression. Args: directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models column_names (list, optional): Name of the columns. Defaults to None. column_types (dict, optional): Type of the columns. Defaults to None. output_dim (int, optional): Number of output dimensions. Defaults to None. \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = metrics self . seed = seed self . tuner = tuner self . column_names = column_names self . column_types = column_types self . output_dim = output_dim self . kwargs = kwargs perform_job ( self , automl_model ) Perform the job for Data Regression. Parameters: Name Type Description Default automl_model dict (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. required Returns: Type Description dict dict: Updated the the model -section of the dictionary with a AutoKERAS-class for Data Regression. Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the job for Data Regression. Args: automl_model (dict): (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. Returns: dict: Updated the the `model`-section of the dictionary with a AutoKERAS-class for Data Regression. \"\"\" _ = automl_model model = AutoMLModels ( directory = self . directory , loss = self . loss , objective = self . objective , overwrite = self . overwrite , project_name = self . project_name , max_model_size = self . max_model_size , max_trials = self . max_trials , metrics = self . metrics , seed = self . seed , tuner = self . tuner , ) . data_regression ( column_names = self . column_names , column_types = self . column_types , output_dim = self . output_dim , ** self . kwargs , ) return { \"model\" : AutoMLRoutines ( model ), \"prediction\" : None , \"evaluation\" : None } ImageClassification ImageClassification. Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required __init__ ( self , directory = None , loss = None , objective = 'val_loss' , overwrite = False , project_name = 'AutoML_DeepLearning' , max_model_size = None , max_trials = None , metrics = None , seed = None , tuner = None , num_classes = None , multi_label = False , ** kwargs ) special Defining the common parameters for all Image Classification. Parameters: Name Type Description Default directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models None num_classes int Number of classes. Defaults to None. None multi_label bool The target is multi-labeled. Defaults to False. False Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = None , num_classes : int = None , multi_label : bool = False , ** kwargs , ) -> None : \"\"\"Defining the common parameters for all Image Classification. Args: directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models num_classes (int, optional): Number of classes. Defaults to None. multi_label (bool, optional): The target is multi-labeled. Defaults to False. \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = metrics self . seed = seed self . tuner = tuner self . num_classes = num_classes self . multi_label = multi_label self . kwargs = kwargs perform_job ( self , automl_model ) Perform the job for Image Classification. Parameters: Name Type Description Default automl_model dict (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. required Returns: Type Description dict dict: Updated the the model -section of the dictionary with a AutoKERAS-class for Image Classification. Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the job for Image Classification. Args: automl_model (dict): (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. Returns: dict: Updated the the `model`-section of the dictionary with a AutoKERAS-class for Image Classification. \"\"\" _ = automl_model model = AutoMLModels ( directory = self . directory , loss = self . loss , objective = self . objective , overwrite = self . overwrite , project_name = self . project_name , max_model_size = self . max_model_size , max_trials = self . max_trials , metrics = self . metrics , seed = self . seed , tuner = self . tuner , ) . image_classification ( num_classes = self . num_classes , multi_label = self . multi_label , ** self . kwargs ) return { \"model\" : AutoMLRoutines ( model ), \"prediction\" : None , \"evaluation\" : None } ImageRegression ImageRegression. Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required __init__ ( self , directory = None , loss = None , objective = 'val_loss' , overwrite = False , project_name = 'AutoML_DeepLearning' , max_model_size = None , max_trials = None , metrics = None , seed = None , tuner = None , output_dim = None , ** kwargs ) special Defining the common parameters for Image Regression. Parameters: Name Type Description Default directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models None output_dim int Number of output dimensions. Defaults to None. None Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = None , output_dim : int = None , ** kwargs , ) -> None : \"\"\"Defining the common parameters for Image Regression. Args: directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models output_dim (int, optional): Number of output dimensions. Defaults to None. \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = metrics self . seed = seed self . tuner = tuner self . output_dim = output_dim self . kwargs = kwargs perform_job ( self , automl_model ) Perform the job for Image Regression. Parameters: Name Type Description Default automl_model dict (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. required Returns: Type Description dict dict: Updated the the model -section of the dictionary with a AutoKERAS-class for Image Regression. Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the job for Image Regression. Args: automl_model (dict): (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. Returns: dict: Updated the the `model`-section of the dictionary with a AutoKERAS-class for Image Regression. \"\"\" _ = automl_model model = AutoMLModels ( directory = self . directory , loss = self . loss , objective = self . objective , overwrite = self . overwrite , project_name = self . project_name , max_model_size = self . max_model_size , max_trials = self . max_trials , metrics = self . metrics , seed = self . seed , tuner = self . tuner , ) . image_regression ( output_dim = self . output_dim , ** self . kwargs , ) return { \"model\" : AutoMLRoutines ( model ), \"prediction\" : None , \"evaluation\" : None } MultiModel MultiModel Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required __init__ ( self , inputs , outputs , directory = None , loss = None , objective = 'val_loss' , overwrite = False , project_name = 'AutoML_DeepLearning' , max_model_size = None , max_trials = None , metrics = None , seed = None , tuner = 'greedy' , ** kwargs ) special Defining the common parameters for Multi Models. Parameters: Name Type Description Default inputs list A list of input node instances of the AutoModel. required outputs list A list of output node instances of the AutoModel. required directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. In case of MultiModel it is defined. Defaults to \"greedy\". 'greedy' Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , inputs : list , outputs : list , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = \"greedy\" , ** kwargs , ) -> None : \"\"\"Defining the common parameters for Multi Models. Args: inputs (list): A list of `input node instances` of the AutoModel. outputs (list): A list of `output node instances` of the AutoModel. directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. In case of `MultiModel` it is defined. Defaults to \"greedy\". \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = metrics self . seed = seed self . tuner = tuner self . inputs = inputs self . outputs = outputs self . kwargs = kwargs perform_job ( self , automl_model ) Perform the job for Multi Model Prediction. Parameters: Name Type Description Default automl_model dict (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. required Returns: Type Description dict dict: Updated the the model -section of the dictionary with a AutoKERAS-class for Multi Model Prediction. Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the job for Multi Model Prediction. Args: automl_model (dict): (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. Returns: dict: Updated the the `model`-section of the dictionary with a AutoKERAS-class for Multi Model Prediction. \"\"\" _ = automl_model model = AutoMLModels ( directory = self . directory , loss = self . loss , objective = self . objective , overwrite = self . overwrite , project_name = self . project_name , max_model_size = self . max_model_size , max_trials = self . max_trials , metrics = self . metrics , seed = self . seed , tuner = self . tuner , ) . multi_model ( inputs = self . inputs , outputs = self . outputs , ** self . kwargs , ) return { \"model\" : AutoMLRoutines ( model ), \"prediction\" : None , \"evaluation\" : None } Procedure Abstract class of the training procedure. Parameters: Name Type Description Default ABC class Helper class that provides a standard way to create an ABC using inheritance. required perform_job ( self ) Abstractmethod of perform_job. Source code in ai2business/ai_engines/automl_neural_network.py @abstractmethod def perform_job ( self ): \"\"\"Abstractmethod of perform_job.\"\"\" TextClassification TextClassification. Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required __init__ ( self , directory = None , loss = None , objective = 'val_loss' , overwrite = False , project_name = 'AutoML_DeepLearning' , max_model_size = None , max_trials = None , metrics = None , seed = None , tuner = None , num_classes = None , multi_label = False , ** kwargs ) special Defining the common parameters for Text Classification. Parameters: Name Type Description Default directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models None num_classes int Number of classes. Defaults to None. None multi_label bool The target is multi-labeled. Defaults to False. False Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = None , num_classes : int = None , multi_label : bool = False , ** kwargs , ) -> None : \"\"\"Defining the common parameters for Text Classification. Args: directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models num_classes (int, optional): Number of classes. Defaults to None. multi_label (bool, optional): The target is multi-labeled. Defaults to False. \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = metrics self . seed = seed self . tuner = tuner self . num_classes = num_classes self . multi_label = multi_label self . kwargs = kwargs perform_job ( self , automl_model ) Perform the job for Text Classification. Parameters: Name Type Description Default automl_model dict (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. required Returns: Type Description dict dict: Updated the the model -section of the dictionary with a AutoKERAS-class for Text Classification. Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the job for Text Classification. Args: automl_model (dict): (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. Returns: dict: Updated the the `model`-section of the dictionary with a AutoKERAS-class for Text Classification. \"\"\" _ = automl_model model = AutoMLModels ( directory = self . directory , loss = self . loss , objective = self . objective , overwrite = self . overwrite , project_name = self . project_name , max_model_size = self . max_model_size , max_trials = self . max_trials , metrics = self . metrics , seed = self . seed , tuner = self . tuner , ) . text_classification ( num_classes = self . num_classes , multi_label = self . multi_label , ** self . kwargs , ) return { \"model\" : AutoMLRoutines ( model ), \"prediction\" : None , \"evaluation\" : None } TextRegression TextRegression. Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required __init__ ( self , directory = None , loss = None , objective = 'val_loss' , overwrite = False , project_name = 'AutoML_DeepLearning' , max_model_size = None , max_trials = None , metrics = None , seed = None , tuner = None , output_dim = None , ** kwargs ) special Defining the common parameters for Text Regression. Parameters: Name Type Description Default directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models None output_dim int Number of output dimensions. Defaults to None. None Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = None , output_dim : int = None , ** kwargs , ) -> None : \"\"\"Defining the common parameters for Text Regression. Args: directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models output_dim (int, optional): Number of output dimensions. Defaults to None. \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = metrics self . seed = seed self . tuner = tuner self . output_dim = output_dim self . kwargs = kwargs perform_job ( self , automl_model ) Perform the job for Text Regression. Parameters: Name Type Description Default automl_model dict (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. required Returns: Type Description dict dict: Updated the the model -section of the dictionary with a AutoKERAS-class for Text Regression. Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the job for Text Regression. Args: automl_model (dict): (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. Returns: dict: Updated the the `model`-section of the dictionary with a AutoKERAS-class for Text Regression. \"\"\" _ = automl_model model = AutoMLModels ( directory = self . directory , loss = self . loss , objective = self . objective , overwrite = self . overwrite , project_name = self . project_name , max_model_size = self . max_model_size , max_trials = self . max_trials , metrics = self . metrics , seed = self . seed , tuner = self . tuner , ) . text_regression ( output_dim = self . output_dim , ** self . kwargs , ) return { \"model\" : AutoMLRoutines ( model ), \"prediction\" : None , \"evaluation\" : None } TimeseriesForecaster TimeseriesForecaster Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required __init__ ( self , directory = None , loss = None , objective = 'val_loss' , overwrite = False , project_name = 'AutoML_DeepLearning' , max_model_size = None , max_trials = None , metrics = None , seed = None , tuner = None , column_names = None , column_types = None , output_dim = None , lookback = None , predict_from = 1 , predict_until = None , ** kwargs ) special Defining the common parameters for Timeseries Forcast. Parameters: Name Type Description Default directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models None column_names list Name of the columns. Defaults to None. None column_types dict Type of the columns. Defaults to None. None output_dim int Number of output dimensions. Defaults to None. None lookback int History range for each prediction. Defaults to None. None predict_from int Starting point for the time series. Defaults to 1. 1 predict_until int Finishing point for the time series. Defaults to None. None Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = None , column_names : list = None , column_types : dict = None , output_dim : int = None , lookback : int = None , predict_from : int = 1 , predict_until : int = None , ** kwargs , ) -> None : \"\"\"Defining the common parameters for Timeseries Forcast. Args: directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models column_names (list, optional): Name of the columns. Defaults to None. column_types (dict, optional): Type of the columns. Defaults to None. output_dim (int, optional): Number of output dimensions. Defaults to None. lookback (int, optional): History range for each prediction. Defaults to None. predict_from (int, optional): Starting point for the time series. Defaults to 1. predict_until (int, optional): Finishing point for the time series. Defaults to None. \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = ( metrics ,) self . seed = seed self . tuner = tuner self . column_names = column_names self . column_types = column_types self . output_dim = output_dim self . lookback = lookback self . predict_from = predict_from self . predict_until = predict_until self . kwargs = kwargs perform_job ( self , automl_model ) Perform the job for Timeseries Forcast. Parameters: Name Type Description Default automl_model dict (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. required Returns: Type Description dict dict: Updated the the model -section of the dictionary with a AutoKERAS-class for Timeseries Forcast. Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the job for Timeseries Forcast. Args: automl_model (dict): (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. Returns: dict: Updated the the `model`-section of the dictionary with a AutoKERAS-class for Timeseries Forcast. \"\"\" _ = automl_model model = AutoMLModels ( directory = self . directory , loss = self . loss , objective = self . objective , overwrite = self . overwrite , project_name = self . project_name , max_model_size = self . max_model_size , max_trials = self . max_trials , metrics = self . metrics , seed = self . seed , tuner = self . tuner , ) . timeseries_forecaster ( column_names = self . column_names , column_types = self . column_types , output_dim = self . output_dim , lookback = self . lookback , predict_from = self . predict_from , predict_until = self . predict_until , ** self . kwargs , ) return { \"model\" : AutoMLRoutines ( model ), \"prediction\" : None , \"evaluation\" : None }","title":"Deep Learning"},{"location":"deep_learning_api/#api-of-the-auto-machine-learning","text":"","title":"API of the Auto Machine Learning"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network","text":"Auto Machine Learning Services based on AutoKERAS for: Images Text Structured Data Time Series Mixture Models like Text + Images","title":"ai2business.ai_engines.automl_neural_network"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLEvaluate","text":"Auto Machine Learning Routine for evaluating. Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required","title":"AutoMLEvaluate"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLEvaluate.__init__","text":"Initialization the Auto Machine Learning Routine for evaluating. Parameters: Name Type Description Default x_test Any Testing data of x as 2d-array required y_test Any Testing data of y as 1d- or 2d-array. Defaults to None. None batch_size int Size of the batch. Defaults to 32. 32 Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , x_test : Any , y_test : Any = None , batch_size : int = 32 , ** kwargs ) -> None : \"\"\"Initialization the Auto Machine Learning Routine for evaluating. Args: x_test (Any): Testing data of `x` as 2d-array y_test (Any, optional): Testing data of `y` as 1d- or 2d-array. Defaults to None. batch_size (int, optional): Size of the batch. Defaults to 32. \"\"\" self . x_test = x_test self . y_test = y_test self . batch_size = batch_size self . kwargs = kwargs","title":"__init__()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLEvaluate.perform_job","text":"Perform the of job of class AutoMLEvaluate . Parameters: Name Type Description Default automl_model dict Dictionary with the keys: model (AutoKERAS class), prediction and evaluation . required Returns: Type Description dict dict: Updated dictionary for key evaluation . Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the of job of class `AutoMLEvaluate`. Args: automl_model (dict): Dictionary with the keys: `model` (AutoKERAS class), `prediction` and `evaluation`. Returns: dict: Updated dictionary for key `evaluation`. \"\"\" return { \"model\" : automl_model [ \"model\" ], \"prediction\" : automl_model [ \"prediction\" ], \"evaluation\" : automl_model [ \"model\" ] . evaluate ( x = self . x_test , y = self . y_test , batch_size = self . batch_size , ** self . kwargs , ), }","title":"perform_job()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLFit","text":"Auto Machine Learning Routine for fitting. Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required","title":"AutoMLFit"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLFit.__init__","text":"Initialization the Auto Machine Learning Routine for fitting. Parameters: Name Type Description Default x_train Any Training data of x as 2d-array required y_train Any Training data of y as 1d- or 2d-array required batch_size int Size of the batch. Defaults to 32. 32 epochs int The number of epochs to train each model during the search. Defaults to None. None callbacks list Applied Keras callbacks. Defaults to None. None validation_split float Fraction of the training data to be used as validation data. Defaults to 0.2. 0.2 validation_data Any Data on which to evaluate the loss and any model metrics at the end of each epoch. Defaults to None. None Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , x_train : Any , y_train : Any , batch_size : int = 32 , epochs : int = None , callbacks : list = None , validation_split : float = 0.2 , validation_data : Any = None , ** kwargs , ) -> None : \"\"\"Initialization the Auto Machine Learning Routine for fitting. Args: x_train (Any): Training data of `x` as 2d-array y_train (Any): Training data of `y` as 1d- or 2d-array batch_size (int, optional): Size of the batch. Defaults to 32. epochs (int, optional): The number of epochs to train each model during the search. Defaults to None. callbacks (list, optional): Applied Keras callbacks. Defaults to None. validation_split (float, optional): Fraction of the training data to be used as validation data. Defaults to 0.2. validation_data (Any, optional): Data on which to evaluate the loss and any model metrics at the end of each epoch. Defaults to None. \"\"\" self . x_train = x_train self . y_train = y_train self . batch_size = batch_size self . epochs = epochs self . callbacks = callbacks self . validation_split = validation_split self . validation_data = validation_data self . kwargs = kwargs","title":"__init__()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLFit.perform_job","text":"Perform the of job of class AutoMLPredict . Parameters: Name Type Description Default automl_model dict Dictionary with the keys: model (AutoKERAS class), prediction and evaluation . required Returns: Type Description dict Updated dictionary for key model . Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ): \"\"\"Perform the of job of class `AutoMLPredict`. Args: automl_model (dict): Dictionary with the keys: `model` (AutoKERAS class), `prediction` and `evaluation`. Returns: dict: Updated dictionary for key `model`. \"\"\" return { \"model\" : automl_model [ \"model\" ] . fit_model ( x_train = self . x_train , y_train = self . y_train , epochs = self . epochs , callbacks = self . callbacks , validation_split = self . validation_split , validation_data = self . validation_data , ** self . kwargs , ), \"prediction\" : None , \"evaluation\" : None , }","title":"perform_job()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLModels","text":"The Auto-Machine Learning Models Here is the list of the current implemented auto-machine learning models from AutoKERAS : Image-Classification Image-Regression Text-Classification Text-Regression Structured-Data-Classification Structured-Data-Regression Mulit-Models Time-Series-Forcast","title":"AutoMLModels"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLModels.__init__","text":"Defining the common parameters for all models. Parameters: Name Type Description Default directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models None Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = None , ) -> None : \"\"\"Defining the common parameters for all models. Args: directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = metrics self . seed = seed self . tuner = tuner","title":"__init__()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLModels.data_classification","text":"Data Classification. Parameters: Name Type Description Default column_names list Name of the columns. Defaults to None. None column_types dict Type of the columns. Defaults to None. None num_classes int Number of classes. Defaults to None. None multi_label bool The target is multi-labeled. Defaults to False. False Returns: Type Description StructuredDataClassifier ak.StructuredDataClassifier: AutoKERAS data classification class. Source code in ai2business/ai_engines/automl_neural_network.py def data_classification ( self , column_names : list = None , column_types : dict = None , num_classes : int = None , multi_label : bool = False , ** kwargs , ) -> ak . StructuredDataClassifier : \"\"\"Data Classification. Args: column_names (list, optional): Name of the columns. Defaults to None. column_types (dict, optional): Type of the columns. Defaults to None. num_classes (int, optional): Number of classes. Defaults to None. multi_label (bool, optional): The target is multi-labeled. Defaults to False. Returns: ak.StructuredDataClassifier: AutoKERAS data classification class. \"\"\" return ak . StructuredDataClassifier ( column_names = column_names , column_types = column_types , num_classes = num_classes , multi_label = multi_label , loss = self . loss , metrics = self . metrics , project_name = self . project_name , max_trials = self . max_trials , directory = self . directory , objective = self . objective , tuner = self . tuner , overwrite = self . overwrite , seed = self . seed , max_model_size = self . max_model_size , ** kwargs , )","title":"data_classification()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLModels.data_regression","text":"Data Regression. Parameters: Name Type Description Default column_names list Name of the columns. Defaults to None. None column_types dict Type of the columns. Defaults to None. None output_dim int Number of output dimensions. Defaults to None. None Returns: Type Description StructuredDataRegressor ak.StructuredDataRegressor: AutoKERAS data regression class. Source code in ai2business/ai_engines/automl_neural_network.py def data_regression ( self , column_names : list = None , column_types : dict = None , output_dim : int = None , ** kwargs , ) -> ak . StructuredDataRegressor : \"\"\"Data Regression. Args: column_names (list, optional): Name of the columns. Defaults to None. column_types (dict, optional): Type of the columns. Defaults to None. output_dim (int, optional): Number of output dimensions. Defaults to None. Returns: ak.StructuredDataRegressor: AutoKERAS data regression class. \"\"\" return ak . StructuredDataRegressor ( column_names = column_names , column_types = column_types , output_dim = output_dim , loss = self . loss , metrics = self . metrics , project_name = self . project_name , max_trials = self . max_trials , directory = self . directory , objective = self . objective , tuner = self . tuner , overwrite = self . overwrite , seed = self . seed , max_model_size = self . max_model_size , ** kwargs , )","title":"data_regression()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLModels.image_classification","text":"Image Classification. Parameters: Name Type Description Default num_classes int Number of classes. Defaults to None. None multi_label bool The target is multi-labeled. Defaults to False. False Returns: Type Description ImageClassifier ak.ImageClassifier: AutoKERAS image classification class. Source code in ai2business/ai_engines/automl_neural_network.py def image_classification ( self , num_classes : int = None , multi_label : bool = False , ** kwargs ) -> ak . ImageClassifier : \"\"\"Image Classification. Args: num_classes (int, optional): Number of classes. Defaults to None. multi_label (bool, optional): The target is multi-labeled. Defaults to False. Returns: ak.ImageClassifier: AutoKERAS image classification class. \"\"\" return ak . ImageClassifier ( num_classes = num_classes , multi_label = multi_label , loss = self . loss , metrics = self . metrics , project_name = self . project_name , max_trials = self . max_trials , directory = self . directory , objective = self . objective , tuner = self . tuner , overwrite = self . overwrite , seed = self . seed , max_model_size = self . max_model_size , ** kwargs , )","title":"image_classification()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLModels.image_regression","text":"Image Regression. Parameters: Name Type Description Default output_dim int Number of output dimensions. Defaults to None. None Returns: Type Description ImageRegressor ak.ImageRegressor: AutoKERAS image regression class. Source code in ai2business/ai_engines/automl_neural_network.py def image_regression ( self , output_dim : int = None , ** kwargs ) -> ak . ImageRegressor : \"\"\"Image Regression. Args: output_dim (int, optional): Number of output dimensions. Defaults to None. Returns: ak.ImageRegressor: AutoKERAS image regression class. \"\"\" return ak . ImageRegressor ( output_dim = output_dim , loss = self . loss , metrics = self . metrics , project_name = self . project_name , max_trials = self . max_trials , directory = self . directory , objective = self . objective , tuner = self . tuner , overwrite = self . overwrite , seed = self . seed , max_model_size = self . max_model_size , ** kwargs , )","title":"image_regression()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLModels.load_model","text":"Loading AutoKERAS project. Parameters: Name Type Description Default model_name str Path of the model to load. Defaults to \"model_autokeras\". 'model_autokeras' Returns: Type Description Callable Callable: Any callable AutoKERAS project Source code in ai2business/ai_engines/automl_neural_network.py @staticmethod def load_model ( model_name : str = \"model_autokeras\" ) -> Callable : \"\"\"Loading AutoKERAS project. Args: model_name (str, optional): Path of the model to load. Defaults to \"model_autokeras\". Returns: Callable: Any callable AutoKERAS project \"\"\" return load_model ( f \" { model_name } \" , custom_objects = ak . CUSTOM_OBJECTS )","title":"load_model()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLModels.multi_model","text":"Composition of multi-model of different types of networks. Parameters: Name Type Description Default inputs list A list of input node instances of the AutoModel. required outputs list A list of output node instances of the AutoModel. required Returns: Type Description AutoModel ak.AutoModel: AutoKERAS AutoModel class. Source code in ai2business/ai_engines/automl_neural_network.py def multi_model ( self , inputs : list , outputs : list , ** kwargs ) -> ak . AutoModel : \"\"\"Composition of multi-model of different types of networks. Args: inputs (list): A list of `input node instances` of the AutoModel. outputs (list): A list of `output node instances` of the AutoModel. Returns: ak.AutoModel: AutoKERAS AutoModel class. \"\"\" return ak . AutoModel ( inputs = inputs , outputs = outputs , project_name = self . project_name , max_trials = self . max_trials , directory = self . directory , objective = self . objective , tuner = self . tuner , overwrite = self . overwrite , seed = self . seed , max_model_size = self . max_model_size , ** kwargs , )","title":"multi_model()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLModels.text_classification","text":"Text Classification. Parameters: Name Type Description Default num_classes int Number of classes. Defaults to None. None multi_label bool The target is multi-labeled. Defaults to False. False Returns: Type Description TextClassifier ak.TextClassifier: AutoKERAS text classification class. Source code in ai2business/ai_engines/automl_neural_network.py def text_classification ( self , num_classes : int = None , multi_label : bool = False , ** kwargs ) -> ak . TextClassifier : \"\"\"Text Classification. Args: num_classes (int, optional): Number of classes. Defaults to None. multi_label (bool, optional): The target is multi-labeled. Defaults to False. Returns: ak.TextClassifier: AutoKERAS text classification class. \"\"\" return ak . TextClassifier ( num_classes = num_classes , multi_label = multi_label , loss = self . loss , metrics = self . metrics , project_name = self . project_name , max_trials = self . max_trials , directory = self . directory , objective = self . objective , tuner = self . tuner , overwrite = self . overwrite , seed = self . seed , max_model_size = self . max_model_size , ** kwargs , )","title":"text_classification()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLModels.text_regression","text":"Text Regression. Parameters: Name Type Description Default output_dim int Number of output dimensions. Defaults to None. None Returns: Type Description TextRegressor ak.TextRegressor: AutoKERAS text regression class. Source code in ai2business/ai_engines/automl_neural_network.py def text_regression ( self , output_dim : int = None , ** kwargs ) -> ak . TextRegressor : \"\"\"Text Regression. Args: output_dim (int, optional): Number of output dimensions. Defaults to None. Returns: ak.TextRegressor: AutoKERAS text regression class. \"\"\" return ak . TextRegressor ( output_dim = output_dim , loss = self . loss , metrics = self . metrics , project_name = self . project_name , max_trials = self . max_trials , directory = self . directory , objective = self . objective , tuner = self . tuner , overwrite = self . overwrite , seed = self . seed , max_model_size = self . max_model_size , ** kwargs , )","title":"text_regression()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLModels.timeseries_forecaster","text":"Forecast of timeseries. Parameters: Name Type Description Default column_names list Name of the columns. Defaults to None. None column_types dict Type of the columns. Defaults to None. None output_dim int Number of output dimensions. Defaults to None. None lookback int History range for each prediction. Defaults to None. None predict_from int Starting point for the time series. Defaults to 1. 1 predict_until int Finishing point for the time series. Defaults to None. None Returns: Type Description TimeseriesForecaster ak.TimeseriesForecaster: AutoKERAS timeseries forecast class. Source code in ai2business/ai_engines/automl_neural_network.py def timeseries_forecaster ( self , column_names : list = None , column_types : dict = None , output_dim : int = None , lookback : int = None , predict_from : int = 1 , predict_until : int = None , ** kwargs , ) -> ak . TimeseriesForecaster : \"\"\"Forecast of timeseries. Args: column_names (list, optional): Name of the columns. Defaults to None. column_types (dict, optional): Type of the columns. Defaults to None. output_dim (int, optional): Number of output dimensions. Defaults to None. lookback (int, optional): History range for each prediction. Defaults to None. predict_from (int, optional): Starting point for the time series. Defaults to 1. predict_until (int, optional): Finishing point for the time series. Defaults to None. Returns: ak.TimeseriesForecaster: AutoKERAS timeseries forecast class. \"\"\" return ak . TimeseriesForecaster ( column_names = column_names , column_types = column_types , output_dim = output_dim , lookback = lookback , predict_from = predict_from , predict_until = predict_until , loss = self . loss , project_name = self . project_name , max_trials = self . max_trials , directory = self . directory , objective = self . objective , tuner = self . tuner , overwrite = self . overwrite , seed = self . seed , max_model_size = self . max_model_size , ** kwargs , )","title":"timeseries_forecaster()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLPipeline","text":"The Pipeline structure for training and testing of auto machine learning models.","title":"AutoMLPipeline"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLPipeline.return_automl","text":"Return auto machine learning model. Returns: Type Description dict dict: Dictionary with the keys: model (AutoKERAS class), prediction and evaluation .","title":"return_automl"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLPipeline.train","text":"Return the training results. Returns: Type Description Any Any: Any type of auto machine learning model or its attribute.","title":"train"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLPipeline.__init__","text":"Initialization of the pipeline. Parameters: Name Type Description Default train Any Any type of auto machine learning model or its attribute. required Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , train : Any ) -> None : \"\"\"Initialization of the pipeline. Args: train (Any): Any type of auto machine learning model or its attribute. \"\"\" self . _train = train self . automl_model = { \"model\" : None , \"prediction\" : None , \"evaluation\" : None }","title":"__init__()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLPipeline.run_automl","text":"Perform the job and update the auto machine learning model. Source code in ai2business/ai_engines/automl_neural_network.py def run_automl ( self ): \"\"\"Perform the job and update the auto machine learning model.\"\"\" self . automl_model = self . _train . perform_job ( self . automl_model )","title":"run_automl()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLPredict","text":"Auto Machine Learning Routine for predicting. Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required","title":"AutoMLPredict"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLPredict.__init__","text":"Initialization the Auto Machine Learning Routine for predicting. Parameters: Name Type Description Default x_train Any Training data of x as 2d-array required batch_size int Size of the batch. Defaults to 32. 32 Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , x_train : Any , batch_size : int = 32 , ** kwargs , ) -> None : \"\"\"Initialization the Auto Machine Learning Routine for predicting. Args: x_train (Any): Training data of `x` as 2d-array batch_size (int, optional): Size of the batch. Defaults to 32. \"\"\" self . x_train = x_train self . batch_size = batch_size self . kwargs = kwargs","title":"__init__()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLPredict.perform_job","text":"Perform the of job of class AutoMLPredict . Parameters: Name Type Description Default automl_model dict Dictionary with the keys: model (AutoKERAS class), prediction and evaluation . required Returns: Type Description dict dict: Updated dictionary for key prediction . Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the of job of class `AutoMLPredict`. Args: automl_model (dict): Dictionary with the keys: `model` (AutoKERAS class), `prediction` and `evaluation`. Returns: dict: Updated dictionary for key `prediction`. \"\"\" return { \"model\" : automl_model [ \"model\" ], \"prediction\" : automl_model [ \"model\" ] . predict ( x = self . x_train , batch_size = self . batch_size , ** self . kwargs ), \"evaluation\" : automl_model [ \"evaluation\" ], }","title":"perform_job()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLRoutines","text":"The fitting routine for the different models of AutoMLModels .","title":"AutoMLRoutines"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLRoutines.__init__","text":"Defining the initial AutoKERAS model. Parameters: Name Type Description Default model AutoMLModels Current used model like: AutoMLModels()timeseries_forecast() required Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , model : AutoMLModels ) -> None : \"\"\"Defining the initial AutoKERAS model. Args: model (AutoMLModels): Current used model like: AutoMLModels()timeseries_forecast() \"\"\" self . model = model","title":"__init__()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLRoutines.fit_model","text":"Fitting of the auto machine learning model. Parameters: Name Type Description Default x_train Any Training data of x as 2d-array required y_train Any Training data of y as 1d- or 2d-array required batch_size int Size of the batch. Defaults to 32. 32 epochs int The number of epochs to train each model during the search. Defaults to None. None callbacks list Applied Keras callbacks. Defaults to None. None validation_split float Fraction of the training data to be used as validation data. Defaults to 0.2. 0.2 validation_data Any Data on which to evaluate the loss and any model metrics at the end of each epoch. Defaults to None. None Source code in ai2business/ai_engines/automl_neural_network.py def fit_model ( self , x_train : Any , y_train : Any , batch_size : int = 32 , epochs : int = None , callbacks : list = None , validation_split : float = 0.2 , validation_data : Any = None , ** kwargs , ) -> None : \"\"\"Fitting of the auto machine learning model. Args: x_train (Any): Training data of `x` as 2d-array y_train (Any): Training data of `y` as 1d- or 2d-array batch_size (int, optional): Size of the batch. Defaults to 32. epochs (int, optional): The number of epochs to train each model during the search. Defaults to None. callbacks (list, optional): Applied Keras callbacks. Defaults to None. validation_split (float, optional): Fraction of the training data to be used as validation data. Defaults to 0.2. validation_data (Any, optional): Data on which to evaluate the loss and any model metrics at the end of each epoch. Defaults to None. \"\"\" self . model . fit ( x = x_train , y = y_train , batch_size = batch_size , epochs = epochs , callbacks = callbacks , validation_split = validation_split , validation_data = validation_data , ** kwargs , ) return self . model","title":"fit_model()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLSave","text":"Auto Machine Learning Routine for saving Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required","title":"AutoMLSave"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLSave.__init__","text":"Initialization of saving the model. Parameters: Name Type Description Default model_name str Name of the Auto Machine Learning model to save. required Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , model_name : str ) -> None : \"\"\"Initialization of saving the model. Args: model_name (str): Name of the Auto Machine Learning model to save. \"\"\" self . model_name = model_name","title":"__init__()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.AutoMLSave.perform_job","text":"Save the auto machine learning model Parameters: Name Type Description Default automl_model dict [description] required Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ): \"\"\"Save the auto machine learning model Args: automl_model (dict): [description] \"\"\" _model = automl_model [ \"model\" ] . export_model () _model . save ( f \" { self . model_name } \" , save_format = \"tf\" )","title":"perform_job()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.DataClassification","text":"DataClassification Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required","title":"DataClassification"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.DataClassification.__init__","text":"Defining the common parameters for structured Data Classification. Parameters: Name Type Description Default directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models None column_names list Name of the columns. Defaults to None. None column_types dict Type of the columns. Defaults to None. None num_classes int Number of classes. Defaults to None. None multi_label bool The target is multi-labeled. Defaults to False. False Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = None , column_names : list = None , column_types : dict = None , num_classes : int = None , multi_label : bool = False , ** kwargs , ) -> None : \"\"\"Defining the common parameters for structured Data Classification. Args: directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models column_names (list, optional): Name of the columns. Defaults to None. column_types (dict, optional): Type of the columns. Defaults to None. num_classes (int, optional): Number of classes. Defaults to None. multi_label (bool, optional): The target is multi-labeled. Defaults to False. \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = metrics self . seed = seed self . tuner = tuner self . column_names = column_names self . column_types = column_types self . num_classes = num_classes self . multi_label = multi_label self . kwargs = kwargs","title":"__init__()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.DataClassification.perform_job","text":"Perform the job for Data Classification. Parameters: Name Type Description Default automl_model dict (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. required Returns: Type Description dict dict: Updated the the model -section of the dictionary with a AutoKERAS-class for Data Classification. Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the job for Data Classification. Args: automl_model (dict): (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. Returns: dict: Updated the the `model`-section of the dictionary with a AutoKERAS-class for Data Classification. \"\"\" _ = automl_model model = AutoMLModels ( directory = self . directory , loss = self . loss , objective = self . objective , overwrite = self . overwrite , project_name = self . project_name , max_model_size = self . max_model_size , max_trials = self . max_trials , metrics = self . metrics , seed = self . seed , tuner = self . tuner , ) . data_classification ( column_names = self . column_names , column_types = self . column_types , num_classes = self . num_classes , multi_label = self . multi_label , ** self . kwargs , ) return { \"model\" : AutoMLRoutines ( model ), \"prediction\" : None , \"evaluation\" : None }","title":"perform_job()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.DataRegression","text":"DataRegression Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required","title":"DataRegression"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.DataRegression.__init__","text":"Defining the common parameters for structured Data Regression. Parameters: Name Type Description Default directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models None column_names list Name of the columns. Defaults to None. None column_types dict Type of the columns. Defaults to None. None output_dim int Number of output dimensions. Defaults to None. None Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = None , column_names : list = None , column_types : dict = None , output_dim : int = None , ** kwargs , ) -> None : \"\"\"Defining the common parameters for structured Data Regression. Args: directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models column_names (list, optional): Name of the columns. Defaults to None. column_types (dict, optional): Type of the columns. Defaults to None. output_dim (int, optional): Number of output dimensions. Defaults to None. \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = metrics self . seed = seed self . tuner = tuner self . column_names = column_names self . column_types = column_types self . output_dim = output_dim self . kwargs = kwargs","title":"__init__()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.DataRegression.perform_job","text":"Perform the job for Data Regression. Parameters: Name Type Description Default automl_model dict (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. required Returns: Type Description dict dict: Updated the the model -section of the dictionary with a AutoKERAS-class for Data Regression. Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the job for Data Regression. Args: automl_model (dict): (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. Returns: dict: Updated the the `model`-section of the dictionary with a AutoKERAS-class for Data Regression. \"\"\" _ = automl_model model = AutoMLModels ( directory = self . directory , loss = self . loss , objective = self . objective , overwrite = self . overwrite , project_name = self . project_name , max_model_size = self . max_model_size , max_trials = self . max_trials , metrics = self . metrics , seed = self . seed , tuner = self . tuner , ) . data_regression ( column_names = self . column_names , column_types = self . column_types , output_dim = self . output_dim , ** self . kwargs , ) return { \"model\" : AutoMLRoutines ( model ), \"prediction\" : None , \"evaluation\" : None }","title":"perform_job()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.ImageClassification","text":"ImageClassification. Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required","title":"ImageClassification"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.ImageClassification.__init__","text":"Defining the common parameters for all Image Classification. Parameters: Name Type Description Default directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models None num_classes int Number of classes. Defaults to None. None multi_label bool The target is multi-labeled. Defaults to False. False Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = None , num_classes : int = None , multi_label : bool = False , ** kwargs , ) -> None : \"\"\"Defining the common parameters for all Image Classification. Args: directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models num_classes (int, optional): Number of classes. Defaults to None. multi_label (bool, optional): The target is multi-labeled. Defaults to False. \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = metrics self . seed = seed self . tuner = tuner self . num_classes = num_classes self . multi_label = multi_label self . kwargs = kwargs","title":"__init__()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.ImageClassification.perform_job","text":"Perform the job for Image Classification. Parameters: Name Type Description Default automl_model dict (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. required Returns: Type Description dict dict: Updated the the model -section of the dictionary with a AutoKERAS-class for Image Classification. Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the job for Image Classification. Args: automl_model (dict): (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. Returns: dict: Updated the the `model`-section of the dictionary with a AutoKERAS-class for Image Classification. \"\"\" _ = automl_model model = AutoMLModels ( directory = self . directory , loss = self . loss , objective = self . objective , overwrite = self . overwrite , project_name = self . project_name , max_model_size = self . max_model_size , max_trials = self . max_trials , metrics = self . metrics , seed = self . seed , tuner = self . tuner , ) . image_classification ( num_classes = self . num_classes , multi_label = self . multi_label , ** self . kwargs ) return { \"model\" : AutoMLRoutines ( model ), \"prediction\" : None , \"evaluation\" : None }","title":"perform_job()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.ImageRegression","text":"ImageRegression. Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required","title":"ImageRegression"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.ImageRegression.__init__","text":"Defining the common parameters for Image Regression. Parameters: Name Type Description Default directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models None output_dim int Number of output dimensions. Defaults to None. None Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = None , output_dim : int = None , ** kwargs , ) -> None : \"\"\"Defining the common parameters for Image Regression. Args: directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models output_dim (int, optional): Number of output dimensions. Defaults to None. \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = metrics self . seed = seed self . tuner = tuner self . output_dim = output_dim self . kwargs = kwargs","title":"__init__()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.ImageRegression.perform_job","text":"Perform the job for Image Regression. Parameters: Name Type Description Default automl_model dict (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. required Returns: Type Description dict dict: Updated the the model -section of the dictionary with a AutoKERAS-class for Image Regression. Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the job for Image Regression. Args: automl_model (dict): (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. Returns: dict: Updated the the `model`-section of the dictionary with a AutoKERAS-class for Image Regression. \"\"\" _ = automl_model model = AutoMLModels ( directory = self . directory , loss = self . loss , objective = self . objective , overwrite = self . overwrite , project_name = self . project_name , max_model_size = self . max_model_size , max_trials = self . max_trials , metrics = self . metrics , seed = self . seed , tuner = self . tuner , ) . image_regression ( output_dim = self . output_dim , ** self . kwargs , ) return { \"model\" : AutoMLRoutines ( model ), \"prediction\" : None , \"evaluation\" : None }","title":"perform_job()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.MultiModel","text":"MultiModel Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required","title":"MultiModel"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.MultiModel.__init__","text":"Defining the common parameters for Multi Models. Parameters: Name Type Description Default inputs list A list of input node instances of the AutoModel. required outputs list A list of output node instances of the AutoModel. required directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. In case of MultiModel it is defined. Defaults to \"greedy\". 'greedy' Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , inputs : list , outputs : list , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = \"greedy\" , ** kwargs , ) -> None : \"\"\"Defining the common parameters for Multi Models. Args: inputs (list): A list of `input node instances` of the AutoModel. outputs (list): A list of `output node instances` of the AutoModel. directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. In case of `MultiModel` it is defined. Defaults to \"greedy\". \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = metrics self . seed = seed self . tuner = tuner self . inputs = inputs self . outputs = outputs self . kwargs = kwargs","title":"__init__()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.MultiModel.perform_job","text":"Perform the job for Multi Model Prediction. Parameters: Name Type Description Default automl_model dict (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. required Returns: Type Description dict dict: Updated the the model -section of the dictionary with a AutoKERAS-class for Multi Model Prediction. Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the job for Multi Model Prediction. Args: automl_model (dict): (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. Returns: dict: Updated the the `model`-section of the dictionary with a AutoKERAS-class for Multi Model Prediction. \"\"\" _ = automl_model model = AutoMLModels ( directory = self . directory , loss = self . loss , objective = self . objective , overwrite = self . overwrite , project_name = self . project_name , max_model_size = self . max_model_size , max_trials = self . max_trials , metrics = self . metrics , seed = self . seed , tuner = self . tuner , ) . multi_model ( inputs = self . inputs , outputs = self . outputs , ** self . kwargs , ) return { \"model\" : AutoMLRoutines ( model ), \"prediction\" : None , \"evaluation\" : None }","title":"perform_job()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.Procedure","text":"Abstract class of the training procedure. Parameters: Name Type Description Default ABC class Helper class that provides a standard way to create an ABC using inheritance. required","title":"Procedure"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.Procedure.perform_job","text":"Abstractmethod of perform_job. Source code in ai2business/ai_engines/automl_neural_network.py @abstractmethod def perform_job ( self ): \"\"\"Abstractmethod of perform_job.\"\"\"","title":"perform_job()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.TextClassification","text":"TextClassification. Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required","title":"TextClassification"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.TextClassification.__init__","text":"Defining the common parameters for Text Classification. Parameters: Name Type Description Default directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models None num_classes int Number of classes. Defaults to None. None multi_label bool The target is multi-labeled. Defaults to False. False Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = None , num_classes : int = None , multi_label : bool = False , ** kwargs , ) -> None : \"\"\"Defining the common parameters for Text Classification. Args: directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models num_classes (int, optional): Number of classes. Defaults to None. multi_label (bool, optional): The target is multi-labeled. Defaults to False. \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = metrics self . seed = seed self . tuner = tuner self . num_classes = num_classes self . multi_label = multi_label self . kwargs = kwargs","title":"__init__()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.TextClassification.perform_job","text":"Perform the job for Text Classification. Parameters: Name Type Description Default automl_model dict (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. required Returns: Type Description dict dict: Updated the the model -section of the dictionary with a AutoKERAS-class for Text Classification. Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the job for Text Classification. Args: automl_model (dict): (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. Returns: dict: Updated the the `model`-section of the dictionary with a AutoKERAS-class for Text Classification. \"\"\" _ = automl_model model = AutoMLModels ( directory = self . directory , loss = self . loss , objective = self . objective , overwrite = self . overwrite , project_name = self . project_name , max_model_size = self . max_model_size , max_trials = self . max_trials , metrics = self . metrics , seed = self . seed , tuner = self . tuner , ) . text_classification ( num_classes = self . num_classes , multi_label = self . multi_label , ** self . kwargs , ) return { \"model\" : AutoMLRoutines ( model ), \"prediction\" : None , \"evaluation\" : None }","title":"perform_job()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.TextRegression","text":"TextRegression. Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required","title":"TextRegression"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.TextRegression.__init__","text":"Defining the common parameters for Text Regression. Parameters: Name Type Description Default directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models None output_dim int Number of output dimensions. Defaults to None. None Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = None , output_dim : int = None , ** kwargs , ) -> None : \"\"\"Defining the common parameters for Text Regression. Args: directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models output_dim (int, optional): Number of output dimensions. Defaults to None. \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = metrics self . seed = seed self . tuner = tuner self . output_dim = output_dim self . kwargs = kwargs","title":"__init__()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.TextRegression.perform_job","text":"Perform the job for Text Regression. Parameters: Name Type Description Default automl_model dict (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. required Returns: Type Description dict dict: Updated the the model -section of the dictionary with a AutoKERAS-class for Text Regression. Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the job for Text Regression. Args: automl_model (dict): (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. Returns: dict: Updated the the `model`-section of the dictionary with a AutoKERAS-class for Text Regression. \"\"\" _ = automl_model model = AutoMLModels ( directory = self . directory , loss = self . loss , objective = self . objective , overwrite = self . overwrite , project_name = self . project_name , max_model_size = self . max_model_size , max_trials = self . max_trials , metrics = self . metrics , seed = self . seed , tuner = self . tuner , ) . text_regression ( output_dim = self . output_dim , ** self . kwargs , ) return { \"model\" : AutoMLRoutines ( model ), \"prediction\" : None , \"evaluation\" : None }","title":"perform_job()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.TimeseriesForecaster","text":"TimeseriesForecaster Parameters: Name Type Description Default Procedure ABC Helper class that provides a standard way to create an ABC using inheritance. required","title":"TimeseriesForecaster"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.TimeseriesForecaster.__init__","text":"Defining the common parameters for Timeseries Forcast. Parameters: Name Type Description Default directory str Path of the directory to save the search outputs. Defaults to None. None loss str Keras loss function. Defaults to None, which means 'mean_squared_error'. None objective str Model metric. Defaults to \"val_loss\". 'val_loss' overwrite bool Overwrite existing projects. Defaults to False. False project_name str Project Name. Defaults to \"AutoML_DeepLearning\". 'AutoML_DeepLearning' max_model_size int Maximum number of models to evaluate. Defaults to None. None max_trials int Maximum number of trials for building a model. Defaults to 100. None metrics str The metric of the validation. Defaults to None. None seed int Random shuffling number. Defaults to None. None tuner str The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models None column_names list Name of the columns. Defaults to None. None column_types dict Type of the columns. Defaults to None. None output_dim int Number of output dimensions. Defaults to None. None lookback int History range for each prediction. Defaults to None. None predict_from int Starting point for the time series. Defaults to 1. 1 predict_until int Finishing point for the time series. Defaults to None. None Source code in ai2business/ai_engines/automl_neural_network.py def __init__ ( self , directory : str = None , loss : str = None , objective : str = \"val_loss\" , overwrite : bool = False , project_name : str = \"AutoML_DeepLearning\" , max_model_size : int = None , max_trials : int = None , metrics : str = None , seed : int = None , tuner : str = None , column_names : list = None , column_types : dict = None , output_dim : int = None , lookback : int = None , predict_from : int = 1 , predict_until : int = None , ** kwargs , ) -> None : \"\"\"Defining the common parameters for Timeseries Forcast. Args: directory (str, optional): Path of the directory to save the search outputs. Defaults to None. loss (str, optional): Keras loss function. Defaults to None, which means 'mean_squared_error'. objective (str, optional): Model metric. Defaults to \"val_loss\". overwrite (bool, optional): Overwrite existing projects. Defaults to False. project_name (str, optional): Project Name. Defaults to \"AutoML_DeepLearning\". max_model_size (int, optional): Maximum number of models to evaluate. Defaults to None. max_trials (int, optional): Maximum number of trials for building a model. Defaults to 100. metrics (str, optional): The metric of the validation. Defaults to None. seed (int, optional): Random shuffling number. Defaults to None. tuner (str, optional): The tuner is engine for suggestions the concept of the new models. It can be either a string 'greedy', 'bayesian', 'hyperband' or 'random' or a subclass of AutoTuner. If it is unspecific, the first evaluates the most commonly used models for the task before exploring other models column_names (list, optional): Name of the columns. Defaults to None. column_types (dict, optional): Type of the columns. Defaults to None. output_dim (int, optional): Number of output dimensions. Defaults to None. lookback (int, optional): History range for each prediction. Defaults to None. predict_from (int, optional): Starting point for the time series. Defaults to 1. predict_until (int, optional): Finishing point for the time series. Defaults to None. \"\"\" self . directory = directory self . loss = loss self . objective = objective self . overwrite = overwrite self . project_name = project_name self . max_model_size = max_model_size self . max_trials = max_trials self . metrics = ( metrics ,) self . seed = seed self . tuner = tuner self . column_names = column_names self . column_types = column_types self . output_dim = output_dim self . lookback = lookback self . predict_from = predict_from self . predict_until = predict_until self . kwargs = kwargs","title":"__init__()"},{"location":"deep_learning_api/#ai2business.ai_engines.automl_neural_network.TimeseriesForecaster.perform_job","text":"Perform the job for Timeseries Forcast. Parameters: Name Type Description Default automl_model dict (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. required Returns: Type Description dict dict: Updated the the model -section of the dictionary with a AutoKERAS-class for Timeseries Forcast. Source code in ai2business/ai_engines/automl_neural_network.py def perform_job ( self , automl_model : dict ) -> dict : \"\"\"Perform the job for Timeseries Forcast. Args: automl_model (dict): (Empty) dictionary for the AutoKERAS-class, prediction, and evaluation. Returns: dict: Updated the the `model`-section of the dictionary with a AutoKERAS-class for Timeseries Forcast. \"\"\" _ = automl_model model = AutoMLModels ( directory = self . directory , loss = self . loss , objective = self . objective , overwrite = self . overwrite , project_name = self . project_name , max_model_size = self . max_model_size , max_trials = self . max_trials , metrics = self . metrics , seed = self . seed , tuner = self . tuner , ) . timeseries_forecaster ( column_names = self . column_names , column_types = self . column_types , output_dim = self . output_dim , lookback = self . lookback , predict_from = self . predict_from , predict_until = self . predict_until , ** self . kwargs , ) return { \"model\" : AutoMLRoutines ( model ), \"prediction\" : None , \"evaluation\" : None }","title":"perform_job()"},{"location":"finance_collector_api/","text":"API of the Finance Collector Finance Collection Module: Collecting Financial and Ticker Trends via http-API. BuilderFinanceCollector BuilderTrendsCollector contains the abstract properties and methods. BuilderTrendsCollector specifies the properties and methods for creating the different parts of the DesignerFinanceCollector objects. Parameters: Name Type Description Default ABC class Helper class that provides a standard way to create an ABC using inheritance. required return_dataframe : None property readonly Abstract property of return_dataframe. return_dict : None property readonly Abstract property of return_dict. all_trickers () staticmethod Abstract staticmethod of all_tickers. Source code in ai2business/kpi_collector/finance_collector.py @abstractstaticmethod def all_trickers () -> None : \"\"\"Abstract staticmethod of all_tickers.\"\"\" get_actions ( self ) Abstract property of get_actions. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_actions ( self ) -> None : \"\"\"Abstract property of get_actions.\"\"\" get_balancesheet ( self ) Abstract method of get_balancesheet. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_balancesheet ( self ) -> None : \"\"\"Abstract method of get_balancesheet.\"\"\" get_calendar ( self ) Abstract method of get_calendar. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_calendar ( self ) -> None : \"\"\"Abstract method of get_calendar.\"\"\" get_cashflow ( self ) Abstract method of get_cashflow. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_cashflow ( self ) -> None : \"\"\"Abstract method of get_cashflow.\"\"\" get_chart_history ( self ) Abstract method of get_chart_history. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_chart_history ( self ) -> None : \"\"\"Abstract method of get_chart_history.\"\"\" get_dividends ( self ) Abstract method of get_dividends. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_dividends ( self ) -> None : \"\"\"Abstract method of get_dividends.\"\"\" get_earnings ( self ) Abstract method of get_earnings. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_earnings ( self ) -> None : \"\"\"Abstract method of get_earnings.\"\"\" get_financials ( self ) Abstract method of get_financials. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_financials ( self ) -> None : \"\"\"Abstract method of get_financials.\"\"\" get_info ( self ) Abstract method of get_info. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_info ( self ) -> None : \"\"\"Abstract method of get_info.\"\"\" get_institutional_holders ( self ) Abstract method of get_institutional_holders. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_institutional_holders ( self ) -> None : \"\"\"Abstract method of get_institutional_holders.\"\"\" get_isin_code ( self ) Abstract method of get_isin_code. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_isin_code ( self ) -> None : \"\"\"Abstract method of get_isin_code.\"\"\" get_major_holders ( self ) Abstract method of get_major_holders. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_major_holders ( self ) -> None : \"\"\"Abstract method of get_major_holders.\"\"\" get_mutualfund_holders ( self ) Abstract method of get_mutualfund_holders. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_mutualfund_holders ( self ) -> None : \"\"\"Abstract method of get_mutualfund_holders.\"\"\" get_options ( self ) Abstract method of get_options. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_options ( self ) -> None : \"\"\"Abstract method of get_options.\"\"\" get_quarterly_balancesheet ( self ) Abstract method of get_quarterly_balancesheet. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_quarterly_balancesheet ( self ) -> None : \"\"\"Abstract method of get_quarterly_balancesheet.\"\"\" get_quarterly_cashflow ( self ) Abstract method of get_quarterly_cashflow. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_quarterly_cashflow ( self ) -> None : \"\"\"Abstract method of get_quarterly_cashflow.\"\"\" get_quarterly_earnings ( self ) Abstract method of get_quarterly_earnings. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_quarterly_earnings ( self ) -> None : \"\"\"Abstract method of get_quarterly_earnings.\"\"\" get_quarterly_financials ( self ) Abstract method of get_quarterly_financials. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_quarterly_financials ( self ) -> None : \"\"\"Abstract method of get_quarterly_financials.\"\"\" get_recommendations ( self ) Abstract method of get_recommendations. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_recommendations ( self ) -> None : \"\"\"Abstract method of get_recommendations.\"\"\" get_splits ( self ) Abstract method of get_splits. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_splits ( self ) -> None : \"\"\"Abstract method of get_splits.\"\"\" get_sustainability ( self ) Abstract method of get_sustainability. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_sustainability ( self ) -> None : \"\"\"Abstract method of get_sustainability.\"\"\" DesignerFinanceCollector DesignerTrendsCollector contains the specific implementation of BuilderFinanceCollector . DesignerTrendsCollector contains the specific implementation of BuilderFinanceCollector based on the external library yfinance . Parameters: Name Type Description Default BuilderFinanceCollector class Abstract class that provides the implementations of the properties and methods. required return_dataframe : DataFrame property readonly Return the ticker results as dataframe. Returns: Type Description DataFrame pd.DataFrame: Two-dimensional, size-mutable, homogenous tabular data, which contains the ticker results as time-series. return_dict : dict property readonly Return the search results as dictionary. Note: return_dict is especially useful for getting analysis reports of tickers, market changes, or institutional forecasts. Returns: Type Description dict dict: Multi-dimensional, size-mutable, mainly heterogeneous data as dictionary, which contains the clustered or nested ticker results. __init__ ( self , keyword_list ) special Initialization of DesignerFinanceCollector Parameters: Name Type Description Default keyword_list list Keyword-list with the tickers to search for. required Source code in ai2business/kpi_collector/finance_collector.py def __init__ ( self , keyword_list : list ) -> None : \"\"\"Initialization of DesignerFinanceCollector Args: keyword_list (list): Keyword-list with the tickers to search for. \"\"\" self . keyword_list = keyword_list self . tickers = yf . Tickers ( \" \" . join ( self . keyword_list )) self . df = pd . DataFrame () self . dict = {} all_trickers ( tickers , keyword_list , func ) staticmethod all_trickers [summary] [extended_summary] Parameters: Name Type Description Default tickers Tickers Finance market data downloader. required keyword_list list Keyword-list with the tickers to search for. required func str Specific class as string. required Returns: Type Description DataFrame pd.DataFrame: Two-dimensional, size-mutable, heterogenous (table in a table) tabular data, which contains the ticker results of different companies. Source code in ai2business/kpi_collector/finance_collector.py @staticmethod def all_trickers ( tickers : yf . Tickers , keyword_list : list , func : str ) -> pd . DataFrame : \"\"\"all_trickers [summary] [extended_summary] Args: tickers (yf.Tickers): Finance market data downloader. keyword_list (list): Keyword-list with the tickers to search for. func (str): Specific class as string. Returns: pd.DataFrame: Two-dimensional, size-mutable, heterogenous (table in a table) tabular data, which contains the ticker results of different companies. \"\"\" return { keyword : getattr ( getattr ( tickers . tickers , keyword ), func ) for keyword in keyword_list } get_actions ( self ) Request for the dividends and splits of the ticker together. Source code in ai2business/kpi_collector/finance_collector.py def get_actions ( self ) -> None : \"\"\"Request for the dividends and splits of the ticker together.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"actions\" ) get_balancesheet ( self ) Request for the yearly balancesheet of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_balancesheet ( self ) -> None : \"\"\"Request for the yearly balancesheet of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"balancesheet\" , ) get_calendar ( self ) Request for information about upcoming events of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_calendar ( self ) -> None : \"\"\"Request for information about upcoming events of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"calendar\" ) get_cashflow ( self ) Request for the yearly cashflow of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_cashflow ( self ) -> None : \"\"\"Request for the yearly cashflow of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"cashflow\" , ) get_chart_history ( self , period , interval , start , end , prepost , actions , auto_adjust , proxy , threads , group_by , progress , ** kwargs ) Request the history of the chart for given tickers. Parameters: Name Type Description Default period str Period of the chart history; valid options: 1d , 5d , 1mo , 3mo , 6mo , 1y , 2y , 5y , 10y , or ytd,max . It can either be used the period -parameter or the combination of start - and end -parameter. required interval str Interval, respectively, time step in the period; valid options: 1m , 2m , 5m , 15m , 30m , 60m , 90m , 1h , 1d , 5d , 1wk , 1mo , or 3mo . The intraday data cannot extend last 60 days. required start str Download start date string (YYYY-MM-DD) or _datetime. required end str Download end date string (YYYY-MM-DD) or _datetime. required prepost bool Group by 'ticker' or 'column'. required actions bool Including Pre and Post market data in results. required auto_adjust bool Adjusting all OHLC automatically. required proxy str Downloading the dividend plus stock splits data. required threads bool Specifying the number of download threads. required group_by str Grouping by ticker or column. required progress bool Showing progress bar. required Source code in ai2business/kpi_collector/finance_collector.py def get_chart_history ( self , period : str , interval : str , start : str , end : str , prepost : bool , actions : bool , auto_adjust : bool , proxy : str , threads : bool , group_by : str , progress : bool , ** kwargs , ) -> None : \"\"\"Request the history of the chart for given tickers. Args: period (str): Period of the chart history; valid options: `1d`, `5d`, `1mo`, `3mo`, `6mo`, `1y`, `2y`, `5y`, `10y`, or `ytd,max`. It can either be used the `period`-parameter or the combination of `start`- and `end`-parameter. interval (str): Interval, respectively, time step in the period; valid options: `1m`, `2m`, `5m`, `15m`, `30m`, `60m`, `90m`, `1h`, `1d`, `5d`, `1wk`, `1mo`, or `3mo`. The intraday data cannot extend last 60 days. start (str): Download start date string (YYYY-MM-DD) or _datetime. end (str): Download end date string (YYYY-MM-DD) or _datetime. prepost (bool): Group by 'ticker' or 'column'. actions (bool): Including Pre and Post market data in results. auto_adjust (bool): Adjusting all OHLC automatically. proxy (str): Downloading the dividend plus stock splits data. threads (bool): Specifying the number of download threads. group_by (str): Grouping by ticker or column. progress (bool): Showing progress bar. \"\"\" self . df = self . tickers . history ( period = period , interval = interval , start = start , end = end , prepost = prepost , actions = actions , auto_adjust = auto_adjust , proxy = proxy , threads = threads , group_by = group_by , progress = progress , ** kwargs , ) get_dividends ( self ) Request for the dividend of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_dividends ( self ) -> None : \"\"\"Request for the dividend of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"dividends\" ) get_earnings ( self ) Request for the yearly earnings of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_earnings ( self ) -> None : \"\"\"Request for the yearly earnings of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"earnings\" , ) get_financials ( self ) Request for the yearly financial information of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_financials ( self ) -> None : \"\"\"Request for the yearly financial information of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"financials\" , ) get_info ( self ) Request for information about the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_info ( self ) -> None : \"\"\"Request for information about the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"info\" ) get_institutional_holders ( self ) Request for the institutional holders of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_institutional_holders ( self ) -> None : \"\"\"Request for the institutional holders of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"institutional_holders\" , ) get_isin_code ( self ) Request for the International Securities Identification Number (ISIN). Source code in ai2business/kpi_collector/finance_collector.py def get_isin_code ( self ) -> None : \"\"\"Request for the International Securities Identification Number (ISIN).\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"isin\" ) get_major_holders ( self ) Request for the major holders of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_major_holders ( self ) -> None : \"\"\"Request for the major holders of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"major_holders\" ) get_mutualfund_holders ( self ) Request for the mutualfund holders of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_mutualfund_holders ( self ) -> None : \"\"\"Request for the mutualfund holders of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"mutualfund_holders\" , ) get_options ( self ) Request for information about the options of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_options ( self ) -> None : \"\"\"Request for information about the options of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"options\" , ) get_quarterly_balancesheet ( self ) Request for the quarterly balancesheet of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_quarterly_balancesheet ( self ) -> None : \"\"\"Request for the quarterly balancesheet of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"quarterly_balancesheet\" , ) get_quarterly_cashflow ( self ) Request for the quarterly cashflow of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_quarterly_cashflow ( self ) -> None : \"\"\"Request for the quarterly cashflow of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"quarterly_cashflow\" , ) get_quarterly_earnings ( self ) Request for the yearly quarterly of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_quarterly_earnings ( self ) -> None : \"\"\"Request for the yearly quarterly of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"quarterly_earnings\" , ) get_quarterly_financials ( self ) Request for the quarterly financial information of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_quarterly_financials ( self ) -> None : \"\"\"Request for the quarterly financial information of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"quarterly_financials\" , ) get_recommendations ( self ) Request for the analyst recommendations for the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_recommendations ( self ) -> None : \"\"\"Request for the analyst recommendations for the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"recommendations\" , ) get_splits ( self ) Request for the splits of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_splits ( self ) -> None : \"\"\"Request for the splits of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"splits\" ) get_sustainability ( self ) Request for information about the sustainability of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_sustainability ( self ) -> None : \"\"\"Request for information about the sustainability of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"sustainability\" , ) FinanceCollector FinanceCollector is in charge for executing the functions. During the execution, FinanceCollector can construct several product variations using the same building steps. builder : BuilderFinanceCollector property writable Builder as a property with value None. Returns: Type Description BuilderFinanceCollector BuilderFinanceCollector: A builder class, that contains the abstract properties and methods. __init__ ( self ) special Initialize a fresh and empty builder. Source code in ai2business/kpi_collector/finance_collector.py def __init__ ( self ) -> None : \"\"\"Initialize a fresh and empty builder.\"\"\" self . _builder = None find_actions ( self ) Perform a search for the dividends and splits of the ticker together. Source code in ai2business/kpi_collector/finance_collector.py def find_actions ( self ) -> None : \"\"\"Perform a search for the dividends and splits of the ticker together.\"\"\" self . builder . get_actions () find_balancesheet ( self ) Perform a search for the yearly balancesheet of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_balancesheet ( self ) -> None : \"\"\"Perform a search for the yearly balancesheet of the ticker.\"\"\" self . builder . get_balancesheet () find_calendar ( self ) Perform a search for information about the upcoming events of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_calendar ( self ) -> None : \"\"\"Perform a search for information about the upcoming events of the ticker.\"\"\" self . builder . get_calendar () find_cashflow ( self ) Perform a search for the yearly cashflow of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_cashflow ( self ) -> None : \"\"\"Perform a search for the yearly cashflow of the ticker.\"\"\" self . builder . get_cashflow () find_chart_histogram ( self , period = '1mo' , interval = '1d' , start = None , end = None , prepost = False , actions = True , auto_adjust = True , proxy = None , threads = True , group_by = 'column' , progress = True , ** kwargs ) Performa a search about the history charts of the tickers. Parameters: Name Type Description Default period str Period of the chart history; valid options: 1d , 5d , 1mo , 3mo , 6mo , 1y , 2y , 5y , 10y , or ytd,max . It can either be used the period -parameter or the combination of start - and end -parameter. Defaults to \"1mo\". '1mo' interval str Interval, respectively, time step in the period; valid '1d' options 1m , 2m , 5m , 15m , 30m , 60m , 90m , 1h , 1d , 5d , 1wk , 1mo , or 3mo . The intraday data cannot extend last 60 days. Defaults to \"1d\". required start str Download start date string (YYYY-MM-DD) or _datetime. Defaults to None. None end str Download end date string (YYYY-MM-DD) or _datetime. Defaults to None. None prepost bool Group by 'ticker' or 'column'. Defaults to False. False actions bool Including Pre and Post market data in results. Defaults to True. True auto_adjust bool Adjusting all OHLC automatically. Defaults to True. True proxy str Downloading the dividend plus stock splits data. Defaults to None. None threads bool Specifying the number of download threads. Defaults to True. True group_by str Grouping by ticker or column.Defaults to \"column\". 'column' progress bool Showing progress bar. Defaults to True. True Source code in ai2business/kpi_collector/finance_collector.py def find_chart_histogram ( self , period : str = \"1mo\" , interval : str = \"1d\" , start : str = None , end : str = None , prepost : bool = False , actions : bool = True , auto_adjust : bool = True , proxy : str = None , threads : bool = True , group_by : str = \"column\" , progress : bool = True , ** kwargs , ) -> None : \"\"\"Performa a search about the history charts of the tickers. Args: period (str, optional): Period of the chart history; valid options: `1d`, `5d`, `1mo`, `3mo`, `6mo`, `1y`, `2y`, `5y`, `10y`, or `ytd,max`. It can either be used the `period`-parameter or the combination of `start`- and `end`-parameter. Defaults to \"1mo\". interval (str, optional): Interval, respectively, time step in the period; valid options: `1m`, `2m`, `5m`, `15m`, `30m`, `60m`, `90m`, `1h`, `1d`, `5d`, `1wk`, `1mo`, or `3mo`. The intraday data cannot extend last 60 days. Defaults to \"1d\". start (str, optional): Download start date string (YYYY-MM-DD) or _datetime. Defaults to None. end (str, optional): Download end date string (YYYY-MM-DD) or _datetime. Defaults to None. prepost (bool, optional): Group by 'ticker' or 'column'. Defaults to False. actions (bool, optional): Including Pre and Post market data in results. Defaults to True. auto_adjust (bool, optional): Adjusting all OHLC automatically. Defaults to True. proxy (str, optional): Downloading the dividend plus stock splits data. Defaults to None. threads (bool, optional): Specifying the number of download threads. Defaults to True. group_by (str, optional): Grouping by ticker or column.Defaults to \"column\". progress (bool, optional): Showing progress bar. Defaults to True. \"\"\" self . builder . get_chart_history ( period = period , interval = interval , start = start , end = end , prepost = prepost , actions = actions , auto_adjust = auto_adjust , proxy = proxy , threads = threads , group_by = group_by , progress = progress , ** kwargs , ) find_dividends ( self ) Perform a search for the dividends of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_dividends ( self ) -> None : \"\"\"Perform a search for the dividends of the ticker.\"\"\" self . builder . get_dividends () find_earnings ( self ) Perform a search for the yearly earnings of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_earnings ( self ) -> None : \"\"\"Perform a search for the yearly earnings of the ticker.\"\"\" self . builder . get_earnings () find_financials ( self ) Perform a search for the yearly financial information of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_financials ( self ) -> None : \"\"\"Perform a search for the yearly financial information of the ticker.\"\"\" self . builder . get_financials () find_info ( self ) Perform a search for the information about the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_info ( self ) -> None : \"\"\"Perform a search for the information about the ticker.\"\"\" self . builder . get_info () find_institutional_holders ( self ) Perform a search for the institutional holders of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_institutional_holders ( self ) -> None : \"\"\"Perform a search for the institutional holders of the ticker.\"\"\" self . builder . get_institutional_holders () find_isin_code ( self ) Perform a search for the International Securities Identification Number (ISIN). Source code in ai2business/kpi_collector/finance_collector.py def find_isin_code ( self ) -> None : \"\"\"Perform a search for the International Securities Identification Number (ISIN).\"\"\" self . builder . get_isin_code () find_major_holders ( self ) Perform a search for the major holders of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_major_holders ( self ) -> None : \"\"\"Perform a search for the major holders of the ticker.\"\"\" self . builder . get_major_holders () find_mutualfund_holders ( self ) Perform a search for the mutualfund holders of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_mutualfund_holders ( self ) -> None : \"\"\"Perform a search for the mutualfund holders of the ticker.\"\"\" self . builder . get_mutualfund_holders () find_options ( self ) Perform a search for the options of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_options ( self ) -> None : \"\"\"Perform a search for the options of the ticker.\"\"\" self . builder . get_options () find_quarterly_balancesheet ( self ) Perform a search for the quarterly balancesheet of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_quarterly_balancesheet ( self ) -> None : \"\"\"Perform a search for the quarterly balancesheet of the ticker.\"\"\" self . builder . get_quarterly_balancesheet () find_quarterly_cashflow ( self ) Perform a search for the quarterly cashflow of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_quarterly_cashflow ( self ) -> None : \"\"\"Perform a search for the quarterly cashflow of the ticker.\"\"\" self . builder . get_quarterly_cashflow () find_quarterly_earnings ( self ) Perform a search for the quarterly earnings of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_quarterly_earnings ( self ) -> None : \"\"\"Perform a search for the quarterly earnings of the ticker.\"\"\" self . builder . get_quarterly_earnings () find_quarterly_financials ( self ) Perform a search for the quarterly financial information of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_quarterly_financials ( self ) -> None : \"\"\"Perform a search for the quarterly financial information of the ticker.\"\"\" self . builder . get_quarterly_financials () find_recommendations ( self ) Perform a search for the analyst recommendations of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_recommendations ( self ) -> None : \"\"\"Perform a search for the analyst recommendations of the ticker.\"\"\" self . builder . get_recommendations () find_splits ( self ) Perform a search for the splits of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_splits ( self ) -> None : \"\"\"Perform a search for the splits of the ticker.\"\"\" self . builder . get_splits () find_sustainability ( self ) Perform a search for the sustainability of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_sustainability ( self ) -> None : \"\"\"Perform a search for the sustainability of the ticker.\"\"\" self . builder . get_sustainability ()","title":"Finance-Collector"},{"location":"finance_collector_api/#api-of-the-finance-collector","text":"","title":"API of the Finance Collector"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector","text":"Finance Collection Module: Collecting Financial and Ticker Trends via http-API.","title":"ai2business.kpi_collector.finance_collector"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector","text":"BuilderTrendsCollector contains the abstract properties and methods. BuilderTrendsCollector specifies the properties and methods for creating the different parts of the DesignerFinanceCollector objects. Parameters: Name Type Description Default ABC class Helper class that provides a standard way to create an ABC using inheritance. required","title":"BuilderFinanceCollector"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.return_dataframe","text":"Abstract property of return_dataframe.","title":"return_dataframe"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.return_dict","text":"Abstract property of return_dict.","title":"return_dict"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.all_trickers","text":"Abstract staticmethod of all_tickers. Source code in ai2business/kpi_collector/finance_collector.py @abstractstaticmethod def all_trickers () -> None : \"\"\"Abstract staticmethod of all_tickers.\"\"\"","title":"all_trickers()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_actions","text":"Abstract property of get_actions. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_actions ( self ) -> None : \"\"\"Abstract property of get_actions.\"\"\"","title":"get_actions()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_balancesheet","text":"Abstract method of get_balancesheet. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_balancesheet ( self ) -> None : \"\"\"Abstract method of get_balancesheet.\"\"\"","title":"get_balancesheet()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_calendar","text":"Abstract method of get_calendar. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_calendar ( self ) -> None : \"\"\"Abstract method of get_calendar.\"\"\"","title":"get_calendar()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_cashflow","text":"Abstract method of get_cashflow. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_cashflow ( self ) -> None : \"\"\"Abstract method of get_cashflow.\"\"\"","title":"get_cashflow()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_chart_history","text":"Abstract method of get_chart_history. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_chart_history ( self ) -> None : \"\"\"Abstract method of get_chart_history.\"\"\"","title":"get_chart_history()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_dividends","text":"Abstract method of get_dividends. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_dividends ( self ) -> None : \"\"\"Abstract method of get_dividends.\"\"\"","title":"get_dividends()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_earnings","text":"Abstract method of get_earnings. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_earnings ( self ) -> None : \"\"\"Abstract method of get_earnings.\"\"\"","title":"get_earnings()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_financials","text":"Abstract method of get_financials. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_financials ( self ) -> None : \"\"\"Abstract method of get_financials.\"\"\"","title":"get_financials()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_info","text":"Abstract method of get_info. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_info ( self ) -> None : \"\"\"Abstract method of get_info.\"\"\"","title":"get_info()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_institutional_holders","text":"Abstract method of get_institutional_holders. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_institutional_holders ( self ) -> None : \"\"\"Abstract method of get_institutional_holders.\"\"\"","title":"get_institutional_holders()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_isin_code","text":"Abstract method of get_isin_code. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_isin_code ( self ) -> None : \"\"\"Abstract method of get_isin_code.\"\"\"","title":"get_isin_code()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_major_holders","text":"Abstract method of get_major_holders. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_major_holders ( self ) -> None : \"\"\"Abstract method of get_major_holders.\"\"\"","title":"get_major_holders()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_mutualfund_holders","text":"Abstract method of get_mutualfund_holders. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_mutualfund_holders ( self ) -> None : \"\"\"Abstract method of get_mutualfund_holders.\"\"\"","title":"get_mutualfund_holders()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_options","text":"Abstract method of get_options. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_options ( self ) -> None : \"\"\"Abstract method of get_options.\"\"\"","title":"get_options()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_quarterly_balancesheet","text":"Abstract method of get_quarterly_balancesheet. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_quarterly_balancesheet ( self ) -> None : \"\"\"Abstract method of get_quarterly_balancesheet.\"\"\"","title":"get_quarterly_balancesheet()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_quarterly_cashflow","text":"Abstract method of get_quarterly_cashflow. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_quarterly_cashflow ( self ) -> None : \"\"\"Abstract method of get_quarterly_cashflow.\"\"\"","title":"get_quarterly_cashflow()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_quarterly_earnings","text":"Abstract method of get_quarterly_earnings. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_quarterly_earnings ( self ) -> None : \"\"\"Abstract method of get_quarterly_earnings.\"\"\"","title":"get_quarterly_earnings()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_quarterly_financials","text":"Abstract method of get_quarterly_financials. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_quarterly_financials ( self ) -> None : \"\"\"Abstract method of get_quarterly_financials.\"\"\"","title":"get_quarterly_financials()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_recommendations","text":"Abstract method of get_recommendations. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_recommendations ( self ) -> None : \"\"\"Abstract method of get_recommendations.\"\"\"","title":"get_recommendations()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_splits","text":"Abstract method of get_splits. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_splits ( self ) -> None : \"\"\"Abstract method of get_splits.\"\"\"","title":"get_splits()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.BuilderFinanceCollector.get_sustainability","text":"Abstract method of get_sustainability. Source code in ai2business/kpi_collector/finance_collector.py @abstractmethod def get_sustainability ( self ) -> None : \"\"\"Abstract method of get_sustainability.\"\"\"","title":"get_sustainability()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector","text":"DesignerTrendsCollector contains the specific implementation of BuilderFinanceCollector . DesignerTrendsCollector contains the specific implementation of BuilderFinanceCollector based on the external library yfinance . Parameters: Name Type Description Default BuilderFinanceCollector class Abstract class that provides the implementations of the properties and methods. required","title":"DesignerFinanceCollector"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.return_dataframe","text":"Return the ticker results as dataframe. Returns: Type Description DataFrame pd.DataFrame: Two-dimensional, size-mutable, homogenous tabular data, which contains the ticker results as time-series.","title":"return_dataframe"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.return_dict","text":"Return the search results as dictionary.","title":"return_dict"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.return_dict--note","text":"return_dict is especially useful for getting analysis reports of tickers, market changes, or institutional forecasts. Returns: Type Description dict dict: Multi-dimensional, size-mutable, mainly heterogeneous data as dictionary, which contains the clustered or nested ticker results.","title":"Note:"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.__init__","text":"Initialization of DesignerFinanceCollector Parameters: Name Type Description Default keyword_list list Keyword-list with the tickers to search for. required Source code in ai2business/kpi_collector/finance_collector.py def __init__ ( self , keyword_list : list ) -> None : \"\"\"Initialization of DesignerFinanceCollector Args: keyword_list (list): Keyword-list with the tickers to search for. \"\"\" self . keyword_list = keyword_list self . tickers = yf . Tickers ( \" \" . join ( self . keyword_list )) self . df = pd . DataFrame () self . dict = {}","title":"__init__()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.all_trickers","text":"all_trickers [summary] [extended_summary] Parameters: Name Type Description Default tickers Tickers Finance market data downloader. required keyword_list list Keyword-list with the tickers to search for. required func str Specific class as string. required Returns: Type Description DataFrame pd.DataFrame: Two-dimensional, size-mutable, heterogenous (table in a table) tabular data, which contains the ticker results of different companies. Source code in ai2business/kpi_collector/finance_collector.py @staticmethod def all_trickers ( tickers : yf . Tickers , keyword_list : list , func : str ) -> pd . DataFrame : \"\"\"all_trickers [summary] [extended_summary] Args: tickers (yf.Tickers): Finance market data downloader. keyword_list (list): Keyword-list with the tickers to search for. func (str): Specific class as string. Returns: pd.DataFrame: Two-dimensional, size-mutable, heterogenous (table in a table) tabular data, which contains the ticker results of different companies. \"\"\" return { keyword : getattr ( getattr ( tickers . tickers , keyword ), func ) for keyword in keyword_list }","title":"all_trickers()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_actions","text":"Request for the dividends and splits of the ticker together. Source code in ai2business/kpi_collector/finance_collector.py def get_actions ( self ) -> None : \"\"\"Request for the dividends and splits of the ticker together.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"actions\" )","title":"get_actions()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_balancesheet","text":"Request for the yearly balancesheet of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_balancesheet ( self ) -> None : \"\"\"Request for the yearly balancesheet of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"balancesheet\" , )","title":"get_balancesheet()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_calendar","text":"Request for information about upcoming events of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_calendar ( self ) -> None : \"\"\"Request for information about upcoming events of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"calendar\" )","title":"get_calendar()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_cashflow","text":"Request for the yearly cashflow of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_cashflow ( self ) -> None : \"\"\"Request for the yearly cashflow of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"cashflow\" , )","title":"get_cashflow()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_chart_history","text":"Request the history of the chart for given tickers. Parameters: Name Type Description Default period str Period of the chart history; valid options: 1d , 5d , 1mo , 3mo , 6mo , 1y , 2y , 5y , 10y , or ytd,max . It can either be used the period -parameter or the combination of start - and end -parameter. required interval str Interval, respectively, time step in the period; valid options: 1m , 2m , 5m , 15m , 30m , 60m , 90m , 1h , 1d , 5d , 1wk , 1mo , or 3mo . The intraday data cannot extend last 60 days. required start str Download start date string (YYYY-MM-DD) or _datetime. required end str Download end date string (YYYY-MM-DD) or _datetime. required prepost bool Group by 'ticker' or 'column'. required actions bool Including Pre and Post market data in results. required auto_adjust bool Adjusting all OHLC automatically. required proxy str Downloading the dividend plus stock splits data. required threads bool Specifying the number of download threads. required group_by str Grouping by ticker or column. required progress bool Showing progress bar. required Source code in ai2business/kpi_collector/finance_collector.py def get_chart_history ( self , period : str , interval : str , start : str , end : str , prepost : bool , actions : bool , auto_adjust : bool , proxy : str , threads : bool , group_by : str , progress : bool , ** kwargs , ) -> None : \"\"\"Request the history of the chart for given tickers. Args: period (str): Period of the chart history; valid options: `1d`, `5d`, `1mo`, `3mo`, `6mo`, `1y`, `2y`, `5y`, `10y`, or `ytd,max`. It can either be used the `period`-parameter or the combination of `start`- and `end`-parameter. interval (str): Interval, respectively, time step in the period; valid options: `1m`, `2m`, `5m`, `15m`, `30m`, `60m`, `90m`, `1h`, `1d`, `5d`, `1wk`, `1mo`, or `3mo`. The intraday data cannot extend last 60 days. start (str): Download start date string (YYYY-MM-DD) or _datetime. end (str): Download end date string (YYYY-MM-DD) or _datetime. prepost (bool): Group by 'ticker' or 'column'. actions (bool): Including Pre and Post market data in results. auto_adjust (bool): Adjusting all OHLC automatically. proxy (str): Downloading the dividend plus stock splits data. threads (bool): Specifying the number of download threads. group_by (str): Grouping by ticker or column. progress (bool): Showing progress bar. \"\"\" self . df = self . tickers . history ( period = period , interval = interval , start = start , end = end , prepost = prepost , actions = actions , auto_adjust = auto_adjust , proxy = proxy , threads = threads , group_by = group_by , progress = progress , ** kwargs , )","title":"get_chart_history()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_dividends","text":"Request for the dividend of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_dividends ( self ) -> None : \"\"\"Request for the dividend of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"dividends\" )","title":"get_dividends()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_earnings","text":"Request for the yearly earnings of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_earnings ( self ) -> None : \"\"\"Request for the yearly earnings of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"earnings\" , )","title":"get_earnings()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_financials","text":"Request for the yearly financial information of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_financials ( self ) -> None : \"\"\"Request for the yearly financial information of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"financials\" , )","title":"get_financials()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_info","text":"Request for information about the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_info ( self ) -> None : \"\"\"Request for information about the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"info\" )","title":"get_info()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_institutional_holders","text":"Request for the institutional holders of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_institutional_holders ( self ) -> None : \"\"\"Request for the institutional holders of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"institutional_holders\" , )","title":"get_institutional_holders()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_isin_code","text":"Request for the International Securities Identification Number (ISIN). Source code in ai2business/kpi_collector/finance_collector.py def get_isin_code ( self ) -> None : \"\"\"Request for the International Securities Identification Number (ISIN).\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"isin\" )","title":"get_isin_code()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_major_holders","text":"Request for the major holders of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_major_holders ( self ) -> None : \"\"\"Request for the major holders of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"major_holders\" )","title":"get_major_holders()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_mutualfund_holders","text":"Request for the mutualfund holders of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_mutualfund_holders ( self ) -> None : \"\"\"Request for the mutualfund holders of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"mutualfund_holders\" , )","title":"get_mutualfund_holders()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_options","text":"Request for information about the options of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_options ( self ) -> None : \"\"\"Request for information about the options of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"options\" , )","title":"get_options()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_quarterly_balancesheet","text":"Request for the quarterly balancesheet of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_quarterly_balancesheet ( self ) -> None : \"\"\"Request for the quarterly balancesheet of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"quarterly_balancesheet\" , )","title":"get_quarterly_balancesheet()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_quarterly_cashflow","text":"Request for the quarterly cashflow of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_quarterly_cashflow ( self ) -> None : \"\"\"Request for the quarterly cashflow of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"quarterly_cashflow\" , )","title":"get_quarterly_cashflow()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_quarterly_earnings","text":"Request for the yearly quarterly of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_quarterly_earnings ( self ) -> None : \"\"\"Request for the yearly quarterly of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"quarterly_earnings\" , )","title":"get_quarterly_earnings()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_quarterly_financials","text":"Request for the quarterly financial information of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_quarterly_financials ( self ) -> None : \"\"\"Request for the quarterly financial information of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"quarterly_financials\" , )","title":"get_quarterly_financials()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_recommendations","text":"Request for the analyst recommendations for the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_recommendations ( self ) -> None : \"\"\"Request for the analyst recommendations for the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"recommendations\" , )","title":"get_recommendations()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_splits","text":"Request for the splits of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_splits ( self ) -> None : \"\"\"Request for the splits of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"splits\" )","title":"get_splits()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.DesignerFinanceCollector.get_sustainability","text":"Request for information about the sustainability of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def get_sustainability ( self ) -> None : \"\"\"Request for information about the sustainability of the ticker.\"\"\" self . dict = self . all_trickers ( tickers = self . tickers , keyword_list = self . keyword_list , func = \"sustainability\" , )","title":"get_sustainability()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector","text":"FinanceCollector is in charge for executing the functions. During the execution, FinanceCollector can construct several product variations using the same building steps.","title":"FinanceCollector"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.builder","text":"Builder as a property with value None. Returns: Type Description BuilderFinanceCollector BuilderFinanceCollector: A builder class, that contains the abstract properties and methods.","title":"builder"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.__init__","text":"Initialize a fresh and empty builder. Source code in ai2business/kpi_collector/finance_collector.py def __init__ ( self ) -> None : \"\"\"Initialize a fresh and empty builder.\"\"\" self . _builder = None","title":"__init__()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_actions","text":"Perform a search for the dividends and splits of the ticker together. Source code in ai2business/kpi_collector/finance_collector.py def find_actions ( self ) -> None : \"\"\"Perform a search for the dividends and splits of the ticker together.\"\"\" self . builder . get_actions ()","title":"find_actions()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_balancesheet","text":"Perform a search for the yearly balancesheet of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_balancesheet ( self ) -> None : \"\"\"Perform a search for the yearly balancesheet of the ticker.\"\"\" self . builder . get_balancesheet ()","title":"find_balancesheet()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_calendar","text":"Perform a search for information about the upcoming events of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_calendar ( self ) -> None : \"\"\"Perform a search for information about the upcoming events of the ticker.\"\"\" self . builder . get_calendar ()","title":"find_calendar()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_cashflow","text":"Perform a search for the yearly cashflow of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_cashflow ( self ) -> None : \"\"\"Perform a search for the yearly cashflow of the ticker.\"\"\" self . builder . get_cashflow ()","title":"find_cashflow()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_chart_histogram","text":"Performa a search about the history charts of the tickers. Parameters: Name Type Description Default period str Period of the chart history; valid options: 1d , 5d , 1mo , 3mo , 6mo , 1y , 2y , 5y , 10y , or ytd,max . It can either be used the period -parameter or the combination of start - and end -parameter. Defaults to \"1mo\". '1mo' interval str Interval, respectively, time step in the period; valid '1d' options 1m , 2m , 5m , 15m , 30m , 60m , 90m , 1h , 1d , 5d , 1wk , 1mo , or 3mo . The intraday data cannot extend last 60 days. Defaults to \"1d\". required start str Download start date string (YYYY-MM-DD) or _datetime. Defaults to None. None end str Download end date string (YYYY-MM-DD) or _datetime. Defaults to None. None prepost bool Group by 'ticker' or 'column'. Defaults to False. False actions bool Including Pre and Post market data in results. Defaults to True. True auto_adjust bool Adjusting all OHLC automatically. Defaults to True. True proxy str Downloading the dividend plus stock splits data. Defaults to None. None threads bool Specifying the number of download threads. Defaults to True. True group_by str Grouping by ticker or column.Defaults to \"column\". 'column' progress bool Showing progress bar. Defaults to True. True Source code in ai2business/kpi_collector/finance_collector.py def find_chart_histogram ( self , period : str = \"1mo\" , interval : str = \"1d\" , start : str = None , end : str = None , prepost : bool = False , actions : bool = True , auto_adjust : bool = True , proxy : str = None , threads : bool = True , group_by : str = \"column\" , progress : bool = True , ** kwargs , ) -> None : \"\"\"Performa a search about the history charts of the tickers. Args: period (str, optional): Period of the chart history; valid options: `1d`, `5d`, `1mo`, `3mo`, `6mo`, `1y`, `2y`, `5y`, `10y`, or `ytd,max`. It can either be used the `period`-parameter or the combination of `start`- and `end`-parameter. Defaults to \"1mo\". interval (str, optional): Interval, respectively, time step in the period; valid options: `1m`, `2m`, `5m`, `15m`, `30m`, `60m`, `90m`, `1h`, `1d`, `5d`, `1wk`, `1mo`, or `3mo`. The intraday data cannot extend last 60 days. Defaults to \"1d\". start (str, optional): Download start date string (YYYY-MM-DD) or _datetime. Defaults to None. end (str, optional): Download end date string (YYYY-MM-DD) or _datetime. Defaults to None. prepost (bool, optional): Group by 'ticker' or 'column'. Defaults to False. actions (bool, optional): Including Pre and Post market data in results. Defaults to True. auto_adjust (bool, optional): Adjusting all OHLC automatically. Defaults to True. proxy (str, optional): Downloading the dividend plus stock splits data. Defaults to None. threads (bool, optional): Specifying the number of download threads. Defaults to True. group_by (str, optional): Grouping by ticker or column.Defaults to \"column\". progress (bool, optional): Showing progress bar. Defaults to True. \"\"\" self . builder . get_chart_history ( period = period , interval = interval , start = start , end = end , prepost = prepost , actions = actions , auto_adjust = auto_adjust , proxy = proxy , threads = threads , group_by = group_by , progress = progress , ** kwargs , )","title":"find_chart_histogram()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_dividends","text":"Perform a search for the dividends of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_dividends ( self ) -> None : \"\"\"Perform a search for the dividends of the ticker.\"\"\" self . builder . get_dividends ()","title":"find_dividends()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_earnings","text":"Perform a search for the yearly earnings of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_earnings ( self ) -> None : \"\"\"Perform a search for the yearly earnings of the ticker.\"\"\" self . builder . get_earnings ()","title":"find_earnings()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_financials","text":"Perform a search for the yearly financial information of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_financials ( self ) -> None : \"\"\"Perform a search for the yearly financial information of the ticker.\"\"\" self . builder . get_financials ()","title":"find_financials()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_info","text":"Perform a search for the information about the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_info ( self ) -> None : \"\"\"Perform a search for the information about the ticker.\"\"\" self . builder . get_info ()","title":"find_info()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_institutional_holders","text":"Perform a search for the institutional holders of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_institutional_holders ( self ) -> None : \"\"\"Perform a search for the institutional holders of the ticker.\"\"\" self . builder . get_institutional_holders ()","title":"find_institutional_holders()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_isin_code","text":"Perform a search for the International Securities Identification Number (ISIN). Source code in ai2business/kpi_collector/finance_collector.py def find_isin_code ( self ) -> None : \"\"\"Perform a search for the International Securities Identification Number (ISIN).\"\"\" self . builder . get_isin_code ()","title":"find_isin_code()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_major_holders","text":"Perform a search for the major holders of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_major_holders ( self ) -> None : \"\"\"Perform a search for the major holders of the ticker.\"\"\" self . builder . get_major_holders ()","title":"find_major_holders()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_mutualfund_holders","text":"Perform a search for the mutualfund holders of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_mutualfund_holders ( self ) -> None : \"\"\"Perform a search for the mutualfund holders of the ticker.\"\"\" self . builder . get_mutualfund_holders ()","title":"find_mutualfund_holders()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_options","text":"Perform a search for the options of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_options ( self ) -> None : \"\"\"Perform a search for the options of the ticker.\"\"\" self . builder . get_options ()","title":"find_options()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_quarterly_balancesheet","text":"Perform a search for the quarterly balancesheet of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_quarterly_balancesheet ( self ) -> None : \"\"\"Perform a search for the quarterly balancesheet of the ticker.\"\"\" self . builder . get_quarterly_balancesheet ()","title":"find_quarterly_balancesheet()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_quarterly_cashflow","text":"Perform a search for the quarterly cashflow of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_quarterly_cashflow ( self ) -> None : \"\"\"Perform a search for the quarterly cashflow of the ticker.\"\"\" self . builder . get_quarterly_cashflow ()","title":"find_quarterly_cashflow()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_quarterly_earnings","text":"Perform a search for the quarterly earnings of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_quarterly_earnings ( self ) -> None : \"\"\"Perform a search for the quarterly earnings of the ticker.\"\"\" self . builder . get_quarterly_earnings ()","title":"find_quarterly_earnings()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_quarterly_financials","text":"Perform a search for the quarterly financial information of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_quarterly_financials ( self ) -> None : \"\"\"Perform a search for the quarterly financial information of the ticker.\"\"\" self . builder . get_quarterly_financials ()","title":"find_quarterly_financials()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_recommendations","text":"Perform a search for the analyst recommendations of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_recommendations ( self ) -> None : \"\"\"Perform a search for the analyst recommendations of the ticker.\"\"\" self . builder . get_recommendations ()","title":"find_recommendations()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_splits","text":"Perform a search for the splits of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_splits ( self ) -> None : \"\"\"Perform a search for the splits of the ticker.\"\"\" self . builder . get_splits ()","title":"find_splits()"},{"location":"finance_collector_api/#ai2business.kpi_collector.finance_collector.FinanceCollector.find_sustainability","text":"Perform a search for the sustainability of the ticker. Source code in ai2business/kpi_collector/finance_collector.py def find_sustainability ( self ) -> None : \"\"\"Perform a search for the sustainability of the ticker.\"\"\" self . builder . get_sustainability ()","title":"find_sustainability()"},{"location":"sample_generator_api/","text":"API of the Datsets Tools Generates sample list of KPIs SampleGenerators Sample Generators allows to generate key word list. Example The module sample_generator.py contains functions, which allows generating a list of keywords with and without acronym. # Get ticker values of the leading stock markert worldwide. stock_market ( indices : str = \"DOWJONES\" ) -> dict stock_market ( indices = 'DOWJONES' ) Returns all company names and ISIN for a given stock market. Parameters: Name Type Description Default indices str Name of the stock market. Defaults to \"DOWJONES\". 'DOWJONES' Returns: Type Description dict dict: Collection of the indices of the current stock market. Source code in ai2business/datasets/sample_generator.py def stock_market ( indices : str = \"DOWJONES\" ) -> dict : \"\"\"Returns all company names and ISIN for a given stock market. Args: indices (str, optional): Name of the stock market. Defaults to \"DOWJONES\". Returns: dict: Collection of the indices of the current stock market. \"\"\" try : return database . StockMarket . __dict__ [ indices . lower ()] except KeyError as exc : print ( f \"ERROR: { exc } -> Indices is not listed in the database!\" ) return {}","title":"Sample Generator"},{"location":"sample_generator_api/#api-of-the-datsets-tools","text":"","title":"API of the Datsets Tools"},{"location":"sample_generator_api/#ai2business.datasets.sample_generator","text":"Generates sample list of KPIs","title":"ai2business.datasets.sample_generator"},{"location":"sample_generator_api/#ai2business.datasets.sample_generator.SampleGenerators","text":"Sample Generators allows to generate key word list. Example The module sample_generator.py contains functions, which allows generating a list of keywords with and without acronym. # Get ticker values of the leading stock markert worldwide. stock_market ( indices : str = \"DOWJONES\" ) -> dict","title":"SampleGenerators"},{"location":"sample_generator_api/#ai2business.datasets.sample_generator.stock_market","text":"Returns all company names and ISIN for a given stock market. Parameters: Name Type Description Default indices str Name of the stock market. Defaults to \"DOWJONES\". 'DOWJONES' Returns: Type Description dict dict: Collection of the indices of the current stock market. Source code in ai2business/datasets/sample_generator.py def stock_market ( indices : str = \"DOWJONES\" ) -> dict : \"\"\"Returns all company names and ISIN for a given stock market. Args: indices (str, optional): Name of the stock market. Defaults to \"DOWJONES\". Returns: dict: Collection of the indices of the current stock market. \"\"\" try : return database . StockMarket . __dict__ [ indices . lower ()] except KeyError as exc : print ( f \"ERROR: { exc } -> Indices is not listed in the database!\" ) return {}","title":"stock_market()"},{"location":"trends_collector_api/","text":"API of the Trends Collector Trends Collection Module: Collecting Search Trends via http-API. BuilderTrendsCollector BuilderTrendsCollector contains the abstract properties and methods. BuilderTrendsCollector specifies the properties and methods for creating the different parts of the DesignerTrendsCollector objects. Parameters: Name Type Description Default ABC class Helper class that provides a standard way to create an ABC using inheritance. required trends : None property readonly Abstract property of trends. get_categories ( self ) Abstract method of get_categories. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_categories ( self ) -> None : \"\"\"Abstract method of get_categories.\"\"\" get_historical_interest ( self ) Abstract method of get_historical_interest. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_historical_interest ( self ): \"\"\"Abstract method of get_historical_interest.\"\"\" get_interest_by_region ( self ) Abstract method of get_interest_by_region. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_interest_by_region ( self ) -> None : \"\"\"Abstract method of get_interest_by_region.\"\"\" get_interest_over_time ( self ) Abstract method of get_interest_over_time. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_interest_over_time ( self ) -> None : \"\"\"Abstract method of get_interest_over_time.\"\"\" get_related_queries ( self ) Abstract extended_summary of get_related_queries. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_related_queries ( self ) -> None : \"\"\"Abstract extended_summary of get_related_queries.\"\"\" get_related_topics ( self ) Abstract method of get_related_topics. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_related_topics ( self ) -> None : \"\"\"Abstract method of get_related_topics.\"\"\" get_suggestions ( self ) Abstract method of get_suggestions. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_suggestions ( self ) -> None : \"\"\"Abstract method of get_suggestions.\"\"\" get_today_searches ( self ) Abstract method of get_today_searches. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_today_searches ( self ) -> None : \"\"\"Abstract method of get_today_searches.\"\"\" get_top_charts ( self ) Abstract method of get_top_charts. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_top_charts ( self ) -> None : \"\"\"Abstract method of get_top_charts.\"\"\" get_trending_searches ( self ) Abstract method of get_trending_searches. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_trending_searches ( self ) -> None : \"\"\"Abstract method of get_trending_searches.\"\"\" reset ( self ) Abstract method of reset. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def reset ( self ) -> None : \"\"\"Abstract method of reset.\"\"\" DesignerTrendsCollector DesignerTrendsCollector contains the specific implementation of BuilderTrendsCollector . DesignerTrendsCollector contains the specific implementation of BuilderTrendsCollector based on the external library pytrends . Parameters: Name Type Description Default BuilderTrendsCollector class Abstract class that provides the implementations of the properties and methods. required trends : TrendProduct property readonly Return the trend results. Returns: Type Description TrendProduct TrendProduct: (class) TrendProduct contains the dictionary and the return value of it. __init__ ( self , keyword_list , timeframe = 'today 5-y' , language = 'en-US' , category = 0 , timezone = 360 , country = '' , property_filter = '' , ** kwargs ) special Initialization of DesignerTrendsCollector Parameters: Name Type Description Default keyword_list list Keyword-list with the items to search for. required timeframe str Time frame, respectively, period to search for. Defaults to \"today 5-y\". 'today 5-y' language str Search language. Defaults to \"en-US\". 'en-US' category int Define a specific search category . Defaults to 0. 0 timezone int Search timezone . Defaults to 360. 360 country str The country, where to search for. Defaults to \"\". '' property_filter str Property filer of the search; only in news, images, YouTube, shopping. Defaults to \"\". '' Source code in ai2business/kpi_collector/trends_collector.py def __init__ ( self , keyword_list : list , timeframe : str = \"today 5-y\" , language : str = \"en-US\" , category : int = 0 , timezone : int = 360 , country : str = \"\" , property_filter = \"\" , ** kwargs , ) -> None : \"\"\"Initialization of DesignerTrendsCollector Args: keyword_list (list): Keyword-list with the items to search for. timeframe (str, optional): Time frame, respectively, period to search for. Defaults to \"today 5-y\". language (str, optional): Search language. Defaults to \"en-US\". category (int, optional): Define a specific [search category](https://github.com/pat310/google-trends-api/wiki/Google-Trends-Categories). Defaults to 0. timezone (int, optional): [Search timezone](https://developers.google.com/maps/documentation/timezone/overview). Defaults to 360. country (str, optional): The country, where to search for. Defaults to \"\". property_filter (str, optional): Property filer of the search; only in news, images, YouTube, shopping. Defaults to \"\". \"\"\" self . keyword_list = keyword_list self . timeframe = timeframe self . language = language self . category = category self . timezone = timezone self . country = country self . property_filter = property_filter self . pytrends = TrendReq ( hl = self . language , tz = self . timezone , ** kwargs ) self . pytrends . build_payload ( kw_list = self . keyword_list , cat = self . category , timeframe = self . timeframe , geo = self . country , gprop = self . property_filter , ) self . reset () get_categories ( self ) Request available categories data for the current search. Source code in ai2business/kpi_collector/trends_collector.py def get_categories ( self ) -> None : \"\"\"Request available categories data for the current search.\"\"\" self . _product . add_product ( key = self . get_categories , value = self . pytrends . categories (), ) get_historical_interest ( self , year_start , month_start , day_start , hour_start , year_end , month_end , day_end , hour_end , ** kwargs ) Request data from a hour-grided time search. Parameters: Name Type Description Default year_start int Starting year required month_start int Starting month required day_start int Starting day required hour_start int Starting hour required year_end int Final year required month_end int Final month required day_end int Final day required hour_end int Final hour required Source code in ai2business/kpi_collector/trends_collector.py def get_historical_interest ( self , year_start : int , month_start : int , day_start : int , hour_start : int , year_end : int , month_end : int , day_end : int , hour_end : int , ** kwargs , ) -> None : \"\"\"Request data from a hour-grided time search. Args: year_start (int): Starting year month_start (int): Starting month day_start (int): Starting day hour_start (int): Starting hour year_end (int): Final year month_end (int): Final month day_end (int): Final day hour_end (int): Final hour \"\"\" self . _product . add_product ( key = self . get_historical_interest , value = self . pytrends . get_historical_interest ( keywords = self . keyword_list , year_start = year_start , month_start = month_start , day_start = day_start , hour_start = hour_start , year_end = year_end , month_end = month_end , day_end = day_end , hour_end = hour_end , cat = self . category , geo = self . country , gprop = self . property_filter , ** kwargs , ), ) get_interest_by_region ( self , resolution , ** kwargs ) Request data from a interest by region search. Parameters: Name Type Description Default resolution str The resolution of the subregion. required Source code in ai2business/kpi_collector/trends_collector.py def get_interest_by_region ( self , resolution : str , ** kwargs ) -> None : \"\"\"Request data from a interest by region search. Args: resolution (str): The resolution of the subregion. \"\"\" self . _product . add_product ( key = self . get_interest_by_region , value = self . pytrends . interest_by_region ( resolution = resolution , ** kwargs ), ) get_interest_over_time ( self ) Request data from a interest over time search. Source code in ai2business/kpi_collector/trends_collector.py def get_interest_over_time ( self ) -> None : \"\"\"Request data from a interest over time search.\"\"\" self . _product . add_product ( key = self . get_interest_over_time , value = self . pytrends . interest_over_time (), ) get_related_queries ( self ) Request data of a related queries based on the keyword. Source code in ai2business/kpi_collector/trends_collector.py def get_related_queries ( self ) -> None : \"\"\"Request data of a related queries based on the keyword.\"\"\" self . _product . add_product ( key = self . get_related_queries , value = self . pytrends . related_queries (), ) get_related_topics ( self ) Request data of a related topics based on the keyword. Source code in ai2business/kpi_collector/trends_collector.py def get_related_topics ( self ) -> None : \"\"\"Request data of a related topics based on the keyword.\"\"\" self . _product . add_product ( key = self . get_related_topics , value = self . pytrends . related_topics () ) get_suggestions ( self ) Request data from keyword suggestion dropdown search. Source code in ai2business/kpi_collector/trends_collector.py def get_suggestions ( self ) -> None : \"\"\"Request data from keyword suggestion dropdown search.\"\"\" self . _product . add_product ( key = self . get_suggestions , value = { keyword : self . pytrends . suggestions ( keyword = keyword ) for keyword in self . keyword_list }, ) get_today_searches ( self , today_country ) Request data from the daily search trends. Parameters: Name Type Description Default today_country str Name of the country of intrest. required Source code in ai2business/kpi_collector/trends_collector.py def get_today_searches ( self , today_country : str ) -> None : \"\"\"Request data from the daily search trends. Args: today_country (str): Name of the country of intrest. \"\"\" self . _product . add_product ( key = self . get_today_searches , value = self . pytrends . today_searches ( pn = today_country ), ) get_top_charts ( self , date , top_country ) Request data from a top charts search. Parameters: Name Type Description Default date int Year required top_country str Name of the country of intrest. required Source code in ai2business/kpi_collector/trends_collector.py def get_top_charts ( self , date : int , top_country : str ) -> None : \"\"\"Request data from a top charts search. Args: date (int): Year top_country (str): Name of the country of intrest. \"\"\" self . _product . add_product ( key = self . get_top_charts , value = self . pytrends . top_charts ( date , hl = self . language , tz = self . timezone , geo = top_country ), ) get_trending_searches ( self , trend_country ) Request data from a search by country. Parameters: Name Type Description Default trend_country str Name of the country of intrest. Defaults to \"united_states\". required Source code in ai2business/kpi_collector/trends_collector.py def get_trending_searches ( self , trend_country : str ) -> None : \"\"\"Request data from a search by country. Args: trend_country (str, optional): Name of the country of intrest. Defaults to \"united_states\". \"\"\" self . _product . add_product ( key = self . get_trending_searches , value = self . pytrends . trending_searches ( pn = trend_country ), ) reset ( self ) Reset the product to empty. Source code in ai2business/kpi_collector/trends_collector.py def reset ( self ) -> None : \"\"\"Reset the product to empty.\"\"\" self . _product = TrendProduct () TrendProduct TrendProduct contains the dictionary and the return value of it. list_product_parts : str property readonly List of the product parts in the dictionary. return_product : dict property readonly Returns the product as a dictionary Returns: Type Description dict dict: The product dictionary contains the product and ist function name as key . __init__ ( self ) special Initialization of TrendProduct. Source code in ai2business/kpi_collector/trends_collector.py def __init__ ( self ) -> None : \"\"\"Initialization of TrendProduct.\"\"\" self . product_parts = {} add_product ( self , key , value ) Add the components of the trend search to the dictionary. Parameters: Name Type Description Default key Callable Used trend search function required value DataFrame Return value as dataframe or dictionary of the function. required Source code in ai2business/kpi_collector/trends_collector.py def add_product ( self , key : Callable , value : pd . DataFrame or dict ) -> None : \"\"\"Add the components of the trend search to the dictionary. Args: key (Callable): Used trend search function value (pd.DataFrame or dict): Return value as dataframe or dictionary of the function. \"\"\" self . product_parts [ key . __name__ ] = value TrendsCollector TrendsCollector is in charge for executing the functions. During the execution, TrendsCollector can construct several product variations using the same building steps. builder : BuilderTrendsCollector property writable Builder as a property with value None. Returns: Type Description BuilderTrendsCollector BuilderTrendsCollector: A builder class, that contains the abstract properties and methods. __init__ ( self ) special Initialize a fresh and empty builder. Source code in ai2business/kpi_collector/trends_collector.py def __init__ ( self ) -> None : \"\"\"Initialize a fresh and empty builder.\"\"\" self . _builder = None find_categories ( self ) Perform a search about the current search categories. Source code in ai2business/kpi_collector/trends_collector.py def find_categories ( self ) -> None : \"\"\"Perform a search about the current search categories.\"\"\" self . builder . get_categories () find_historical_interest ( self , year_start , month_start , day_start , hour_start , year_end , month_end , day_end , hour_end , ** kwargs ) Preform a search trend analysis for a given time period in hour steps. Parameters: Name Type Description Default year_start int Starting year required month_start int Starting month required day_start int Starting day required hour_start int Starting hour required year_end int Final year required month_end int Final month required day_end int Final day required hour_end int Final hour required Source code in ai2business/kpi_collector/trends_collector.py def find_historical_interest ( self , year_start : int , month_start : int , day_start : int , hour_start : int , year_end : int , month_end : int , day_end : int , hour_end : int , ** kwargs , ) -> None : \"\"\"Preform a search trend analysis for a given time period in hour steps. Args: year_start (int): Starting year month_start (int): Starting month day_start (int): Starting day hour_start (int): Starting hour year_end (int): Final year month_end (int): Final month day_end (int): Final day hour_end (int): Final hour \"\"\" try : self . builder . get_historical_interest ( year_start = year_start , month_start = month_start , day_start = day_start , hour_start = hour_start , year_end = year_end , month_end = month_end , day_end = day_end , hour_end = hour_end , ** kwargs , ) except ValueError as exc : print ( f \"ERROR: { exc } -> Date is illegal!\" ) find_interest_by_region ( self , resolution = 'COUNTRY' , ** kwargs ) Perform a interest over region search. Parameters: Name Type Description Default resolution str The resolution of the subregion. Defaults to \"COUNTRY\". 'COUNTRY' Source code in ai2business/kpi_collector/trends_collector.py def find_interest_by_region ( self , resolution : str = \"COUNTRY\" , ** kwargs ) -> None : \"\"\"Perform a interest over region search. Args: resolution (str, optional): The resolution of the subregion. Defaults to \"COUNTRY\". \"\"\" self . builder . get_interest_by_region ( resolution = resolution , ** kwargs ) find_interest_over_time ( self ) Perform a interest over time search. Source code in ai2business/kpi_collector/trends_collector.py def find_interest_over_time ( self ) -> None : \"\"\"Perform a interest over time search.\"\"\" self . builder . get_interest_over_time () find_related_queries ( self ) Perform a search about the related queries to a keyword. Source code in ai2business/kpi_collector/trends_collector.py def find_related_queries ( self ) -> None : \"\"\"Perform a search about the related queries to a keyword.\"\"\" self . builder . get_related_queries () find_related_topics ( self ) Perform a search about the related topics to a keyword. Source code in ai2business/kpi_collector/trends_collector.py def find_related_topics ( self ) -> None : \"\"\"Perform a search about the related topics to a keyword.\"\"\" self . builder . get_related_topics () find_suggestions ( self ) Perform a search about suggestions for a given keyword. Source code in ai2business/kpi_collector/trends_collector.py def find_suggestions ( self ) -> None : \"\"\"Perform a search about suggestions for a given keyword.\"\"\" self . builder . get_suggestions () find_today_searches ( self , today_country = 'US' ) Perform a search analysis about today's hot topics. Parameters: Name Type Description Default today_country str Name of the country of intrest. Defaults to \"US\". 'US' Source code in ai2business/kpi_collector/trends_collector.py def find_today_searches ( self , today_country : str = \"US\" ) -> None : \"\"\"Perform a search analysis about today's hot topics. Args: today_country (str, optional): Name of the country of intrest. Defaults to \"US\". \"\"\" self . builder . get_today_searches ( today_country = today_country ) find_top_charts ( self , date , top_country = 'GLOBAL' ) Perform a search chart analysis. Parameters: Name Type Description Default date int Year required top_country str [description]. Defaults to \"GLOBAL\". 'GLOBAL' Source code in ai2business/kpi_collector/trends_collector.py def find_top_charts ( self , date : int , top_country : str = \"GLOBAL\" ) -> None : \"\"\"Perform a search chart analysis. Args: date (int): Year top_country (str, optional): [description]. Defaults to \"GLOBAL\". \"\"\" try : self . builder . get_top_charts ( date = date , top_country = top_country ) except IndexError as exc : print ( f \"ERROR: { exc } -> Date is illegal!\" ) find_trending_searches ( self , trend_country = 'united_states' ) Performa a search trend analysis. Parameters: Name Type Description Default trend_country str Name of the country of intrest. Defaults to \"united_states\". 'united_states' Source code in ai2business/kpi_collector/trends_collector.py def find_trending_searches ( self , trend_country : str = \"united_states\" ) -> None : \"\"\"Performa a search trend analysis. Args: trend_country (str, optional): Name of the country of intrest. Defaults to \"united_states\". \"\"\" self . builder . get_trending_searches ( trend_country = trend_country ) make_wordcloud ( self ) Make a worldcloud of related words and their suggestions. Note: The summation of different search engines can cause timeout errors due to length of the search. Source code in ai2business/kpi_collector/trends_collector.py def make_wordcloud ( self ) -> None : \"\"\"Make a worldcloud of related words and their suggestions. Note: --- The summation of different search engines can cause timeout errors due to length of the search. \"\"\" self . builder . get_related_topics () self . builder . get_related_queries () self . builder . get_suggestions () self . builder . get_categories ()","title":"Trends-Collector"},{"location":"trends_collector_api/#api-of-the-trends-collector","text":"","title":"API of the Trends Collector"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector","text":"Trends Collection Module: Collecting Search Trends via http-API.","title":"ai2business.kpi_collector.trends_collector"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.BuilderTrendsCollector","text":"BuilderTrendsCollector contains the abstract properties and methods. BuilderTrendsCollector specifies the properties and methods for creating the different parts of the DesignerTrendsCollector objects. Parameters: Name Type Description Default ABC class Helper class that provides a standard way to create an ABC using inheritance. required","title":"BuilderTrendsCollector"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.BuilderTrendsCollector.trends","text":"Abstract property of trends.","title":"trends"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.BuilderTrendsCollector.get_categories","text":"Abstract method of get_categories. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_categories ( self ) -> None : \"\"\"Abstract method of get_categories.\"\"\"","title":"get_categories()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.BuilderTrendsCollector.get_historical_interest","text":"Abstract method of get_historical_interest. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_historical_interest ( self ): \"\"\"Abstract method of get_historical_interest.\"\"\"","title":"get_historical_interest()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.BuilderTrendsCollector.get_interest_by_region","text":"Abstract method of get_interest_by_region. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_interest_by_region ( self ) -> None : \"\"\"Abstract method of get_interest_by_region.\"\"\"","title":"get_interest_by_region()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.BuilderTrendsCollector.get_interest_over_time","text":"Abstract method of get_interest_over_time. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_interest_over_time ( self ) -> None : \"\"\"Abstract method of get_interest_over_time.\"\"\"","title":"get_interest_over_time()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.BuilderTrendsCollector.get_related_queries","text":"Abstract extended_summary of get_related_queries. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_related_queries ( self ) -> None : \"\"\"Abstract extended_summary of get_related_queries.\"\"\"","title":"get_related_queries()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.BuilderTrendsCollector.get_related_topics","text":"Abstract method of get_related_topics. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_related_topics ( self ) -> None : \"\"\"Abstract method of get_related_topics.\"\"\"","title":"get_related_topics()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.BuilderTrendsCollector.get_suggestions","text":"Abstract method of get_suggestions. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_suggestions ( self ) -> None : \"\"\"Abstract method of get_suggestions.\"\"\"","title":"get_suggestions()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.BuilderTrendsCollector.get_today_searches","text":"Abstract method of get_today_searches. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_today_searches ( self ) -> None : \"\"\"Abstract method of get_today_searches.\"\"\"","title":"get_today_searches()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.BuilderTrendsCollector.get_top_charts","text":"Abstract method of get_top_charts. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_top_charts ( self ) -> None : \"\"\"Abstract method of get_top_charts.\"\"\"","title":"get_top_charts()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.BuilderTrendsCollector.get_trending_searches","text":"Abstract method of get_trending_searches. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def get_trending_searches ( self ) -> None : \"\"\"Abstract method of get_trending_searches.\"\"\"","title":"get_trending_searches()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.BuilderTrendsCollector.reset","text":"Abstract method of reset. Source code in ai2business/kpi_collector/trends_collector.py @abstractmethod def reset ( self ) -> None : \"\"\"Abstract method of reset.\"\"\"","title":"reset()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.DesignerTrendsCollector","text":"DesignerTrendsCollector contains the specific implementation of BuilderTrendsCollector . DesignerTrendsCollector contains the specific implementation of BuilderTrendsCollector based on the external library pytrends . Parameters: Name Type Description Default BuilderTrendsCollector class Abstract class that provides the implementations of the properties and methods. required","title":"DesignerTrendsCollector"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.DesignerTrendsCollector.trends","text":"Return the trend results. Returns: Type Description TrendProduct TrendProduct: (class) TrendProduct contains the dictionary and the return value of it.","title":"trends"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.DesignerTrendsCollector.__init__","text":"Initialization of DesignerTrendsCollector Parameters: Name Type Description Default keyword_list list Keyword-list with the items to search for. required timeframe str Time frame, respectively, period to search for. Defaults to \"today 5-y\". 'today 5-y' language str Search language. Defaults to \"en-US\". 'en-US' category int Define a specific search category . Defaults to 0. 0 timezone int Search timezone . Defaults to 360. 360 country str The country, where to search for. Defaults to \"\". '' property_filter str Property filer of the search; only in news, images, YouTube, shopping. Defaults to \"\". '' Source code in ai2business/kpi_collector/trends_collector.py def __init__ ( self , keyword_list : list , timeframe : str = \"today 5-y\" , language : str = \"en-US\" , category : int = 0 , timezone : int = 360 , country : str = \"\" , property_filter = \"\" , ** kwargs , ) -> None : \"\"\"Initialization of DesignerTrendsCollector Args: keyword_list (list): Keyword-list with the items to search for. timeframe (str, optional): Time frame, respectively, period to search for. Defaults to \"today 5-y\". language (str, optional): Search language. Defaults to \"en-US\". category (int, optional): Define a specific [search category](https://github.com/pat310/google-trends-api/wiki/Google-Trends-Categories). Defaults to 0. timezone (int, optional): [Search timezone](https://developers.google.com/maps/documentation/timezone/overview). Defaults to 360. country (str, optional): The country, where to search for. Defaults to \"\". property_filter (str, optional): Property filer of the search; only in news, images, YouTube, shopping. Defaults to \"\". \"\"\" self . keyword_list = keyword_list self . timeframe = timeframe self . language = language self . category = category self . timezone = timezone self . country = country self . property_filter = property_filter self . pytrends = TrendReq ( hl = self . language , tz = self . timezone , ** kwargs ) self . pytrends . build_payload ( kw_list = self . keyword_list , cat = self . category , timeframe = self . timeframe , geo = self . country , gprop = self . property_filter , ) self . reset ()","title":"__init__()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.DesignerTrendsCollector.get_categories","text":"Request available categories data for the current search. Source code in ai2business/kpi_collector/trends_collector.py def get_categories ( self ) -> None : \"\"\"Request available categories data for the current search.\"\"\" self . _product . add_product ( key = self . get_categories , value = self . pytrends . categories (), )","title":"get_categories()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.DesignerTrendsCollector.get_historical_interest","text":"Request data from a hour-grided time search. Parameters: Name Type Description Default year_start int Starting year required month_start int Starting month required day_start int Starting day required hour_start int Starting hour required year_end int Final year required month_end int Final month required day_end int Final day required hour_end int Final hour required Source code in ai2business/kpi_collector/trends_collector.py def get_historical_interest ( self , year_start : int , month_start : int , day_start : int , hour_start : int , year_end : int , month_end : int , day_end : int , hour_end : int , ** kwargs , ) -> None : \"\"\"Request data from a hour-grided time search. Args: year_start (int): Starting year month_start (int): Starting month day_start (int): Starting day hour_start (int): Starting hour year_end (int): Final year month_end (int): Final month day_end (int): Final day hour_end (int): Final hour \"\"\" self . _product . add_product ( key = self . get_historical_interest , value = self . pytrends . get_historical_interest ( keywords = self . keyword_list , year_start = year_start , month_start = month_start , day_start = day_start , hour_start = hour_start , year_end = year_end , month_end = month_end , day_end = day_end , hour_end = hour_end , cat = self . category , geo = self . country , gprop = self . property_filter , ** kwargs , ), )","title":"get_historical_interest()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.DesignerTrendsCollector.get_interest_by_region","text":"Request data from a interest by region search. Parameters: Name Type Description Default resolution str The resolution of the subregion. required Source code in ai2business/kpi_collector/trends_collector.py def get_interest_by_region ( self , resolution : str , ** kwargs ) -> None : \"\"\"Request data from a interest by region search. Args: resolution (str): The resolution of the subregion. \"\"\" self . _product . add_product ( key = self . get_interest_by_region , value = self . pytrends . interest_by_region ( resolution = resolution , ** kwargs ), )","title":"get_interest_by_region()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.DesignerTrendsCollector.get_interest_over_time","text":"Request data from a interest over time search. Source code in ai2business/kpi_collector/trends_collector.py def get_interest_over_time ( self ) -> None : \"\"\"Request data from a interest over time search.\"\"\" self . _product . add_product ( key = self . get_interest_over_time , value = self . pytrends . interest_over_time (), )","title":"get_interest_over_time()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.DesignerTrendsCollector.get_related_queries","text":"Request data of a related queries based on the keyword. Source code in ai2business/kpi_collector/trends_collector.py def get_related_queries ( self ) -> None : \"\"\"Request data of a related queries based on the keyword.\"\"\" self . _product . add_product ( key = self . get_related_queries , value = self . pytrends . related_queries (), )","title":"get_related_queries()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.DesignerTrendsCollector.get_related_topics","text":"Request data of a related topics based on the keyword. Source code in ai2business/kpi_collector/trends_collector.py def get_related_topics ( self ) -> None : \"\"\"Request data of a related topics based on the keyword.\"\"\" self . _product . add_product ( key = self . get_related_topics , value = self . pytrends . related_topics () )","title":"get_related_topics()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.DesignerTrendsCollector.get_suggestions","text":"Request data from keyword suggestion dropdown search. Source code in ai2business/kpi_collector/trends_collector.py def get_suggestions ( self ) -> None : \"\"\"Request data from keyword suggestion dropdown search.\"\"\" self . _product . add_product ( key = self . get_suggestions , value = { keyword : self . pytrends . suggestions ( keyword = keyword ) for keyword in self . keyword_list }, )","title":"get_suggestions()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.DesignerTrendsCollector.get_today_searches","text":"Request data from the daily search trends. Parameters: Name Type Description Default today_country str Name of the country of intrest. required Source code in ai2business/kpi_collector/trends_collector.py def get_today_searches ( self , today_country : str ) -> None : \"\"\"Request data from the daily search trends. Args: today_country (str): Name of the country of intrest. \"\"\" self . _product . add_product ( key = self . get_today_searches , value = self . pytrends . today_searches ( pn = today_country ), )","title":"get_today_searches()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.DesignerTrendsCollector.get_top_charts","text":"Request data from a top charts search. Parameters: Name Type Description Default date int Year required top_country str Name of the country of intrest. required Source code in ai2business/kpi_collector/trends_collector.py def get_top_charts ( self , date : int , top_country : str ) -> None : \"\"\"Request data from a top charts search. Args: date (int): Year top_country (str): Name of the country of intrest. \"\"\" self . _product . add_product ( key = self . get_top_charts , value = self . pytrends . top_charts ( date , hl = self . language , tz = self . timezone , geo = top_country ), )","title":"get_top_charts()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.DesignerTrendsCollector.get_trending_searches","text":"Request data from a search by country. Parameters: Name Type Description Default trend_country str Name of the country of intrest. Defaults to \"united_states\". required Source code in ai2business/kpi_collector/trends_collector.py def get_trending_searches ( self , trend_country : str ) -> None : \"\"\"Request data from a search by country. Args: trend_country (str, optional): Name of the country of intrest. Defaults to \"united_states\". \"\"\" self . _product . add_product ( key = self . get_trending_searches , value = self . pytrends . trending_searches ( pn = trend_country ), )","title":"get_trending_searches()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.DesignerTrendsCollector.reset","text":"Reset the product to empty. Source code in ai2business/kpi_collector/trends_collector.py def reset ( self ) -> None : \"\"\"Reset the product to empty.\"\"\" self . _product = TrendProduct ()","title":"reset()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendProduct","text":"TrendProduct contains the dictionary and the return value of it.","title":"TrendProduct"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendProduct.list_product_parts","text":"List of the product parts in the dictionary.","title":"list_product_parts"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendProduct.return_product","text":"Returns the product as a dictionary Returns: Type Description dict dict: The product dictionary contains the product and ist function name as key .","title":"return_product"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendProduct.__init__","text":"Initialization of TrendProduct. Source code in ai2business/kpi_collector/trends_collector.py def __init__ ( self ) -> None : \"\"\"Initialization of TrendProduct.\"\"\" self . product_parts = {}","title":"__init__()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendProduct.add_product","text":"Add the components of the trend search to the dictionary. Parameters: Name Type Description Default key Callable Used trend search function required value DataFrame Return value as dataframe or dictionary of the function. required Source code in ai2business/kpi_collector/trends_collector.py def add_product ( self , key : Callable , value : pd . DataFrame or dict ) -> None : \"\"\"Add the components of the trend search to the dictionary. Args: key (Callable): Used trend search function value (pd.DataFrame or dict): Return value as dataframe or dictionary of the function. \"\"\" self . product_parts [ key . __name__ ] = value","title":"add_product()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendsCollector","text":"TrendsCollector is in charge for executing the functions. During the execution, TrendsCollector can construct several product variations using the same building steps.","title":"TrendsCollector"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendsCollector.builder","text":"Builder as a property with value None. Returns: Type Description BuilderTrendsCollector BuilderTrendsCollector: A builder class, that contains the abstract properties and methods.","title":"builder"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendsCollector.__init__","text":"Initialize a fresh and empty builder. Source code in ai2business/kpi_collector/trends_collector.py def __init__ ( self ) -> None : \"\"\"Initialize a fresh and empty builder.\"\"\" self . _builder = None","title":"__init__()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendsCollector.find_categories","text":"Perform a search about the current search categories. Source code in ai2business/kpi_collector/trends_collector.py def find_categories ( self ) -> None : \"\"\"Perform a search about the current search categories.\"\"\" self . builder . get_categories ()","title":"find_categories()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendsCollector.find_historical_interest","text":"Preform a search trend analysis for a given time period in hour steps. Parameters: Name Type Description Default year_start int Starting year required month_start int Starting month required day_start int Starting day required hour_start int Starting hour required year_end int Final year required month_end int Final month required day_end int Final day required hour_end int Final hour required Source code in ai2business/kpi_collector/trends_collector.py def find_historical_interest ( self , year_start : int , month_start : int , day_start : int , hour_start : int , year_end : int , month_end : int , day_end : int , hour_end : int , ** kwargs , ) -> None : \"\"\"Preform a search trend analysis for a given time period in hour steps. Args: year_start (int): Starting year month_start (int): Starting month day_start (int): Starting day hour_start (int): Starting hour year_end (int): Final year month_end (int): Final month day_end (int): Final day hour_end (int): Final hour \"\"\" try : self . builder . get_historical_interest ( year_start = year_start , month_start = month_start , day_start = day_start , hour_start = hour_start , year_end = year_end , month_end = month_end , day_end = day_end , hour_end = hour_end , ** kwargs , ) except ValueError as exc : print ( f \"ERROR: { exc } -> Date is illegal!\" )","title":"find_historical_interest()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendsCollector.find_interest_by_region","text":"Perform a interest over region search. Parameters: Name Type Description Default resolution str The resolution of the subregion. Defaults to \"COUNTRY\". 'COUNTRY' Source code in ai2business/kpi_collector/trends_collector.py def find_interest_by_region ( self , resolution : str = \"COUNTRY\" , ** kwargs ) -> None : \"\"\"Perform a interest over region search. Args: resolution (str, optional): The resolution of the subregion. Defaults to \"COUNTRY\". \"\"\" self . builder . get_interest_by_region ( resolution = resolution , ** kwargs )","title":"find_interest_by_region()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendsCollector.find_interest_over_time","text":"Perform a interest over time search. Source code in ai2business/kpi_collector/trends_collector.py def find_interest_over_time ( self ) -> None : \"\"\"Perform a interest over time search.\"\"\" self . builder . get_interest_over_time ()","title":"find_interest_over_time()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendsCollector.find_related_queries","text":"Perform a search about the related queries to a keyword. Source code in ai2business/kpi_collector/trends_collector.py def find_related_queries ( self ) -> None : \"\"\"Perform a search about the related queries to a keyword.\"\"\" self . builder . get_related_queries ()","title":"find_related_queries()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendsCollector.find_related_topics","text":"Perform a search about the related topics to a keyword. Source code in ai2business/kpi_collector/trends_collector.py def find_related_topics ( self ) -> None : \"\"\"Perform a search about the related topics to a keyword.\"\"\" self . builder . get_related_topics ()","title":"find_related_topics()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendsCollector.find_suggestions","text":"Perform a search about suggestions for a given keyword. Source code in ai2business/kpi_collector/trends_collector.py def find_suggestions ( self ) -> None : \"\"\"Perform a search about suggestions for a given keyword.\"\"\" self . builder . get_suggestions ()","title":"find_suggestions()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendsCollector.find_today_searches","text":"Perform a search analysis about today's hot topics. Parameters: Name Type Description Default today_country str Name of the country of intrest. Defaults to \"US\". 'US' Source code in ai2business/kpi_collector/trends_collector.py def find_today_searches ( self , today_country : str = \"US\" ) -> None : \"\"\"Perform a search analysis about today's hot topics. Args: today_country (str, optional): Name of the country of intrest. Defaults to \"US\". \"\"\" self . builder . get_today_searches ( today_country = today_country )","title":"find_today_searches()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendsCollector.find_top_charts","text":"Perform a search chart analysis. Parameters: Name Type Description Default date int Year required top_country str [description]. Defaults to \"GLOBAL\". 'GLOBAL' Source code in ai2business/kpi_collector/trends_collector.py def find_top_charts ( self , date : int , top_country : str = \"GLOBAL\" ) -> None : \"\"\"Perform a search chart analysis. Args: date (int): Year top_country (str, optional): [description]. Defaults to \"GLOBAL\". \"\"\" try : self . builder . get_top_charts ( date = date , top_country = top_country ) except IndexError as exc : print ( f \"ERROR: { exc } -> Date is illegal!\" )","title":"find_top_charts()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendsCollector.find_trending_searches","text":"Performa a search trend analysis. Parameters: Name Type Description Default trend_country str Name of the country of intrest. Defaults to \"united_states\". 'united_states' Source code in ai2business/kpi_collector/trends_collector.py def find_trending_searches ( self , trend_country : str = \"united_states\" ) -> None : \"\"\"Performa a search trend analysis. Args: trend_country (str, optional): Name of the country of intrest. Defaults to \"united_states\". \"\"\" self . builder . get_trending_searches ( trend_country = trend_country )","title":"find_trending_searches()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendsCollector.make_wordcloud","text":"Make a worldcloud of related words and their suggestions.","title":"make_wordcloud()"},{"location":"trends_collector_api/#ai2business.kpi_collector.trends_collector.TrendsCollector.make_wordcloud--note","text":"The summation of different search engines can cause timeout errors due to length of the search. Source code in ai2business/kpi_collector/trends_collector.py def make_wordcloud ( self ) -> None : \"\"\"Make a worldcloud of related words and their suggestions. Note: --- The summation of different search engines can cause timeout errors due to length of the search. \"\"\" self . builder . get_related_topics () self . builder . get_related_queries () self . builder . get_suggestions () self . builder . get_categories ()","title":"Note:"},{"location":"tutorials/timeseries_forecast_tutorial/","text":"View in Colab GitHub source Runing a small timeseries forecast Before running a time series forecast, the initial data set has to be generated first via oneliner. The online four_step_search combines four types of trend search: Overtime By regions By related topics By related queries However, this example is only focusing on the dateframe from Overtime . ! pip install git + https : // github . com / AI2Business / ai2business . git from ai2business.macros import oneliner Hence, search trend for the years \"2017\", \"2018\", \"2019\", and \"2020\" will be generated and plotted. Note A dependency between the years is obviously given, even if single event trigger breakouts. keyword_list : list = [ \"2017\" , \"2018\" , \"2019\" , \"2020\" ] timeframe = oneliner . TrendSearch . four_step_search ( keyword_list = keyword_list ) timeframe [ \"get_interest_over_time\" ] . plot () And the Pearson-correlation shows the negative linear dependency between the current and previous year. timeframe [ \"get_interest_over_time\" ] . corr () dataset = timeframe [ \"get_interest_over_time\" ] . drop ( columns = \"isPartial\" ) print ( dataset ) Loading the automl modul. from sklearn.model_selection import train_test_split from ai2business.ai_engines import automl_neural_network as an Setup the Timeseries Forecaster. x_train , y_train , x_test , y_test = train_test_split ( dataset . iloc [:, 0 : 2 ] . values , dataset . iloc [:, 3 ] . values , test_size = 0.33 , random_state = 42 , ) context = an . AutoMLPipeline ( an . TimeseriesForecaster ()) context . run_automl () Fitting the Timeseries Forecaster. context . train = an . AutoMLFit ( x_train , y_train , batch_size = 32 , epochs = 1 ) context . run_automl () Evaluate the Timeseries Forecaster. context . train = an . AutoMLEvaluate ( x_test , y_test , batch_size = 32 ) context . run_automl ()","title":"AutoML"},{"location":"tutorials/timeseries_forecast_tutorial/#runing-a-small-timeseries-forecast","text":"Before running a time series forecast, the initial data set has to be generated first via oneliner. The online four_step_search combines four types of trend search: Overtime By regions By related topics By related queries However, this example is only focusing on the dateframe from Overtime . ! pip install git + https : // github . com / AI2Business / ai2business . git from ai2business.macros import oneliner Hence, search trend for the years \"2017\", \"2018\", \"2019\", and \"2020\" will be generated and plotted.","title":"Runing a small timeseries forecast"},{"location":"tutorials/timeseries_forecast_tutorial/#note","text":"A dependency between the years is obviously given, even if single event trigger breakouts. keyword_list : list = [ \"2017\" , \"2018\" , \"2019\" , \"2020\" ] timeframe = oneliner . TrendSearch . four_step_search ( keyword_list = keyword_list ) timeframe [ \"get_interest_over_time\" ] . plot () And the Pearson-correlation shows the negative linear dependency between the current and previous year. timeframe [ \"get_interest_over_time\" ] . corr () dataset = timeframe [ \"get_interest_over_time\" ] . drop ( columns = \"isPartial\" ) print ( dataset )","title":"Note"},{"location":"tutorials/timeseries_forecast_tutorial/#loading-the-automl-modul","text":"from sklearn.model_selection import train_test_split from ai2business.ai_engines import automl_neural_network as an","title":"Loading the automl modul."},{"location":"tutorials/timeseries_forecast_tutorial/#setup-the-timeseries-forecaster","text":"x_train , y_train , x_test , y_test = train_test_split ( dataset . iloc [:, 0 : 2 ] . values , dataset . iloc [:, 3 ] . values , test_size = 0.33 , random_state = 42 , ) context = an . AutoMLPipeline ( an . TimeseriesForecaster ()) context . run_automl ()","title":"Setup the Timeseries Forecaster."},{"location":"tutorials/timeseries_forecast_tutorial/#fitting-the-timeseries-forecaster","text":"context . train = an . AutoMLFit ( x_train , y_train , batch_size = 32 , epochs = 1 ) context . run_automl ()","title":"Fitting the Timeseries Forecaster."},{"location":"tutorials/timeseries_forecast_tutorial/#evaluate-the-timeseries-forecaster","text":"context . train = an . AutoMLEvaluate ( x_test , y_test , batch_size = 32 ) context . run_automl ()","title":"Evaluate the Timeseries Forecaster."},{"location":"tutorials/trend_search_tutorial/","text":"View in Colab GitHub source Building a search trend dataframe Trend search can be differs roughly in two major criteria: An active driven search by using keyword like \"Corona\", \"S&P 500\", \"Hope\" A passive driven search by using the community feedback to gather actual topics. In this context, the trend-search -module is a designed as a builder model to add much searches as required in a collection {} . ! pip install git + https : // github . com / AI2Business / ai2business . git Loading the model trends_collector from ai2business.kpi_collector import trends_collector Setup the search with the keyword list and write it into the builder keyword_list : list = [ \"Corona\" , \"S&P 500\" , \"Hope\" ] trends = trends_collector . TrendsCollector () builder = trends_collector . DesignerTrendsCollector ( keyword_list = keyword_list ) trends . builder = builder Add the trend-search functions, in this particular case: Searching over time Searching in a special area Searching for related queries Searching for realted topics All the information will be generated and stored in the builder . trends . find_interest_over_time () trends . find_interest_by_region () trends . find_related_topics () trends . find_related_queries () With the use of the builder's property-attribute, a dictionary will be returned consisting of pandas-data frames and dictionaries. The key-names are the function names. >>> results = builder . trends . return_product >>> result . keys () ... dict_keys ([ 'get_interest_over_time' , 'get_interest_by_region' , 'get_related_topics' , 'get_related_queries' ]) Note It is important to immediately transfer the return value to a variable because a second return will return an empty dictionary. Return the objects of the builder in the dictionary results = builder . trends . return_product print ( results . keys ()) print ( results ) Due to the fact that the dataframes are pandas-dataframes, all pandas commands can be easily applied, like plot, for example. results [ \"get_interest_over_time\" ] . plot ( title = \"Search Trend of the Big Three (per time)\" ) results [ \"get_interest_by_region\" ] . plot . bar ( title = \"Search Trend of the Big Three (per location)\" , figsize = ( 28 , 12 ) ) Also, the stored data in a dictionary are saved as pandas dataframe so that the trend results can be then easily analyzed again the default commands of pandas. for key in keyword_list : results [ \"get_related_queries\" ][ key ][ \"top\" ] . plot . bar ( x = \"query\" , title = f \"Related Queries for { key } \" ) Finally, also non-visual commands like correlation analysis are working fine. results [ \"get_interest_by_region\" ] . corr ( \"pearson\" ) results [ \"get_interest_by_region\" ] . corr ( \"kendall\" ) results [ \"get_interest_by_region\" ] . corr ( \"spearman\" )","title":"Trend Search"},{"location":"tutorials/trend_search_tutorial/#building-a-search-trend-dataframe","text":"Trend search can be differs roughly in two major criteria: An active driven search by using keyword like \"Corona\", \"S&P 500\", \"Hope\" A passive driven search by using the community feedback to gather actual topics. In this context, the trend-search -module is a designed as a builder model to add much searches as required in a collection {} . ! pip install git + https : // github . com / AI2Business / ai2business . git","title":"Building a search trend dataframe"},{"location":"tutorials/trend_search_tutorial/#loading-the-model-trends_collector","text":"from ai2business.kpi_collector import trends_collector Setup the search with the keyword list and write it into the builder keyword_list : list = [ \"Corona\" , \"S&P 500\" , \"Hope\" ] trends = trends_collector . TrendsCollector () builder = trends_collector . DesignerTrendsCollector ( keyword_list = keyword_list ) trends . builder = builder","title":"Loading the model trends_collector"},{"location":"tutorials/trend_search_tutorial/#add-the-trend-search-functions-in-this-particular-case","text":"Searching over time Searching in a special area Searching for related queries Searching for realted topics All the information will be generated and stored in the builder . trends . find_interest_over_time () trends . find_interest_by_region () trends . find_related_topics () trends . find_related_queries () With the use of the builder's property-attribute, a dictionary will be returned consisting of pandas-data frames and dictionaries. The key-names are the function names. >>> results = builder . trends . return_product >>> result . keys () ... dict_keys ([ 'get_interest_over_time' , 'get_interest_by_region' , 'get_related_topics' , 'get_related_queries' ])","title":"Add the trend-search functions, in this particular case:"},{"location":"tutorials/trend_search_tutorial/#note","text":"It is important to immediately transfer the return value to a variable because a second return will return an empty dictionary.","title":"Note"},{"location":"tutorials/trend_search_tutorial/#return-the-objects-of-the-builder-in-the-dictionary","text":"results = builder . trends . return_product print ( results . keys ()) print ( results ) Due to the fact that the dataframes are pandas-dataframes, all pandas commands can be easily applied, like plot, for example. results [ \"get_interest_over_time\" ] . plot ( title = \"Search Trend of the Big Three (per time)\" ) results [ \"get_interest_by_region\" ] . plot . bar ( title = \"Search Trend of the Big Three (per location)\" , figsize = ( 28 , 12 ) ) Also, the stored data in a dictionary are saved as pandas dataframe so that the trend results can be then easily analyzed again the default commands of pandas. for key in keyword_list : results [ \"get_related_queries\" ][ key ][ \"top\" ] . plot . bar ( x = \"query\" , title = f \"Related Queries for { key } \" ) Finally, also non-visual commands like correlation analysis are working fine. results [ \"get_interest_by_region\" ] . corr ( \"pearson\" ) results [ \"get_interest_by_region\" ] . corr ( \"kendall\" ) results [ \"get_interest_by_region\" ] . corr ( \"spearman\" )","title":"Return the objects of the builder in the dictionary"}]}